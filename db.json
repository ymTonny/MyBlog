{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/Tap/index.html","path":"Tap/index.html","modified":0,"renderable":0},{"_id":"source/Tap/icon.png","path":"Tap/icon.png","modified":0,"renderable":0},{"_id":"source/cxk/index.html","path":"cxk/index.html","modified":0,"renderable":0},{"_id":"source/resume/index.html","path":"resume/index.html","modified":0,"renderable":0},{"_id":"source/resume/image/title-awards-and.png","path":"resume/image/title-awards-and.png","modified":0,"renderable":0},{"_id":"source/cxk/images/b1.png","path":"cxk/images/b1.png","modified":0,"renderable":0},{"_id":"source/Tap/css/mikutap.css","path":"Tap/css/mikutap.css","modified":0,"renderable":0},{"_id":"source/Tap/js/mikutap.min.js","path":"Tap/js/mikutap.min.js","modified":0,"renderable":0},{"_id":"source/cxk/images/ballshadow.png","path":"cxk/images/ballshadow.png","modified":0,"renderable":0},{"_id":"source/cxk/images/b2.png","path":"cxk/images/b2.png","modified":0,"renderable":0},{"_id":"source/cxk/images/ball.png","path":"cxk/images/ball.png","modified":0,"renderable":0},{"_id":"source/cxk/images/paddle2_1.png","path":"cxk/images/paddle2_1.png","modified":0,"renderable":0},{"_id":"source/cxk/images/paddle3_2.png","path":"cxk/images/paddle3_2.png","modified":0,"renderable":0},{"_id":"source/cxk/images/paddle2_2.png","path":"cxk/images/paddle2_2.png","modified":0,"renderable":0},{"_id":"source/cxk/images/paddle3_1.png","path":"cxk/images/paddle3_1.png","modified":0,"renderable":0},{"_id":"source/cxk/css/style.css","path":"cxk/css/style.css","modified":0,"renderable":0},{"_id":"source/cxk/images/paddle_1.png","path":"cxk/images/paddle_1.png","modified":0,"renderable":0},{"_id":"source/cxk/images/paddle_2.png","path":"cxk/images/paddle_2.png","modified":0,"renderable":0},{"_id":"source/cxk/js/bootstrap.min.js","path":"cxk/js/bootstrap.min.js","modified":0,"renderable":0},{"_id":"source/cxk/js/common.js","path":"cxk/js/common.js","modified":0,"renderable":0},{"_id":"source/cxk/js/game.js","path":"cxk/js/game.js","modified":0,"renderable":0},{"_id":"source/cxk/js/main.js","path":"cxk/js/main.js","modified":0,"renderable":0},{"_id":"source/cxk/js/scene.js","path":"cxk/js/scene.js","modified":0,"renderable":0},{"_id":"source/resume/css/style.css","path":"resume/css/style.css","modified":0,"renderable":0},{"_id":"source/resume/font/frankfurter-plain.ttf","path":"resume/font/frankfurter-plain.ttf","modified":0,"renderable":0},{"_id":"source/cxk/js/hm.js","path":"cxk/js/hm.js","modified":0,"renderable":0},{"_id":"source/resume/font/lobster-1.4.ttf","path":"resume/font/lobster-1.4.ttf","modified":0,"renderable":0},{"_id":"source/resume/font/poster-sans-bold.ttf","path":"resume/font/poster-sans-bold.ttf","modified":0,"renderable":0},{"_id":"source/resume/image/1615.png","path":"resume/image/1615.png","modified":0,"renderable":0},{"_id":"source/resume/image/algae-b.png","path":"resume/image/algae-b.png","modified":0,"renderable":0},{"_id":"source/resume/font/lobster-1.4.woff","path":"resume/font/lobster-1.4.woff","modified":0,"renderable":0},{"_id":"source/resume/image/alien-body.png","path":"resume/image/alien-body.png","modified":0,"renderable":0},{"_id":"source/resume/image/algae-a.png","path":"resume/image/algae-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/alien-ship.png","path":"resume/image/alien-ship.png","modified":0,"renderable":0},{"_id":"source/resume/image/balloon.png","path":"resume/image/balloon.png","modified":0,"renderable":0},{"_id":"source/resume/image/banner-bottom-a.png","path":"resume/image/banner-bottom-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/alien-steer.png","path":"resume/image/alien-steer.png","modified":0,"renderable":0},{"_id":"source/resume/image/banner-button.png","path":"resume/image/banner-button.png","modified":0,"renderable":0},{"_id":"source/resume/image/banner-bottom-b.png","path":"resume/image/banner-bottom-b.png","modified":0,"renderable":0},{"_id":"source/resume/image/banner-top-b.png","path":"resume/image/banner-top-b.png","modified":0,"renderable":0},{"_id":"source/resume/image/banner-top-a.png","path":"resume/image/banner-top-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/bubble.png","path":"resume/image/bubble.png","modified":0,"renderable":0},{"_id":"source/resume/image/building-a-leg-frame.png","path":"resume/image/building-a-leg-frame.png","modified":0,"renderable":0},{"_id":"source/resume/image/box.png","path":"resume/image/box.png","modified":0,"renderable":0},{"_id":"source/resume/image/building-b-leg-frame.png","path":"resume/image/building-b-leg-frame.png","modified":0,"renderable":0},{"_id":"source/resume/image/building-a.png","path":"resume/image/building-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/building-b.png","path":"resume/image/building-b.png","modified":0,"renderable":0},{"_id":"source/resume/image/chain-block-string.png","path":"resume/image/chain-block-string.png","modified":0,"renderable":0},{"_id":"source/resume/image/contact-box-hole-a.png","path":"resume/image/contact-box-hole-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/building-c.png","path":"resume/image/building-c.png","modified":0,"renderable":0},{"_id":"source/resume/image/contact-box-hole-b.png","path":"resume/image/contact-box-hole-b.png","modified":0,"renderable":0},{"_id":"source/resume/image/chain-block.png","path":"resume/image/chain-block.png","modified":0,"renderable":0},{"_id":"source/resume/image/cloud.png","path":"resume/image/cloud.png","modified":0,"renderable":0},{"_id":"source/resume/image/contact-cloud-bottom.png","path":"resume/image/contact-cloud-bottom.png","modified":0,"renderable":0},{"_id":"source/resume/image/contact-box.png","path":"resume/image/contact-box.png","modified":0,"renderable":0},{"_id":"source/resume/image/contact-button.png","path":"resume/image/contact-button.png","modified":0,"renderable":0},{"_id":"source/resume/image/contact-cloud-top.png","path":"resume/image/contact-cloud-top.png","modified":0,"renderable":0},{"_id":"source/resume/image/coral-a.png","path":"resume/image/coral-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/coral-b.png","path":"resume/image/coral-b.png","modified":0,"renderable":0},{"_id":"source/resume/image/contact-confirmation-triangle.png","path":"resume/image/contact-confirmation-triangle.png","modified":0,"renderable":0},{"_id":"source/resume/image/coral-big-a.png","path":"resume/image/coral-big-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/crane.png","path":"resume/image/crane.png","modified":0,"renderable":0},{"_id":"source/resume/image/coral-big-b.png","path":"resume/image/coral-big-b.png","modified":0,"renderable":0},{"_id":"source/resume/image/crab.png","path":"resume/image/crab.png","modified":0,"renderable":0},{"_id":"source/resume/image/crab-eyes.png","path":"resume/image/crab-eyes.png","modified":0,"renderable":0},{"_id":"source/resume/image/dock-floor.png","path":"resume/image/dock-floor.png","modified":0,"renderable":0},{"_id":"source/resume/image/dock-column.png","path":"resume/image/dock-column.png","modified":0,"renderable":0},{"_id":"source/resume/image/enemy-face-a-eyes.png","path":"resume/image/enemy-face-a-eyes.png","modified":0,"renderable":0},{"_id":"source/resume/image/enemy-face-b-eyes.png","path":"resume/image/enemy-face-b-eyes.png","modified":0,"renderable":0},{"_id":"source/resume/image/enemy-face-a.png","path":"resume/image/enemy-face-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/fish-eyes.png","path":"resume/image/fish-eyes.png","modified":0,"renderable":0},{"_id":"source/resume/image/enemy-face-b.png","path":"resume/image/enemy-face-b.png","modified":0,"renderable":0},{"_id":"source/resume/image/fish.png","path":"resume/image/fish.png","modified":0,"renderable":0},{"_id":"source/resume/image/floor.png","path":"resume/image/floor.png","modified":0,"renderable":0},{"_id":"source/resume/image/grass.png","path":"resume/image/grass.png","modified":0,"renderable":0},{"_id":"source/resume/image/gate.png","path":"resume/image/gate.png","modified":0,"renderable":0},{"_id":"source/resume/image/hangar-window.png","path":"resume/image/hangar-window.png","modified":0,"renderable":0},{"_id":"source/resume/image/mountain.png","path":"resume/image/mountain.png","modified":0,"renderable":0},{"_id":"source/resume/image/nba-board-red.png","path":"resume/image/nba-board-red.png","modified":0,"renderable":0},{"_id":"source/resume/image/nba-ball.png","path":"resume/image/nba-ball.png","modified":0,"renderable":0},{"_id":"source/resume/image/ground.png","path":"resume/image/ground.png","modified":0,"renderable":0},{"_id":"source/resume/image/nba-board-blue.png","path":"resume/image/nba-board-blue.png","modified":0,"renderable":0},{"_id":"source/resume/image/nba-player.png","path":"resume/image/nba-player.png","modified":0,"renderable":0},{"_id":"source/resume/image/panel.png","path":"resume/image/panel.png","modified":0,"renderable":0},{"_id":"source/resume/image/piechart-foxnews-front.png","path":"resume/image/piechart-foxnews-front.png","modified":0,"renderable":0},{"_id":"source/resume/image/nba-rim.png","path":"resume/image/nba-rim.png","modified":0,"renderable":0},{"_id":"source/resume/image/plant-ribbon-right.png","path":"resume/image/plant-ribbon-right.png","modified":0,"renderable":0},{"_id":"source/resume/image/piechart-back.png","path":"resume/image/piechart-back.png","modified":0,"renderable":0},{"_id":"source/resume/image/plant-ribbon-left.png","path":"resume/image/plant-ribbon-left.png","modified":0,"renderable":0},{"_id":"source/resume/image/plant-head-leaves.png","path":"resume/image/plant-head-leaves.png","modified":0,"renderable":0},{"_id":"source/resume/image/preloader-banner-right.png","path":"resume/image/preloader-banner-right.png","modified":0,"renderable":0},{"_id":"source/resume/image/preloader-dots-static.png","path":"resume/image/preloader-dots-static.png","modified":0,"renderable":0},{"_id":"source/resume/image/ribbon-left.png","path":"resume/image/ribbon-left.png","modified":0,"renderable":0},{"_id":"source/resume/image/preloader-banner-left.png","path":"resume/image/preloader-banner-left.png","modified":0,"renderable":0},{"_id":"source/resume/image/ribbon-right.png","path":"resume/image/ribbon-right.png","modified":0,"renderable":0},{"_id":"source/resume/image/qzone.png","path":"resume/image/qzone.png","modified":0,"renderable":0},{"_id":"source/resume/image/preloader-dots-animation.gif","path":"resume/image/preloader-dots-animation.gif","modified":0,"renderable":0},{"_id":"source/resume/image/robby-eyes-close.png","path":"resume/image/robby-eyes-close.png","modified":0,"renderable":0},{"_id":"source/resume/image/robot-hand-c.png","path":"resume/image/robot-hand-c.png","modified":0,"renderable":0},{"_id":"source/resume/image/robby-slides.png","path":"resume/image/robby-slides.png","modified":0,"renderable":0},{"_id":"source/resume/image/robot-body.png","path":"resume/image/robot-body.png","modified":0,"renderable":0},{"_id":"source/resume/image/robot-hand-a.png","path":"resume/image/robot-hand-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/sea-ribbon-left.png","path":"resume/image/sea-ribbon-left.png","modified":0,"renderable":0},{"_id":"source/resume/image/robot-hand-b.png","path":"resume/image/robot-hand-b.png","modified":0,"renderable":0},{"_id":"source/resume/image/sea-wave.png","path":"resume/image/sea-wave.png","modified":0,"renderable":0},{"_id":"source/resume/image/social-bottom.png","path":"resume/image/social-bottom.png","modified":0,"renderable":0},{"_id":"source/resume/image/sea-ribbon-right.png","path":"resume/image/sea-ribbon-right.png","modified":0,"renderable":0},{"_id":"source/resume/image/robot-hand-d.png","path":"resume/image/robot-hand-d.png","modified":0,"renderable":0},{"_id":"source/resume/image/social-top.png","path":"resume/image/social-top.png","modified":0,"renderable":0},{"_id":"source/resume/image/social-facebook.png","path":"resume/image/social-facebook.png","modified":0,"renderable":0},{"_id":"source/resume/image/squid-hand-close-a.png","path":"resume/image/squid-hand-close-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/social-twitter.png","path":"resume/image/social-twitter.png","modified":0,"renderable":0},{"_id":"source/resume/image/squid-body.png","path":"resume/image/squid-body.png","modified":0,"renderable":0},{"_id":"source/resume/image/squid-hand-close-c.png","path":"resume/image/squid-hand-close-c.png","modified":0,"renderable":0},{"_id":"source/resume/image/squid-hand-close-d.png","path":"resume/image/squid-hand-close-d.png","modified":0,"renderable":0},{"_id":"source/resume/image/squid-hand-close-b.png","path":"resume/image/squid-hand-close-b.png","modified":0,"renderable":0},{"_id":"source/resume/image/squid-hand-open-a.png","path":"resume/image/squid-hand-open-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/squid-hand-open-c.png","path":"resume/image/squid-hand-open-c.png","modified":0,"renderable":0},{"_id":"source/resume/image/squid-hand-open-d.png","path":"resume/image/squid-hand-open-d.png","modified":0,"renderable":0},{"_id":"source/resume/image/title-about.png","path":"resume/image/title-about.png","modified":0,"renderable":0},{"_id":"source/resume/image/squid-hand-open-b.png","path":"resume/image/squid-hand-open-b.png","modified":0,"renderable":0},{"_id":"source/resume/image/title-experience.png","path":"resume/image/title-experience.png","modified":0,"renderable":0},{"_id":"source/resume/image/title-publication.png","path":"resume/image/title-publication.png","modified":0,"renderable":0},{"_id":"source/resume/image/title-contact.png","path":"resume/image/title-contact.png","modified":0,"renderable":0},{"_id":"source/resume/image/tree-bright-a.png","path":"resume/image/tree-bright-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/title-robby.png","path":"resume/image/title-robby.png","modified":0,"renderable":0},{"_id":"source/resume/image/title-skills.png","path":"resume/image/title-skills.png","modified":0,"renderable":0},{"_id":"source/resume/image/tree-bright-b.png","path":"resume/image/tree-bright-b.png","modified":0,"renderable":0},{"_id":"source/resume/image/tree-bright-e.png","path":"resume/image/tree-bright-e.png","modified":0,"renderable":0},{"_id":"source/resume/image/tree-dark-a.png","path":"resume/image/tree-dark-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/tree-dark-b.png","path":"resume/image/tree-dark-b.png","modified":0,"renderable":0},{"_id":"source/resume/image/tree-bright-d.png","path":"resume/image/tree-bright-d.png","modified":0,"renderable":0},{"_id":"source/resume/image/tsina.png","path":"resume/image/tsina.png","modified":0,"renderable":0},{"_id":"source/resume/image/turtle-eyes.png","path":"resume/image/turtle-eyes.png","modified":0,"renderable":0},{"_id":"source/resume/image/tree-dark-d.png","path":"resume/image/tree-dark-d.png","modified":0,"renderable":0},{"_id":"source/resume/image/tree-dark-c.png","path":"resume/image/tree-dark-c.png","modified":0,"renderable":0},{"_id":"source/resume/image/waterfall-a.png","path":"resume/image/waterfall-a.png","modified":0,"renderable":0},{"_id":"source/resume/image/turtle.png","path":"resume/image/turtle.png","modified":0,"renderable":0},{"_id":"source/resume/script/container-transparent-or-displaynone.js","path":"resume/script/container-transparent-or-displaynone.js","modified":0,"renderable":0},{"_id":"source/resume/image/waterfall-b.png","path":"resume/image/waterfall-b.png","modified":0,"renderable":0},{"_id":"source/resume/script/ga.js","path":"resume/script/ga.js","modified":0,"renderable":0},{"_id":"source/resume/script/analytics.js","path":"resume/script/analytics.js","modified":0,"renderable":0},{"_id":"source/resume/script/email.js","path":"resume/script/email.js","modified":0,"renderable":0},{"_id":"source/resume/script/detect-browser-device.js","path":"resume/script/detect-browser-device.js","modified":0,"renderable":0},{"_id":"source/resume/script/preloader-transparent-or-displaynone.js","path":"resume/script/preloader-transparent-or-displaynone.js","modified":0,"renderable":0},{"_id":"source/resume/script/preloader.js","path":"resume/script/preloader.js","modified":0,"renderable":0},{"_id":"source/resume/script/jquery-ui-1.10.2.custom.min.js","path":"resume/script/jquery-ui-1.10.2.custom.min.js","modified":0,"renderable":0},{"_id":"themes/hexo-theme-antiquity/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/js/love.js","path":"js/love.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/images/default-avatar.jpg","path":"images/default-avatar.jpg","modified":0,"renderable":1},{"_id":"source/cxk/js/jquery.min.js","path":"cxk/js/jquery.min.js","modified":0,"renderable":0},{"_id":"source/cxk/css/bootstrap.min.css","path":"cxk/css/bootstrap.min.css","modified":0,"renderable":0},{"_id":"source/cxk/js/showdown.min.js","path":"cxk/js/showdown.min.js","modified":0,"renderable":0},{"_id":"source/resume/script/jquery-1.9.1.min.js","path":"resume/script/jquery-1.9.1.min.js","modified":0,"renderable":0},{"_id":"source/resume/script/main.js","path":"resume/script/main.js","modified":0,"renderable":0},{"_id":"themes/hexo-theme-antiquity/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"source/Tap/shared/js/common-2.min.js","path":"Tap/shared/js/common-2.min.js","modified":0,"renderable":0},{"_id":"themes/hexo-theme-antiquity/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"source/Tap/shared/css/common-1.css","path":"Tap/shared/css/common-1.css","modified":0,"renderable":0},{"_id":"source/Tap/shared/css/index-1.css","path":"Tap/shared/css/index-1.css","modified":0,"renderable":0},{"_id":"themes/hexo-theme-antiquity/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_cloud.png","path":"images/icons/css_cloud.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_doorframe.png","path":"images/icons/css_doorframe.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_tag.png","path":"images/icons/css_tag.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_patterns.png","path":"images/icons/css_patterns.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_pattern_bottom.png","path":"images/icons/css_pattern_bottom.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_texture.png","path":"images/icons/css_texture.png","modified":0,"renderable":1},{"_id":"source/Tap/data/track/track.json","path":"Tap/data/track/track.json","modified":0,"renderable":0},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_window_frame.png","path":"images/icons/css_window_frame.png","modified":0,"renderable":1},{"_id":"source/Tap/shared/sp/css/common.css","path":"Tap/shared/sp/css/common.css","modified":0,"renderable":0},{"_id":"source/Tap/data/main/main.json","path":"Tap/data/main/main.json","modified":0,"renderable":0},{"_id":"source/cxk/images/background.jpg","path":"cxk/images/background.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-antiquity/source/images/bg.jpg","path":"images/bg.jpg","modified":0,"renderable":1},{"_id":"source/resume/mario.mp3","path":"resume/mario.mp3","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"4b0c3909cf8403090d39d3e2f14165725901242d","modified":1565488795140},{"_id":"source/README.md","hash":"6be4e8b2de059f5b3b8fd2e9962061d4f85e54e1","modified":1565488795140},{"_id":"themes/hexo-theme-antiquity/package.json","hash":"246844e9561f8e8efc46323e3226d56f1a8070ae","modified":1565490571790},{"_id":"themes/hexo-theme-antiquity/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1565490571706},{"_id":"source/Tap/index.html","hash":"a5ac73b91ab874557126683306a7b91776715b9d","modified":1565488795146},{"_id":"source/Tap/icon.png","hash":"d03c72c04dbf6d925524b50ad9042cc84c4624fe","modified":1565488795145},{"_id":"source/_posts/array.md","hash":"d1e4ff97eea0f7a5c5a305be2fb2a916b92fa8c7","modified":1565513967487},{"_id":"themes/hexo-theme-antiquity/.DS_Store","hash":"581e48e96ee871c6fae1be5d707eee8c6a1b65b7","modified":1565490571659},{"_id":"themes/hexo-theme-antiquity/_config.yml","hash":"73db5fde6a0089fc5c55609270dd9a63f33e7be0","modified":1565494414136},{"_id":"source/_posts/CodecheckList.md","hash":"6044c240639a37e6838d93e03f13d38229354887","modified":1565513930278},{"_id":"source/_posts/async-await.md","hash":"641f1c81696a45b26dfd4b8859c1a2b39195ae7f","modified":1565513957742},{"_id":"source/_posts/electron-packager.md","hash":"529e087045be40dc1944ba8b650074dece1367e4","modified":1565513919906},{"_id":"source/_posts/for.md","hash":"581a24d0a320d09838597b4717a665e741067619","modified":1565513901460},{"_id":"source/_posts/clip-path.md","hash":"1da5f74a73e064cc3ddd58ec0935fdc3be376ca9","modified":1565513944004},{"_id":"source/_posts/git-operating.md","hash":"713795435e824b6e28374bbdb8e5d57943baa380","modified":1565513885184},{"_id":"source/_posts/reflux.md","hash":"800158f764158e27739ed8aac98fe3e7b7b7ca1f","modified":1565513857609},{"_id":"source/_posts/interview.md","hash":"eca72989a47b9f143aca4b457f6e4b814acf4caf","modified":1565513867294},{"_id":"source/_posts/vue-router.md","hash":"b0e16754084f3a59232638eaabbf58614d22a6bc","modified":1565513805673},{"_id":"source/_posts/vue-interview.md","hash":"0a35b9eb0ab309c7620a9dd3f8582fb8fb4ae661","modified":1565513822123},{"_id":"source/_posts/javascript.md","hash":"a1384151a4fc957e70a8c9ec36da178a0aedfd61","modified":1565513855185},{"_id":"source/_posts/vue-shake.md","hash":"e101ac1f3d03e30f2ccbbbef9a1189216e3a293b","modified":1565513808902},{"_id":"source/categories/index.md","hash":"48169a1e4f49b93424b2ff580bdf1c166b8d382a","modified":1565488795157},{"_id":"source/tags/index.md","hash":"e9009dcb0351cb651d2b0828e8aa9b607b3a2e3f","modified":1565488795254},{"_id":"themes/hexo-theme-antiquity/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1565490571884},{"_id":"themes/hexo-theme-antiquity/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1565490571853},{"_id":"themes/hexo-theme-antiquity/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1565490571821},{"_id":"themes/hexo-theme-antiquity/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1565490571915},{"_id":"themes/hexo-theme-antiquity/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1565490571943},{"_id":"themes/hexo-theme-antiquity/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1565490571974},{"_id":"themes/hexo-theme-antiquity/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1565490572006},{"_id":"themes/hexo-theme-antiquity/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1565490572037},{"_id":"themes/hexo-theme-antiquity/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1565490572059},{"_id":"source/cxk/index.html","hash":"d8ff10756da8e493aef38d8a4beb926124f17554","modified":1565488795170},{"_id":"themes/hexo-theme-antiquity/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1565490572144},{"_id":"themes/hexo-theme-antiquity/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1565490572090},{"_id":"themes/hexo-theme-antiquity/languages/zh-CN.yml","hash":"52772fe0c7e6d932c1b103e79acd6b1985d6e473","modified":1565490572106},{"_id":"themes/hexo-theme-antiquity/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1565490572175},{"_id":"themes/hexo-theme-antiquity/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1565490572159},{"_id":"themes/hexo-theme-antiquity/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1565490572206},{"_id":"themes/hexo-theme-antiquity/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1565490572291},{"_id":"themes/hexo-theme-antiquity/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1565490572275},{"_id":"themes/hexo-theme-antiquity/scripts/highlight.js","hash":"b6007d3aeb60e63918ed4aa5a7012edebcabe648","modified":1565490573146},{"_id":"themes/hexo-theme-antiquity/scripts/fancybox.js","hash":"76033c94a88f4ee264e1a55885077614a463b164","modified":1565490573108},{"_id":"source/resume/index.html","hash":"21fc055b5840ff56e43d6386519e60968f4c3250","modified":1565488795236},{"_id":"themes/hexo-theme-antiquity/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1565490572322},{"_id":"source/resume/image/title-awards-and.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565488795225},{"_id":"themes/hexo-theme-antiquity/source/.DS_Store","hash":"8e9c17524920312d5902c1ed0a4bb944a744c490","modified":1565490573177},{"_id":"themes/hexo-theme-antiquity/layout/layout.ejs","hash":"5ad450893fc3f6b70b83cc2d3d8fb66683350626","modified":1565499058499},{"_id":"source/cxk/images/b1.png","hash":"17958f04c56ad84fcbbebf6725d7ce6177924bd9","modified":1565488795159},{"_id":"source/Tap/css/mikutap.css","hash":"a40ab49b02412f818c7cc04767b432bb9964f226","modified":1565488795141},{"_id":"source/Tap/js/mikutap.min.js","hash":"e6b65b3ebca6729657ddd272932b76daa395005d","modified":1565488795147},{"_id":"source/cxk/images/ballshadow.png","hash":"0b6571f53c58a5a3ed01ed438a0f15f14a981ac5","modified":1565488795166},{"_id":"source/cxk/images/b2.png","hash":"31e0829adbe2f6a0b8a4b087a9e78f90b3c87688","modified":1565488795160},{"_id":"source/cxk/images/ball.png","hash":"2cef59fc4918b2c40788aad60188209a3a813394","modified":1565488795165},{"_id":"source/cxk/images/paddle2_1.png","hash":"da53eee4dd6526e8ebea4b99838631e31de74dfd","modified":1565488795166},{"_id":"source/cxk/images/paddle3_2.png","hash":"e8a65742487e59e3812862e95b5c0a30ca9704d0","modified":1565488795168},{"_id":"source/cxk/images/paddle2_2.png","hash":"25c598c4a1e07bfd8ec872d4b55e082f17b16c35","modified":1565488795167},{"_id":"source/cxk/images/paddle3_1.png","hash":"0d8b44ca91b1cd0a91bf4de8bfee3689a009bad7","modified":1565488795168},{"_id":"source/cxk/css/style.css","hash":"33df796375036e535897c7b7966932489128be27","modified":1565488795159},{"_id":"source/cxk/images/paddle_1.png","hash":"57b9d4501e77dabf412607248624f48e8946788c","modified":1565488795168},{"_id":"source/cxk/images/paddle_2.png","hash":"6dc1d8cfe12a806b952b99410d598ec6ee3336bd","modified":1565488795169},{"_id":"source/cxk/js/bootstrap.min.js","hash":"8fb8a9319055253d085edfc3bb72d20f614ec709","modified":1565488795171},{"_id":"source/cxk/js/common.js","hash":"ea99c71c053046817050fc9b39c924f7e0675990","modified":1565488795171},{"_id":"source/cxk/js/game.js","hash":"4f3e445da42b6592a737ba5d5ccee03894229677","modified":1565488795172},{"_id":"source/cxk/js/main.js","hash":"00b85c463e18309062e2b7b428fa69de025a696e","modified":1565488795174},{"_id":"source/cxk/js/scene.js","hash":"caeb723fbe7489ebed25ee36fd70c23b63a168d5","modified":1565488795175},{"_id":"source/resume/css/style.css","hash":"0c909483bc2c963352a2fffec03c0b29bac813bc","modified":1565488795177},{"_id":"source/resume/font/frankfurter-plain.ttf","hash":"df6e77b6a41193f7815c9bb453c558ed33bb1a3b","modified":1565488795178},{"_id":"source/cxk/js/hm.js","hash":"0696d8f91ba8bf65e7c4a59f422e2001711f51a6","modified":1565488795172},{"_id":"source/resume/font/lobster-1.4.ttf","hash":"c4198bdf9862c57b0eff827f7805ff183221a8ed","modified":1565488795179},{"_id":"source/resume/font/poster-sans-bold.ttf","hash":"a8566784062224aae8f2bf0e9d5ce9b86445e92d","modified":1565488795181},{"_id":"source/resume/image/1615.png","hash":"0db72fe722fd2a7e119f7957c3c002dd8345bc35","modified":1565488795182},{"_id":"source/resume/image/algae-b.png","hash":"7fdc1df951c4504e40257d37ec23638000f46dba","modified":1565488795183},{"_id":"source/resume/font/lobster-1.4.woff","hash":"c4198bdf9862c57b0eff827f7805ff183221a8ed","modified":1565488795180},{"_id":"source/resume/image/alien-body.png","hash":"45dae34b745d9d1c0594870327deed50296b65fa","modified":1565488795183},{"_id":"source/resume/image/algae-a.png","hash":"eab129cfa434bd4b0c0976bd175adcf9e9a6f98a","modified":1565488795183},{"_id":"source/resume/image/alien-ship.png","hash":"3eddbbb28d9eae5f31de7976a48e150d6d535a96","modified":1565488795184},{"_id":"source/resume/image/balloon.png","hash":"cc4de5769d6c496c1979b4da4c41e0c19ae44f91","modified":1565488795185},{"_id":"source/resume/image/banner-bottom-a.png","hash":"a69574467cf3d8883f2466c14a2aec64e1ecba17","modified":1565488795186},{"_id":"source/resume/image/alien-steer.png","hash":"6bdd43e597fb27b4ef5e155ebff37245d1ffb13f","modified":1565488795184},{"_id":"source/resume/image/banner-button.png","hash":"5f608b573d4a74ed01d191da5d5c88e144a4b74b","modified":1565488795186},{"_id":"source/resume/image/banner-bottom-b.png","hash":"eda855fa282ec0e1003dc49de09a40e961c0e3de","modified":1565488795186},{"_id":"source/resume/image/banner-top-b.png","hash":"30fdd6fbb3cf22307ffb54688bb5692f45663fa4","modified":1565488795187},{"_id":"source/resume/image/banner-top-a.png","hash":"690374672464ec35793ca6f6b3aee5c1a2448048","modified":1565488795187},{"_id":"source/resume/image/bubble.png","hash":"4f959adc251f1c9c511886e40d92c16ef5a7472d","modified":1565488795188},{"_id":"source/resume/image/building-a-leg-frame.png","hash":"9372537b6b87a51e5bd6d988447316faadffbf14","modified":1565488795189},{"_id":"source/resume/image/box.png","hash":"a6ef80b6b9f28da0f85eee548ac9b1d1a491a5d0","modified":1565488795188},{"_id":"source/resume/image/building-b-leg-frame.png","hash":"41bbafb73481ec0a68d74e5a12c142024e6e3833","modified":1565488795189},{"_id":"source/resume/image/building-a.png","hash":"710aeccac9a20024dad992b788daf34d0ae63efd","modified":1565488795189},{"_id":"source/resume/image/building-b.png","hash":"c8977ac426de3abb70a3a00edcbc675c71539516","modified":1565488795190},{"_id":"source/resume/image/chain-block-string.png","hash":"20ff7ddfaccd1344698bedf8a1315901ff6d33f3","modified":1565488795191},{"_id":"source/resume/image/contact-box-hole-a.png","hash":"a94bd1590067cfd228657d8e7ff60271bbd9b49d","modified":1565488795192},{"_id":"source/resume/image/building-c.png","hash":"2e4f30c19dc37443d94ea0533d15e9e770b44374","modified":1565488795190},{"_id":"source/resume/image/contact-box-hole-b.png","hash":"d4e98ff5ee0e665d14a19d5a19cfdb7e9512eb24","modified":1565488795192},{"_id":"source/resume/image/chain-block.png","hash":"25098dcf4b6c90e8b1bc9f3cc74b2e8eb6a16335","modified":1565488795191},{"_id":"source/resume/image/cloud.png","hash":"34ed40ac8747d42085a90529987f4c45a5a3a214","modified":1565488795192},{"_id":"source/resume/image/contact-cloud-bottom.png","hash":"23d17b8dfae463a0bc47bacd2fb9e00bdc6d2db6","modified":1565488795194},{"_id":"source/resume/image/contact-box.png","hash":"cecc7bc5dd827a7d7e147465749677bbdabab91d","modified":1565488795193},{"_id":"source/resume/image/contact-button.png","hash":"38df283a80bda9bacdbb60c27e5293c49af89939","modified":1565488795194},{"_id":"source/resume/image/contact-cloud-top.png","hash":"369225da3b6fed11bde39c7c3d5f33efae771a9d","modified":1565488795194},{"_id":"source/resume/image/coral-a.png","hash":"19815609c8ded973aade53f583ef11b23df613a8","modified":1565488795195},{"_id":"source/resume/image/coral-b.png","hash":"50289f998d5d0de4c5567f2b35137b607ecedca7","modified":1565488795195},{"_id":"source/resume/image/contact-confirmation-triangle.png","hash":"4d12439cf4fc7e64325278a087f3896618b33a54","modified":1565488795195},{"_id":"source/resume/image/coral-big-a.png","hash":"3162776076fd16e67f0f7373da84adab499d29c5","modified":1565488795196},{"_id":"source/resume/image/crane.png","hash":"4a036992fbdb1d243d4a8be302ae4d3b14c08b49","modified":1565488795198},{"_id":"source/resume/image/coral-big-b.png","hash":"757854a4e9c0c8ed1dcbf6bdd9aad6c4ecfa81c5","modified":1565488795196},{"_id":"source/resume/image/crab.png","hash":"bc881218fd2005864b01b805dcdaeff9e8e30ed0","modified":1565488795197},{"_id":"source/resume/image/crab-eyes.png","hash":"2c4a7000ee6866915a649c3d43900903f3afc62b","modified":1565488795197},{"_id":"source/resume/image/dock-floor.png","hash":"2b16808ed821b78247bc107c25c26edfcff0632e","modified":1565488795198},{"_id":"source/resume/image/dock-column.png","hash":"8602087d6eea12c83e3f8633b3170fba5f5a3996","modified":1565488795198},{"_id":"source/resume/image/enemy-face-a-eyes.png","hash":"78d742c639ef4cc5e53e8200d3791a1fb15332be","modified":1565488795199},{"_id":"source/resume/image/enemy-face-b-eyes.png","hash":"c4f20b5c7a921bd4655ff2c214da6ff97c59e0c7","modified":1565488795200},{"_id":"source/resume/image/enemy-face-a.png","hash":"1f77b5ff9bd2a9130bbb7b67c58c23c6d9ad1a0a","modified":1565488795199},{"_id":"source/resume/image/fish-eyes.png","hash":"5f7e6ef026cce761ea9b27154dae1770d5cc4633","modified":1565488795201},{"_id":"source/resume/image/enemy-face-b.png","hash":"0de384105132f46e0c693746b78b6edf36fdc708","modified":1565488795200},{"_id":"source/resume/image/fish.png","hash":"e617a6ef8f29b85792ace85d7b9086953ccbd699","modified":1565488795201},{"_id":"source/resume/image/floor.png","hash":"f933073233a1d5c69070860f904d8a7420ae7c40","modified":1565488795201},{"_id":"source/resume/image/grass.png","hash":"f4fc5dd656d58ae9f5989481205a0bc3f32c7b0d","modified":1565488795202},{"_id":"source/resume/image/gate.png","hash":"535b07eb62848e806992280d45bd1ae987716bfc","modified":1565488795202},{"_id":"source/resume/image/hangar-window.png","hash":"666adf9cb51bd728e6db8934842776e2b35ba107","modified":1565488795203},{"_id":"source/resume/image/mountain.png","hash":"5ef2e08a90a10d75a3f172b47626fdbde4741c2a","modified":1565488795204},{"_id":"source/resume/image/nba-board-red.png","hash":"ecbe831ced82d42bd67bad83c5a0c578ceb7f99a","modified":1565488795205},{"_id":"source/resume/image/nba-ball.png","hash":"5d8cddcaf2ea94cfdac65673d9deaf21759ce353","modified":1565488795204},{"_id":"source/resume/image/ground.png","hash":"88f0b49d8b87785922022962df1a1acebf7bfa03","modified":1565488795203},{"_id":"source/resume/image/nba-board-blue.png","hash":"b493399b394aaa5c575b510dc6f804532577c735","modified":1565488795204},{"_id":"source/resume/image/nba-player.png","hash":"c20049d7bc3379c34cbb43bf8ef3c6fad149cac7","modified":1565488795206},{"_id":"source/resume/image/panel.png","hash":"b242ad8e2b7c926193dfff5c7700904d84afa800","modified":1565488795207},{"_id":"source/resume/image/piechart-foxnews-front.png","hash":"3775efbd318ce263de0deaa07ef294f089afffd2","modified":1565488795208},{"_id":"source/resume/image/nba-rim.png","hash":"8235aebc69f9d7107353ed308fb2dd65fe40b907","modified":1565488795206},{"_id":"source/resume/image/plant-ribbon-right.png","hash":"31f15e8280303cf3d887d3b8b51f994026a0bfc7","modified":1565488795209},{"_id":"source/resume/image/piechart-back.png","hash":"88d822212530e64c49540074fe8ce102ce4dc58b","modified":1565488795208},{"_id":"source/resume/image/plant-ribbon-left.png","hash":"e898b1efa12434a9db5ece6120f78b4730e45857","modified":1565488795209},{"_id":"source/resume/image/plant-head-leaves.png","hash":"ab8a2af3d64e729f2fb7a4f14878b573ae92d11d","modified":1565488795209},{"_id":"source/resume/image/preloader-banner-right.png","hash":"f47ff58b8f3396962c2860255a7b4583230a58a1","modified":1565488795210},{"_id":"source/resume/image/preloader-dots-static.png","hash":"50e27135bbcc5f17c16dd2c5d5891b3dbb4392df","modified":1565488795211},{"_id":"source/resume/image/ribbon-left.png","hash":"54dd5d67dd8a4504110bdebbdbf8ab71aa50a2f0","modified":1565488795212},{"_id":"source/resume/image/preloader-banner-left.png","hash":"24e81989c3d255b386b0267ed3e810b0cce19e00","modified":1565488795210},{"_id":"source/resume/image/ribbon-right.png","hash":"bc1a3a8e92ed521082837c661200ede17f3d21b3","modified":1565488795213},{"_id":"source/resume/image/qzone.png","hash":"d9b84c82ca5c5a37485b8bab1020714087b55551","modified":1565488795212},{"_id":"source/resume/image/preloader-dots-animation.gif","hash":"6f59502c319976e39abf54855b704e0fe6e04782","modified":1565488795211},{"_id":"source/resume/image/robby-eyes-close.png","hash":"f0ffa8c26e45b30177793414d6979149c187adf7","modified":1565488795213},{"_id":"source/resume/image/robot-hand-c.png","hash":"90ed980f76ebfa7cf5efcb5625ed44179420ed7a","modified":1565488795216},{"_id":"source/resume/image/robby-slides.png","hash":"2eaac62cdf1883c148ce5fef0961d06673ada3b2","modified":1565488795214},{"_id":"source/resume/image/robot-body.png","hash":"a397cad86feac6356f82b7646e107608ae241e6f","modified":1565488795214},{"_id":"source/resume/image/robot-hand-a.png","hash":"662f669947ffaccf826b81069b3b23126c14725d","modified":1565488795215},{"_id":"source/resume/image/sea-ribbon-left.png","hash":"54b53bbe6a07f3f589faecc3222513c06bd54f20","modified":1565488795216},{"_id":"source/resume/image/robot-hand-b.png","hash":"3d91f6fba54f42599b0e8f531da1293ea7aac2fa","modified":1565488795215},{"_id":"source/resume/image/sea-wave.png","hash":"c5465916189bffc1d5db39cfcedc376e0d332a22","modified":1565488795218},{"_id":"source/resume/image/social-bottom.png","hash":"73246aac2a50990b7844791a72e357e0cf014ba8","modified":1565488795218},{"_id":"source/resume/image/sea-ribbon-right.png","hash":"0d89269f93062ca810a77191c7a160958e41967b","modified":1565488795217},{"_id":"source/resume/image/robot-hand-d.png","hash":"1cb83555812a44bfb38ff5e77f1be48bbacd63c9","modified":1565488795216},{"_id":"source/resume/image/social-top.png","hash":"f093bae808f08443b3e8314e106e36b6d6086300","modified":1565488795219},{"_id":"source/resume/image/social-facebook.png","hash":"1a10170118d3a375545522de0ec521edd41baac9","modified":1565488795219},{"_id":"source/resume/image/squid-hand-close-a.png","hash":"9e901a4a28bcce6f7ef1d00eae27c9e92a5f3f2d","modified":1565488795221},{"_id":"source/resume/image/social-twitter.png","hash":"66f7947da24c28bdb02870fb8025d37a5013f516","modified":1565488795220},{"_id":"source/resume/image/squid-body.png","hash":"e3779a9ba18110cfbf8253dcc43b03bf029c758a","modified":1565488795220},{"_id":"source/resume/image/squid-hand-close-c.png","hash":"f22f57fa4fa1fd081c9d441b09a26bc8024d00f7","modified":1565488795222},{"_id":"source/resume/image/squid-hand-close-d.png","hash":"c5adcd89c78fce9370c4600ed1d539ad82cc3bed","modified":1565488795222},{"_id":"source/resume/image/squid-hand-close-b.png","hash":"deb680edf2994289b947f5fd11016133dc99aa14","modified":1565488795221},{"_id":"source/resume/image/squid-hand-open-a.png","hash":"485d9e71bf0f34e11d6236d3a5475c10566344ba","modified":1565488795223},{"_id":"source/resume/image/squid-hand-open-c.png","hash":"bede9c2edddc57b1a2b893b0d26d03f7474eec78","modified":1565488795224},{"_id":"source/resume/image/squid-hand-open-d.png","hash":"41c96e61a7e249c58f70e107e2581342259fd1cb","modified":1565488795224},{"_id":"source/resume/image/title-about.png","hash":"9bf5263ebfe10be1bb8634193d09ef33455da1ac","modified":1565488795225},{"_id":"source/resume/image/squid-hand-open-b.png","hash":"31b4459d7d34ce48b6447dda90d72cf6d1f08548","modified":1565488795223},{"_id":"source/resume/image/title-experience.png","hash":"f4d9097d10c6c54737bbad7113abde396fc693e4","modified":1565488795226},{"_id":"source/resume/image/title-publication.png","hash":"25f433e704d20ba364da9fbc8f0d13257463cd58","modified":1565488795227},{"_id":"source/resume/image/title-contact.png","hash":"79fc58202e07507e3a13f79a2f5cae1e426218e1","modified":1565488795225},{"_id":"source/resume/image/tree-bright-a.png","hash":"50f0c3290ad44674f58657df6a0a94c9392c22e1","modified":1565488795228},{"_id":"source/resume/image/title-robby.png","hash":"11286badda83f2a51b63c5124f8eab5012089f4d","modified":1565488795227},{"_id":"source/resume/image/title-skills.png","hash":"1da8c77846c60bde4e902434e8d44bbc88aee610","modified":1565488795228},{"_id":"source/resume/image/tree-bright-b.png","hash":"333d70764bfef1ecbd8276b2e68047b8abe40412","modified":1565488795229},{"_id":"source/resume/image/tree-bright-e.png","hash":"20eb17f9e8b1920a8f5469fbb705fe1c4fd7b8ea","modified":1565488795230},{"_id":"source/resume/image/tree-dark-a.png","hash":"61da21f90ae1ad2f3278f15b831e9813f5b66fd8","modified":1565488795230},{"_id":"source/resume/image/tree-dark-b.png","hash":"c056cbdb01a5ccc8f4cabf66de08f4498daf3b0c","modified":1565488795231},{"_id":"source/resume/image/tree-bright-d.png","hash":"8c9d731952a4f94329f00942a63f5d1aaaaeb0cd","modified":1565488795229},{"_id":"source/resume/image/tsina.png","hash":"16ffe7cb7273782be6228e77d363f3c5dceef449","modified":1565488795233},{"_id":"source/resume/image/turtle-eyes.png","hash":"1ac1b5af43f1d98fbaf58a4b3a5ab3e64eef19f5","modified":1565488795233},{"_id":"source/resume/image/tree-dark-d.png","hash":"f77ac56b8b93e25844537be7e066e5d4705844d3","modified":1565488795232},{"_id":"source/resume/image/tree-dark-c.png","hash":"6a0daf71169bb9ff9684c3887c823386766f0ded","modified":1565488795232},{"_id":"source/resume/image/waterfall-a.png","hash":"9f60bc0af589a14761bcb1ecb7169363cd652536","modified":1565488795234},{"_id":"source/resume/image/turtle.png","hash":"02794c602934cbc80d568598c50ae9aae4c9fb32","modified":1565488795233},{"_id":"source/resume/script/container-transparent-or-displaynone.js","hash":"742ded8b75ec6d5ec881090dc2d45281ceb89e94","modified":1565488795246},{"_id":"source/resume/image/waterfall-b.png","hash":"7d192b8f3043ef776ae33abc4b448aa00dc606f3","modified":1565488795235},{"_id":"source/resume/script/ga.js","hash":"b9481f67f004ed6a4804d522f428a8430ece3ffb","modified":1565488795248},{"_id":"source/resume/script/analytics.js","hash":"084a6f314232d1e73ad2e452460ee50a26da1c80","modified":1565488795246},{"_id":"source/resume/script/email.js","hash":"25d55f8100a4b6db60e23b34ab63e44c4c8c2291","modified":1565488795247},{"_id":"source/resume/script/detect-browser-device.js","hash":"b90694e7ec54c84e9582c13acf3fdbd4755a7bb1","modified":1565488795247},{"_id":"source/resume/script/preloader-transparent-or-displaynone.js","hash":"3185b31715a02c11eb3ecf6dacde6368c0eaa5f6","modified":1565488795252},{"_id":"source/resume/script/preloader.js","hash":"a77fbaafc722056ea5732799b548b309d89a3e86","modified":1565488795253},{"_id":"source/resume/script/jquery-ui-1.10.2.custom.min.js","hash":"f01e7d956719b2f7bced39d233ed4c010221ee3b","modified":1565488795250},{"_id":"themes/hexo-theme-antiquity/layout/_widget/archive.ejs","hash":"3ab9d5a3311db804739b9c34b2694e1cc70a35cc","modified":1565498453993},{"_id":"themes/hexo-theme-antiquity/layout/_widget/category.ejs","hash":"9eafb56b5c4c5ae4681ab6b987d7134fade90b00","modified":1565498417349},{"_id":"themes/hexo-theme-antiquity/layout/_widget/recent_posts.ejs","hash":"2c61403ed0fb7fa49a5e62486591a91429531c9f","modified":1565498450618},{"_id":"themes/hexo-theme-antiquity/layout/_widget/blogroll.ejs","hash":"42510f57e4bb722630795593514d49db2c1c30ef","modified":1565490572946},{"_id":"themes/hexo-theme-antiquity/layout/_widget/tag.ejs","hash":"326d44ac048f2b438713f8f57e18ce80a5a0793e","modified":1565498370305},{"_id":"themes/hexo-theme-antiquity/layout/_partial/after-footer.ejs","hash":"fc1fa63521ef8337d2474c6739a01f1460ecdb51","modified":1565495041628},{"_id":"themes/hexo-theme-antiquity/layout/_widget/tagcloud.ejs","hash":"adf943938f114227dc321de222fb1361127ba793","modified":1565498391192},{"_id":"themes/hexo-theme-antiquity/layout/_partial/archive-post.ejs","hash":"40dbe5a948cd5fab2c2b175b936f05a840433225","modified":1565498017295},{"_id":"themes/hexo-theme-antiquity/layout/_widget/userinfo.ejs","hash":"e8cf78797f890e67200acf8a156ed6c2973b9c02","modified":1565500284085},{"_id":"themes/hexo-theme-antiquity/layout/_partial/article.ejs","hash":"98294ba4fcc066d9b16f15e24418fc362cf0b4de","modified":1565497927447},{"_id":"themes/hexo-theme-antiquity/layout/_partial/footer.ejs","hash":"1c9bb3cb4a61bb8af681c3e4f246a3b3450cacc4","modified":1565493322994},{"_id":"themes/hexo-theme-antiquity/layout/_partial/gitment.ejs","hash":"09643c313d5db798852993a74af0a0583074d979","modified":1565496585177},{"_id":"themes/hexo-theme-antiquity/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1565490572520},{"_id":"themes/hexo-theme-antiquity/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1565490572576},{"_id":"themes/hexo-theme-antiquity/layout/_partial/header.ejs","hash":"f8d7536ff801b9a8131430d1b13b1e507ba2bdd6","modified":1565492647973},{"_id":"themes/hexo-theme-antiquity/layout/_partial/archive.ejs","hash":"4a30ee4a86fa62d7ec7882d7aaf77324204c7e5e","modified":1565499096749},{"_id":"themes/hexo-theme-antiquity/layout/_partial/mobile-nav.ejs","hash":"9bdd2ebf36b58515753d6cf333c512afadccf6c5","modified":1565490572692},{"_id":"themes/hexo-theme-antiquity/layout/_partial/sidebar.ejs","hash":"99e2b2b2889b31260d717018d5b47bed766af874","modified":1565498256045},{"_id":"themes/hexo-theme-antiquity/layout/_partial/head.ejs","hash":"03dd5426e82dab6362dcc04cda15bd426e7b93a8","modified":1565497755129},{"_id":"themes/hexo-theme-antiquity/source/css/highlight.css","hash":"358c8414fbc5eafa50fddfb67dbd6159d54e40ec","modified":1565490573240},{"_id":"themes/hexo-theme-antiquity/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1565490573293},{"_id":"themes/hexo-theme-antiquity/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1565490573340},{"_id":"themes/hexo-theme-antiquity/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1565490573362},{"_id":"themes/hexo-theme-antiquity/source/css/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1565490573209},{"_id":"themes/hexo-theme-antiquity/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1565490573425},{"_id":"themes/hexo-theme-antiquity/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1565490573447},{"_id":"themes/hexo-theme-antiquity/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1565490573478},{"_id":"themes/hexo-theme-antiquity/source/css/style.css","hash":"7321eed39088431c646c06a14e0f16df9d6f051c","modified":1565498524579},{"_id":"themes/hexo-theme-antiquity/source/images/.DS_Store","hash":"5431738d0c753c190549005feaeb87b6da96566d","modified":1565490573779},{"_id":"themes/hexo-theme-antiquity/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1565490573525},{"_id":"themes/hexo-theme-antiquity/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1565490573393},{"_id":"themes/hexo-theme-antiquity/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1565490573578},{"_id":"themes/hexo-theme-antiquity/source/js/love.js","hash":"6583037545c7edc355f76f29b3393e250b150032","modified":1565488795055},{"_id":"themes/hexo-theme-antiquity/source/js/script.js","hash":"d9d547c97faa5a78fedc1e034b554b79eea35db0","modified":1565490574142},{"_id":"themes/hexo-theme-antiquity/source/images/default-avatar.jpg","hash":"19927be11481b179fea886da0ad14aa6a9464788","modified":1565491037278},{"_id":"source/cxk/js/jquery.min.js","hash":"1327f754ff87d26bced46568543207e9df190aaa","modified":1565488795174},{"_id":"source/cxk/css/bootstrap.min.css","hash":"224c9f9ad11b495358aa61dbd53e838e9b61015b","modified":1565488795158},{"_id":"source/cxk/js/showdown.min.js","hash":"9c1eebd6f48db285c02ab51c327b058a9bb85000","modified":1565488795176},{"_id":"source/resume/script/jquery-1.9.1.min.js","hash":"a1ce0bfa507f23cc414a9a7634bd73b994bb3b35","modified":1565488795249},{"_id":"source/resume/script/main.js","hash":"7269c755909d63d81433c4cbde255201ce81f301","modified":1565488795252},{"_id":"themes/hexo-theme-antiquity/source/js/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1565490574111},{"_id":"source/Tap/shared/js/common-2.min.js","hash":"e059c09b6ce0a759f041d6fe6af1b1234c2d7fe8","modified":1565488795149},{"_id":"themes/hexo-theme-antiquity/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1565490572761},{"_id":"themes/hexo-theme-antiquity/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1565490572776},{"_id":"themes/hexo-theme-antiquity/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1565490572808},{"_id":"themes/hexo-theme-antiquity/layout/_partial/post/nav.ejs","hash":"f6a2469d60b76884fa572e0eb58a99c35e6d00b8","modified":1565490572846},{"_id":"themes/hexo-theme-antiquity/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1565490572892},{"_id":"themes/hexo-theme-antiquity/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1565490573625},{"_id":"source/Tap/shared/css/common-1.css","hash":"4ac9665f38b21a0a602db50b6658b79b3e6e89f5","modified":1565488795148},{"_id":"themes/hexo-theme-antiquity/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1565490572877},{"_id":"source/Tap/shared/css/index-1.css","hash":"9ac57fe34320e7bc331d75c9d957ee43ecad9577","modified":1565488795148},{"_id":"themes/hexo-theme-antiquity/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1565490573594},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_cloud.png","hash":"df67b83b62174a2965628d81abe9b8a5c4a89728","modified":1565490573879},{"_id":"themes/hexo-theme-antiquity/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1565490573647},{"_id":"themes/hexo-theme-antiquity/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1565490573694},{"_id":"themes/hexo-theme-antiquity/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1565490573748},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_doorframe.png","hash":"f5cbaefd062abc90337148e0e593949e0b1d6b2a","modified":1565490573895},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_tag.png","hash":"25e3e0f37f0a86cf06463063e0f5381442d1a72a","modified":1565490573964},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_patterns.png","hash":"9345361fe1c631c74022759189bc44aa4a7053df","modified":1565490573948},{"_id":"themes/hexo-theme-antiquity/source/js/gitment.js","hash":"adb5caaee25c4a86ccb738d23f340b1da11e54fd","modified":1565488795053},{"_id":"themes/hexo-theme-antiquity/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1565490573710},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_pattern_bottom.png","hash":"ff30fbc4ee81471ff3e44c2a8e15ba121e995f78","modified":1565490573926},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_texture.png","hash":"874074999995e6981d7602a7d5a770043a10b932","modified":1565490573995},{"_id":"source/Tap/data/track/track.json","hash":"28af7e2caa4c47c03ea97b143374a8811e27f13f","modified":1565488795145},{"_id":"themes/hexo-theme-antiquity/source/images/icons/css_window_frame.png","hash":"7f985fc949cbecaf12982327d4b14e684bc2b205","modified":1565490574011},{"_id":"themes/hexo-theme-antiquity/source/images/icons/.DS_Store","hash":"abc4ebcfd8325a4225fd09ad358633f7d5adcac4","modified":1565490573848},{"_id":"source/Tap/shared/sp/css/common.css","hash":"d98a135ddec32463ee76eb88e51822114a4d28b4","modified":1565488795150},{"_id":"source/Tap/data/main/main.json","hash":"292a347cc6e3dab1e9430e2016d90c9ca67a47b2","modified":1565488795143},{"_id":"source/cxk/images/background.jpg","hash":"5c058fad95c06d7df554f0569474f9fffc862d0b","modified":1565488795165},{"_id":"themes/hexo-theme-antiquity/source/images/bg.jpg","hash":"5c058fad95c06d7df554f0569474f9fffc862d0b","modified":1565491037257},{"_id":"source/resume/mario.mp3","hash":"5e7315f3a349be100384fe53ab2281b32bc38a97","modified":1565488795244},{"_id":"public/categories/index.html","hash":"a9fc80dcee3eb4afc1bb81efa2e9303ea7b2a20a","modified":1565513979053},{"_id":"public/tags/index.html","hash":"2cab7cd9e23bad4af7750aba80d89bb3fec33bab","modified":1565513979053},{"_id":"public/2019/08/11/reflux/index.html","hash":"7968b2b7b21eb734ef24e58e50e8b259c3d215f0","modified":1565513739281},{"_id":"public/2019/08/11/interview/index.html","hash":"fd8e7bff283c3c5edb642eabaa75d969c5e63b70","modified":1565513739281},{"_id":"public/archives/page/2/index.html","hash":"6133f591a63160b62e91ec47d31b98eec0718b89","modified":1565513979218},{"_id":"public/archives/2019/page/2/index.html","hash":"64cbae4d2880d29570a3527126bf19322051f2db","modified":1565513979221},{"_id":"public/archives/2019/08/page/2/index.html","hash":"a596c34d5ae09962a93c6f107a7c1501459ceac4","modified":1565513739282},{"_id":"public/categories/面试/index.html","hash":"61bcf2017971c9c5cb3fd000683cb90b5905e682","modified":1565513979222},{"_id":"public/tags/js/index.html","hash":"15ae400b74f2032d33ffd5724e9f16e909d75f39","modified":1565513979222},{"_id":"public/tags/react/index.html","hash":"67cecbeb8e58b000f89d6e53c2425f5fe214c78e","modified":1565513979222},{"_id":"public/tags/css/index.html","hash":"04b298dadae5096677b2a6a553b13dcd2f22847b","modified":1565513979222},{"_id":"public/tags/browser/index.html","hash":"b954b7d441565cd7164152eed43bba5dadc5e4bd","modified":1565513979222},{"_id":"public/tags/git/index.html","hash":"006c50b76a617a10945ac1761b84607b7e63d715","modified":1565513979222},{"_id":"public/tags/vue/index.html","hash":"c4dc9fe51c35785d00e86b4c539b6f3f6c92d5e0","modified":1565513979223},{"_id":"public/index.html","hash":"0ce0b16737cf585e8934f426b012d4c5365346ef","modified":1565513979224},{"_id":"public/page/2/index.html","hash":"f13288d76a1be7d46b4019099f15775fd1af3089","modified":1565513979222},{"_id":"public/page/4/index.html","hash":"ef449090185eb6dcf66e63b9979dba2d1e26733c","modified":1565513979222},{"_id":"public/2019/08/11/vue-shake/index.html","hash":"662715c0dd896969af10f167ddad0aa4820437af","modified":1565513739283},{"_id":"public/2019/08/11/vue-interview/index.html","hash":"6e490dd52a57a67e840d6ef72526589628937322","modified":1565513739283},{"_id":"public/2019/08/11/javascript/index.html","hash":"e68ba5c61109267c5f25f01b69acbcc5fc39b107","modified":1565513739283},{"_id":"public/2019/08/11/git-operating/index.html","hash":"fced606d0ac1a6065bcf4e159e1b06c165a52540","modified":1565513739283},{"_id":"public/2019/08/11/for/index.html","hash":"2e0ba44bf501a143ba47b6919ae388994746d2fb","modified":1565513739283},{"_id":"public/2019/08/11/clip-path/index.html","hash":"ca28ed3f9b261e5f7d21f2c1a096534bf03db47c","modified":1565513739283},{"_id":"public/2019/08/11/electron-packager/index.html","hash":"95cc33baa8c883848fe784a0713dca7e4a595a6d","modified":1565513739284},{"_id":"public/2019/08/11/async-await/index.html","hash":"6086c9863d27bde61f6808c83ee85ce8cad1d827","modified":1565513739284},{"_id":"public/2019/08/11/array/index.html","hash":"7cecd38378588a6da0ed9003e57d6e32b79fccc0","modified":1565513979223},{"_id":"public/2019/08/11/CodecheckList/index.html","hash":"d893fd56fd56392f084f56e38d49e16ce40b09cb","modified":1565513739284},{"_id":"public/archives/index.html","hash":"234bdf9d144b08b172e6da23506356437504ce61","modified":1565513979223},{"_id":"public/archives/2019/index.html","hash":"70da47791b4295604a97a33ec723944d5ea5a2c2","modified":1565513979224},{"_id":"public/archives/2019/08/index.html","hash":"9704269b8fc0226254da4c0f0978b51735bb0ec6","modified":1565513979221},{"_id":"public/categories/技术/index.html","hash":"cdfea90a3dfd7f6fe6b2b0fc0f503c9715663afe","modified":1565513979224},{"_id":"public/page/3/index.html","hash":"3fe5bcbe6d51974802e455b5e38e9bf215b0d33e","modified":1565513979222},{"_id":"public/archives/2018/index.html","hash":"fed56820add96533ef8a1003c818b7f3ee6ba0a4","modified":1565513979218},{"_id":"public/archives/2018/04/index.html","hash":"0261342625b61d2692a69b57bf78c026ac171cff","modified":1565513739308},{"_id":"public/2018/04/05/vue-router/index.html","hash":"e2dccb6b19ae2377ee070489ef5f3cb15eef1b2b","modified":1565513739308},{"_id":"public/resume/image/title-awards-and.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565513739308},{"_id":"public/CNAME","hash":"4b0c3909cf8403090d39d3e2f14165725901242d","modified":1565513739350},{"_id":"public/README.md","hash":"6be4e8b2de059f5b3b8fd2e9962061d4f85e54e1","modified":1565513739350},{"_id":"public/Tap/index.html","hash":"a5ac73b91ab874557126683306a7b91776715b9d","modified":1565513739350},{"_id":"public/Tap/icon.png","hash":"d03c72c04dbf6d925524b50ad9042cc84c4624fe","modified":1565513739350},{"_id":"public/cxk/index.html","hash":"d8ff10756da8e493aef38d8a4beb926124f17554","modified":1565513739350},{"_id":"public/resume/index.html","hash":"21fc055b5840ff56e43d6386519e60968f4c3250","modified":1565513739350},{"_id":"public/Tap/css/mikutap.css","hash":"a40ab49b02412f818c7cc04767b432bb9964f226","modified":1565513739350},{"_id":"public/cxk/images/b1.png","hash":"17958f04c56ad84fcbbebf6725d7ce6177924bd9","modified":1565513739351},{"_id":"public/Tap/js/mikutap.min.js","hash":"e6b65b3ebca6729657ddd272932b76daa395005d","modified":1565513739351},{"_id":"public/cxk/images/ballshadow.png","hash":"0b6571f53c58a5a3ed01ed438a0f15f14a981ac5","modified":1565513739351},{"_id":"public/cxk/images/b2.png","hash":"31e0829adbe2f6a0b8a4b087a9e78f90b3c87688","modified":1565513739351},{"_id":"public/cxk/images/ball.png","hash":"2cef59fc4918b2c40788aad60188209a3a813394","modified":1565513739351},{"_id":"public/cxk/images/paddle2_1.png","hash":"da53eee4dd6526e8ebea4b99838631e31de74dfd","modified":1565513739352},{"_id":"public/cxk/images/paddle3_2.png","hash":"e8a65742487e59e3812862e95b5c0a30ca9704d0","modified":1565513739352},{"_id":"public/cxk/images/paddle2_2.png","hash":"25c598c4a1e07bfd8ec872d4b55e082f17b16c35","modified":1565513739352},{"_id":"public/cxk/css/style.css","hash":"33df796375036e535897c7b7966932489128be27","modified":1565513739352},{"_id":"public/cxk/images/paddle3_1.png","hash":"0d8b44ca91b1cd0a91bf4de8bfee3689a009bad7","modified":1565513739352},{"_id":"public/cxk/images/paddle_1.png","hash":"57b9d4501e77dabf412607248624f48e8946788c","modified":1565513739353},{"_id":"public/cxk/images/paddle_2.png","hash":"6dc1d8cfe12a806b952b99410d598ec6ee3336bd","modified":1565513739353},{"_id":"public/cxk/js/bootstrap.min.js","hash":"8fb8a9319055253d085edfc3bb72d20f614ec709","modified":1565513739353},{"_id":"public/cxk/js/common.js","hash":"ea99c71c053046817050fc9b39c924f7e0675990","modified":1565513739353},{"_id":"public/cxk/js/game.js","hash":"4f3e445da42b6592a737ba5d5ccee03894229677","modified":1565513739353},{"_id":"public/cxk/js/main.js","hash":"00b85c463e18309062e2b7b428fa69de025a696e","modified":1565513739353},{"_id":"public/cxk/js/scene.js","hash":"caeb723fbe7489ebed25ee36fd70c23b63a168d5","modified":1565513739353},{"_id":"public/resume/css/style.css","hash":"0c909483bc2c963352a2fffec03c0b29bac813bc","modified":1565513739355},{"_id":"public/resume/font/frankfurter-plain.ttf","hash":"df6e77b6a41193f7815c9bb453c558ed33bb1a3b","modified":1565513739355},{"_id":"public/resume/font/lobster-1.4.ttf","hash":"c4198bdf9862c57b0eff827f7805ff183221a8ed","modified":1565513739355},{"_id":"public/cxk/js/hm.js","hash":"0696d8f91ba8bf65e7c4a59f422e2001711f51a6","modified":1565513739355},{"_id":"public/resume/font/poster-sans-bold.ttf","hash":"a8566784062224aae8f2bf0e9d5ce9b86445e92d","modified":1565513739355},{"_id":"public/resume/image/1615.png","hash":"0db72fe722fd2a7e119f7957c3c002dd8345bc35","modified":1565513739356},{"_id":"public/resume/image/algae-b.png","hash":"7fdc1df951c4504e40257d37ec23638000f46dba","modified":1565513739356},{"_id":"public/resume/font/lobster-1.4.woff","hash":"c4198bdf9862c57b0eff827f7805ff183221a8ed","modified":1565513739356},{"_id":"public/resume/image/alien-body.png","hash":"45dae34b745d9d1c0594870327deed50296b65fa","modified":1565513739356},{"_id":"public/resume/image/algae-a.png","hash":"eab129cfa434bd4b0c0976bd175adcf9e9a6f98a","modified":1565513739356},{"_id":"public/resume/image/alien-ship.png","hash":"3eddbbb28d9eae5f31de7976a48e150d6d535a96","modified":1565513739356},{"_id":"public/resume/image/balloon.png","hash":"cc4de5769d6c496c1979b4da4c41e0c19ae44f91","modified":1565513739356},{"_id":"public/resume/image/banner-bottom-a.png","hash":"a69574467cf3d8883f2466c14a2aec64e1ecba17","modified":1565513739357},{"_id":"public/resume/image/alien-steer.png","hash":"6bdd43e597fb27b4ef5e155ebff37245d1ffb13f","modified":1565513739357},{"_id":"public/resume/image/banner-button.png","hash":"5f608b573d4a74ed01d191da5d5c88e144a4b74b","modified":1565513739357},{"_id":"public/resume/image/banner-bottom-b.png","hash":"eda855fa282ec0e1003dc49de09a40e961c0e3de","modified":1565513739357},{"_id":"public/resume/image/banner-top-b.png","hash":"30fdd6fbb3cf22307ffb54688bb5692f45663fa4","modified":1565513739357},{"_id":"public/resume/image/banner-top-a.png","hash":"690374672464ec35793ca6f6b3aee5c1a2448048","modified":1565513739357},{"_id":"public/resume/image/bubble.png","hash":"4f959adc251f1c9c511886e40d92c16ef5a7472d","modified":1565513739357},{"_id":"public/resume/image/building-a-leg-frame.png","hash":"9372537b6b87a51e5bd6d988447316faadffbf14","modified":1565513739357},{"_id":"public/resume/image/box.png","hash":"a6ef80b6b9f28da0f85eee548ac9b1d1a491a5d0","modified":1565513739357},{"_id":"public/resume/image/building-b-leg-frame.png","hash":"41bbafb73481ec0a68d74e5a12c142024e6e3833","modified":1565513739358},{"_id":"public/resume/image/building-a.png","hash":"710aeccac9a20024dad992b788daf34d0ae63efd","modified":1565513739358},{"_id":"public/resume/image/building-b.png","hash":"c8977ac426de3abb70a3a00edcbc675c71539516","modified":1565513739358},{"_id":"public/resume/image/chain-block-string.png","hash":"20ff7ddfaccd1344698bedf8a1315901ff6d33f3","modified":1565513739359},{"_id":"public/resume/image/contact-box-hole-a.png","hash":"a94bd1590067cfd228657d8e7ff60271bbd9b49d","modified":1565513739359},{"_id":"public/resume/image/building-c.png","hash":"2e4f30c19dc37443d94ea0533d15e9e770b44374","modified":1565513739359},{"_id":"public/resume/image/contact-box-hole-b.png","hash":"d4e98ff5ee0e665d14a19d5a19cfdb7e9512eb24","modified":1565513739359},{"_id":"public/resume/image/chain-block.png","hash":"25098dcf4b6c90e8b1bc9f3cc74b2e8eb6a16335","modified":1565513739359},{"_id":"public/resume/image/cloud.png","hash":"34ed40ac8747d42085a90529987f4c45a5a3a214","modified":1565513739359},{"_id":"public/resume/image/contact-cloud-bottom.png","hash":"23d17b8dfae463a0bc47bacd2fb9e00bdc6d2db6","modified":1565513739359},{"_id":"public/resume/image/contact-box.png","hash":"cecc7bc5dd827a7d7e147465749677bbdabab91d","modified":1565513739359},{"_id":"public/resume/image/contact-button.png","hash":"38df283a80bda9bacdbb60c27e5293c49af89939","modified":1565513739359},{"_id":"public/resume/image/contact-cloud-top.png","hash":"369225da3b6fed11bde39c7c3d5f33efae771a9d","modified":1565513739359},{"_id":"public/resume/image/coral-a.png","hash":"19815609c8ded973aade53f583ef11b23df613a8","modified":1565513739359},{"_id":"public/resume/image/coral-b.png","hash":"50289f998d5d0de4c5567f2b35137b607ecedca7","modified":1565513739360},{"_id":"public/resume/image/contact-confirmation-triangle.png","hash":"4d12439cf4fc7e64325278a087f3896618b33a54","modified":1565513739360},{"_id":"public/resume/image/coral-big-a.png","hash":"3162776076fd16e67f0f7373da84adab499d29c5","modified":1565513739360},{"_id":"public/resume/image/crane.png","hash":"4a036992fbdb1d243d4a8be302ae4d3b14c08b49","modified":1565513739360},{"_id":"public/resume/image/coral-big-b.png","hash":"757854a4e9c0c8ed1dcbf6bdd9aad6c4ecfa81c5","modified":1565513739361},{"_id":"public/resume/image/crab.png","hash":"bc881218fd2005864b01b805dcdaeff9e8e30ed0","modified":1565513739361},{"_id":"public/resume/image/crab-eyes.png","hash":"2c4a7000ee6866915a649c3d43900903f3afc62b","modified":1565513739361},{"_id":"public/resume/image/dock-floor.png","hash":"2b16808ed821b78247bc107c25c26edfcff0632e","modified":1565513739361},{"_id":"public/resume/image/dock-column.png","hash":"8602087d6eea12c83e3f8633b3170fba5f5a3996","modified":1565513739361},{"_id":"public/resume/image/enemy-face-a-eyes.png","hash":"78d742c639ef4cc5e53e8200d3791a1fb15332be","modified":1565513739361},{"_id":"public/resume/image/enemy-face-b-eyes.png","hash":"c4f20b5c7a921bd4655ff2c214da6ff97c59e0c7","modified":1565513739361},{"_id":"public/resume/image/enemy-face-a.png","hash":"1f77b5ff9bd2a9130bbb7b67c58c23c6d9ad1a0a","modified":1565513739361},{"_id":"public/resume/image/fish-eyes.png","hash":"5f7e6ef026cce761ea9b27154dae1770d5cc4633","modified":1565513739361},{"_id":"public/resume/image/enemy-face-b.png","hash":"0de384105132f46e0c693746b78b6edf36fdc708","modified":1565513739361},{"_id":"public/resume/image/fish.png","hash":"e617a6ef8f29b85792ace85d7b9086953ccbd699","modified":1565513739362},{"_id":"public/resume/image/floor.png","hash":"f933073233a1d5c69070860f904d8a7420ae7c40","modified":1565513739362},{"_id":"public/resume/image/grass.png","hash":"f4fc5dd656d58ae9f5989481205a0bc3f32c7b0d","modified":1565513739362},{"_id":"public/resume/image/gate.png","hash":"535b07eb62848e806992280d45bd1ae987716bfc","modified":1565513739362},{"_id":"public/resume/image/hangar-window.png","hash":"666adf9cb51bd728e6db8934842776e2b35ba107","modified":1565513739362},{"_id":"public/resume/image/mountain.png","hash":"5ef2e08a90a10d75a3f172b47626fdbde4741c2a","modified":1565513739362},{"_id":"public/resume/image/nba-board-red.png","hash":"ecbe831ced82d42bd67bad83c5a0c578ceb7f99a","modified":1565513739362},{"_id":"public/resume/image/nba-ball.png","hash":"5d8cddcaf2ea94cfdac65673d9deaf21759ce353","modified":1565513739362},{"_id":"public/resume/image/ground.png","hash":"88f0b49d8b87785922022962df1a1acebf7bfa03","modified":1565513739362},{"_id":"public/resume/image/nba-board-blue.png","hash":"b493399b394aaa5c575b510dc6f804532577c735","modified":1565513739362},{"_id":"public/resume/image/nba-player.png","hash":"c20049d7bc3379c34cbb43bf8ef3c6fad149cac7","modified":1565513739363},{"_id":"public/resume/image/panel.png","hash":"b242ad8e2b7c926193dfff5c7700904d84afa800","modified":1565513739363},{"_id":"public/resume/image/piechart-foxnews-front.png","hash":"3775efbd318ce263de0deaa07ef294f089afffd2","modified":1565513739363},{"_id":"public/resume/image/piechart-back.png","hash":"88d822212530e64c49540074fe8ce102ce4dc58b","modified":1565513739363},{"_id":"public/resume/image/nba-rim.png","hash":"8235aebc69f9d7107353ed308fb2dd65fe40b907","modified":1565513739363},{"_id":"public/resume/image/plant-ribbon-right.png","hash":"31f15e8280303cf3d887d3b8b51f994026a0bfc7","modified":1565513739364},{"_id":"public/resume/image/plant-ribbon-left.png","hash":"e898b1efa12434a9db5ece6120f78b4730e45857","modified":1565513739364},{"_id":"public/resume/image/plant-head-leaves.png","hash":"ab8a2af3d64e729f2fb7a4f14878b573ae92d11d","modified":1565513739364},{"_id":"public/resume/image/preloader-banner-right.png","hash":"f47ff58b8f3396962c2860255a7b4583230a58a1","modified":1565513739364},{"_id":"public/resume/image/preloader-dots-static.png","hash":"50e27135bbcc5f17c16dd2c5d5891b3dbb4392df","modified":1565513739364},{"_id":"public/resume/image/ribbon-left.png","hash":"54dd5d67dd8a4504110bdebbdbf8ab71aa50a2f0","modified":1565513739364},{"_id":"public/resume/image/preloader-banner-left.png","hash":"24e81989c3d255b386b0267ed3e810b0cce19e00","modified":1565513739364},{"_id":"public/resume/image/ribbon-right.png","hash":"bc1a3a8e92ed521082837c661200ede17f3d21b3","modified":1565513739374},{"_id":"public/resume/image/qzone.png","hash":"d9b84c82ca5c5a37485b8bab1020714087b55551","modified":1565513739374},{"_id":"public/resume/image/preloader-dots-animation.gif","hash":"6f59502c319976e39abf54855b704e0fe6e04782","modified":1565513739374},{"_id":"public/resume/image/robby-eyes-close.png","hash":"f0ffa8c26e45b30177793414d6979149c187adf7","modified":1565513739374},{"_id":"public/resume/image/robot-hand-c.png","hash":"90ed980f76ebfa7cf5efcb5625ed44179420ed7a","modified":1565513739375},{"_id":"public/resume/image/robby-slides.png","hash":"2eaac62cdf1883c148ce5fef0961d06673ada3b2","modified":1565513739375},{"_id":"public/resume/image/robot-body.png","hash":"a397cad86feac6356f82b7646e107608ae241e6f","modified":1565513739375},{"_id":"public/resume/image/robot-hand-a.png","hash":"662f669947ffaccf826b81069b3b23126c14725d","modified":1565513739375},{"_id":"public/resume/image/sea-ribbon-left.png","hash":"54b53bbe6a07f3f589faecc3222513c06bd54f20","modified":1565513739375},{"_id":"public/resume/image/sea-ribbon-right.png","hash":"0d89269f93062ca810a77191c7a160958e41967b","modified":1565513739375},{"_id":"public/resume/image/sea-wave.png","hash":"c5465916189bffc1d5db39cfcedc376e0d332a22","modified":1565513739375},{"_id":"public/resume/image/robot-hand-b.png","hash":"3d91f6fba54f42599b0e8f531da1293ea7aac2fa","modified":1565513739375},{"_id":"public/resume/image/robot-hand-d.png","hash":"1cb83555812a44bfb38ff5e77f1be48bbacd63c9","modified":1565513739375},{"_id":"public/resume/image/social-top.png","hash":"f093bae808f08443b3e8314e106e36b6d6086300","modified":1565513739376},{"_id":"public/resume/image/social-bottom.png","hash":"73246aac2a50990b7844791a72e357e0cf014ba8","modified":1565513739376},{"_id":"public/resume/image/social-facebook.png","hash":"1a10170118d3a375545522de0ec521edd41baac9","modified":1565513739376},{"_id":"public/resume/image/squid-hand-close-a.png","hash":"9e901a4a28bcce6f7ef1d00eae27c9e92a5f3f2d","modified":1565513739376},{"_id":"public/resume/image/social-twitter.png","hash":"66f7947da24c28bdb02870fb8025d37a5013f516","modified":1565513739376},{"_id":"public/resume/image/squid-body.png","hash":"e3779a9ba18110cfbf8253dcc43b03bf029c758a","modified":1565513739376},{"_id":"public/resume/image/squid-hand-close-c.png","hash":"f22f57fa4fa1fd081c9d441b09a26bc8024d00f7","modified":1565513739376},{"_id":"public/resume/image/squid-hand-close-d.png","hash":"c5adcd89c78fce9370c4600ed1d539ad82cc3bed","modified":1565513739376},{"_id":"public/resume/image/squid-hand-close-b.png","hash":"deb680edf2994289b947f5fd11016133dc99aa14","modified":1565513739376},{"_id":"public/resume/image/squid-hand-open-a.png","hash":"485d9e71bf0f34e11d6236d3a5475c10566344ba","modified":1565513739376},{"_id":"public/resume/image/squid-hand-open-c.png","hash":"bede9c2edddc57b1a2b893b0d26d03f7474eec78","modified":1565513739376},{"_id":"public/resume/image/squid-hand-open-d.png","hash":"41c96e61a7e249c58f70e107e2581342259fd1cb","modified":1565513739377},{"_id":"public/resume/image/title-about.png","hash":"9bf5263ebfe10be1bb8634193d09ef33455da1ac","modified":1565513739377},{"_id":"public/resume/image/squid-hand-open-b.png","hash":"31b4459d7d34ce48b6447dda90d72cf6d1f08548","modified":1565513739377},{"_id":"public/resume/image/title-experience.png","hash":"f4d9097d10c6c54737bbad7113abde396fc693e4","modified":1565513739377},{"_id":"public/resume/image/tree-bright-a.png","hash":"50f0c3290ad44674f58657df6a0a94c9392c22e1","modified":1565513739377},{"_id":"public/resume/image/title-contact.png","hash":"79fc58202e07507e3a13f79a2f5cae1e426218e1","modified":1565513739377},{"_id":"public/resume/image/title-publication.png","hash":"25f433e704d20ba364da9fbc8f0d13257463cd58","modified":1565513739378},{"_id":"public/resume/image/title-skills.png","hash":"1da8c77846c60bde4e902434e8d44bbc88aee610","modified":1565513739378},{"_id":"public/resume/image/title-robby.png","hash":"11286badda83f2a51b63c5124f8eab5012089f4d","modified":1565513739378},{"_id":"public/resume/image/tree-bright-b.png","hash":"333d70764bfef1ecbd8276b2e68047b8abe40412","modified":1565513739378},{"_id":"public/resume/image/tree-bright-e.png","hash":"20eb17f9e8b1920a8f5469fbb705fe1c4fd7b8ea","modified":1565513739378},{"_id":"public/resume/image/tree-dark-a.png","hash":"61da21f90ae1ad2f3278f15b831e9813f5b66fd8","modified":1565513739378},{"_id":"public/resume/image/tree-dark-b.png","hash":"c056cbdb01a5ccc8f4cabf66de08f4498daf3b0c","modified":1565513739378},{"_id":"public/resume/image/tree-bright-d.png","hash":"8c9d731952a4f94329f00942a63f5d1aaaaeb0cd","modified":1565513739378},{"_id":"public/resume/image/tsina.png","hash":"16ffe7cb7273782be6228e77d363f3c5dceef449","modified":1565513739378},{"_id":"public/resume/image/turtle-eyes.png","hash":"1ac1b5af43f1d98fbaf58a4b3a5ab3e64eef19f5","modified":1565513739378},{"_id":"public/resume/image/tree-dark-d.png","hash":"f77ac56b8b93e25844537be7e066e5d4705844d3","modified":1565513739379},{"_id":"public/resume/image/tree-dark-c.png","hash":"6a0daf71169bb9ff9684c3887c823386766f0ded","modified":1565513739379},{"_id":"public/resume/image/waterfall-a.png","hash":"9f60bc0af589a14761bcb1ecb7169363cd652536","modified":1565513739379},{"_id":"public/resume/image/turtle.png","hash":"02794c602934cbc80d568598c50ae9aae4c9fb32","modified":1565513739379},{"_id":"public/resume/script/container-transparent-or-displaynone.js","hash":"742ded8b75ec6d5ec881090dc2d45281ceb89e94","modified":1565513739379},{"_id":"public/resume/image/waterfall-b.png","hash":"7d192b8f3043ef776ae33abc4b448aa00dc606f3","modified":1565513739379},{"_id":"public/resume/script/ga.js","hash":"b9481f67f004ed6a4804d522f428a8430ece3ffb","modified":1565513739379},{"_id":"public/resume/script/analytics.js","hash":"084a6f314232d1e73ad2e452460ee50a26da1c80","modified":1565513739379},{"_id":"public/resume/script/email.js","hash":"25d55f8100a4b6db60e23b34ab63e44c4c8c2291","modified":1565513739379},{"_id":"public/resume/script/detect-browser-device.js","hash":"b90694e7ec54c84e9582c13acf3fdbd4755a7bb1","modified":1565513739379},{"_id":"public/resume/script/preloader-transparent-or-displaynone.js","hash":"3185b31715a02c11eb3ecf6dacde6368c0eaa5f6","modified":1565513739379},{"_id":"public/resume/script/preloader.js","hash":"a77fbaafc722056ea5732799b548b309d89a3e86","modified":1565513739379},{"_id":"public/resume/script/jquery-ui-1.10.2.custom.min.js","hash":"f01e7d956719b2f7bced39d233ed4c010221ee3b","modified":1565513739379},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1565513739379},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1565513739379},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1565513739380},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1565513739380},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1565513739380},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1565513739380},{"_id":"public/images/default-avatar.jpg","hash":"19927be11481b179fea886da0ad14aa6a9464788","modified":1565513739380},{"_id":"public/Tap/shared/js/common-2.min.js","hash":"e059c09b6ce0a759f041d6fe6af1b1234c2d7fe8","modified":1565513739380},{"_id":"public/Tap/shared/css/index-1.css","hash":"9ac57fe34320e7bc331d75c9d957ee43ecad9577","modified":1565513739380},{"_id":"public/Tap/shared/css/common-1.css","hash":"4ac9665f38b21a0a602db50b6658b79b3e6e89f5","modified":1565513739380},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1565513739380},{"_id":"public/images/icons/css_cloud.png","hash":"df67b83b62174a2965628d81abe9b8a5c4a89728","modified":1565513739380},{"_id":"public/images/icons/css_doorframe.png","hash":"f5cbaefd062abc90337148e0e593949e0b1d6b2a","modified":1565513739380},{"_id":"public/images/icons/css_tag.png","hash":"25e3e0f37f0a86cf06463063e0f5381442d1a72a","modified":1565513739381},{"_id":"public/images/icons/css_patterns.png","hash":"9345361fe1c631c74022759189bc44aa4a7053df","modified":1565513739381},{"_id":"public/images/icons/css_texture.png","hash":"874074999995e6981d7602a7d5a770043a10b932","modified":1565513739381},{"_id":"public/images/icons/css_pattern_bottom.png","hash":"ff30fbc4ee81471ff3e44c2a8e15ba121e995f78","modified":1565513739381},{"_id":"public/Tap/shared/sp/css/common.css","hash":"d98a135ddec32463ee76eb88e51822114a4d28b4","modified":1565513739381},{"_id":"public/images/icons/css_window_frame.png","hash":"7f985fc949cbecaf12982327d4b14e684bc2b205","modified":1565513739381},{"_id":"public/cxk/css/bootstrap.min.css","hash":"224c9f9ad11b495358aa61dbd53e838e9b61015b","modified":1565513739391},{"_id":"public/cxk/js/jquery.min.js","hash":"1327f754ff87d26bced46568543207e9df190aaa","modified":1565513739391},{"_id":"public/cxk/js/showdown.min.js","hash":"9c1eebd6f48db285c02ab51c327b058a9bb85000","modified":1565513739392},{"_id":"public/resume/script/jquery-1.9.1.min.js","hash":"a1ce0bfa507f23cc414a9a7634bd73b994bb3b35","modified":1565513739392},{"_id":"public/resume/script/main.js","hash":"7269c755909d63d81433c4cbde255201ce81f301","modified":1565513739393},{"_id":"public/Tap/data/track/track.json","hash":"28af7e2caa4c47c03ea97b143374a8811e27f13f","modified":1565513739393},{"_id":"public/css/highlight.css","hash":"358c8414fbc5eafa50fddfb67dbd6159d54e40ec","modified":1565513739404},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1565513739405},{"_id":"public/js/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1565513739405},{"_id":"public/js/script.js","hash":"d9d547c97faa5a78fedc1e034b554b79eea35db0","modified":1565513739405},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1565513739405},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1565513739405},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1565513739405},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1565513739405},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1565513739405},{"_id":"public/css/style.css","hash":"7321eed39088431c646c06a14e0f16df9d6f051c","modified":1565513739411},{"_id":"public/Tap/data/main/main.json","hash":"292a347cc6e3dab1e9430e2016d90c9ca67a47b2","modified":1565513739411},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1565513739419},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1565513739465},{"_id":"public/cxk/images/background.jpg","hash":"5c058fad95c06d7df554f0569474f9fffc862d0b","modified":1565513739466},{"_id":"public/images/bg.jpg","hash":"5c058fad95c06d7df554f0569474f9fffc862d0b","modified":1565513739467},{"_id":"public/js/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1565513739470},{"_id":"public/resume/mario.mp3","hash":"5e7315f3a349be100384fe53ab2281b32bc38a97","modified":1565513739471},{"_id":"public/js/gitment.js","hash":"fe2db2c104dd2180e85c1c9275348a4ecc676e54","modified":1565513739476},{"_id":"public/archives/2019/03/index.html","hash":"903168aae7c7c4fa0727cc816c0fb0cdcae827b9","modified":1565513979221},{"_id":"public/archives/2019/04/index.html","hash":"f6067eed7009bf48d666047f72e9a99fe078a8d3","modified":1565513979221},{"_id":"public/archives/2019/05/index.html","hash":"c50df2fa4a26af8b57923dd00f325f3293006c2f","modified":1565513979221},{"_id":"public/archives/2019/07/index.html","hash":"b9c01e5efab70fb9bb91e150d31e74fd19022b18","modified":1565513979221},{"_id":"public/archives/2018/12/index.html","hash":"67298ca1e522f950cac146825f150b416f6a8b35","modified":1565513979229},{"_id":"public/archives/2019/06/index.html","hash":"b8db602d87e6dbc2411fe3b02070baddb28bc49c","modified":1565513979229},{"_id":"public/2019/08/02/async-await/index.html","hash":"b0a03bddaa37c12fa996092b97c3069c021e3065","modified":1565513979229},{"_id":"public/2019/07/23/clip-path/index.html","hash":"a36d2b7cf8865b8c58fd584f4208e4454a74fbde","modified":1565513979229},{"_id":"public/2019/07/02/git-operating/index.html","hash":"7bb23a9f9090b72f3f9a5e18a5989f01a70324c1","modified":1565513979229},{"_id":"public/2019/06/20/interview/index.html","hash":"12be623dbf178950521bc57c0588b65fb9c764cf","modified":1565513979229},{"_id":"public/2019/06/19/javascript/index.html","hash":"96a5d86ef6b904eb4ceb79d100951a5a907b9625","modified":1565513979229},{"_id":"public/2019/06/13/electron-packager/index.html","hash":"de13d3fce5fdf9fcb588044e8434dc80ea460bb6","modified":1565513979229},{"_id":"public/2019/05/24/reflux/index.html","hash":"a091610cfe3b486d8be296082cf0109fddff6728","modified":1565513979229},{"_id":"public/2019/05/05/vue-interview/index.html","hash":"e99023b4deb9e071645b2e57d6482f53f9d74b69","modified":1565513979230},{"_id":"public/2019/04/28/vue-shake/index.html","hash":"64b51fd1fd7c6c0a18b521967f833ed1fe4e23e7","modified":1565513979230},{"_id":"public/2019/04/05/vue-router/index.html","hash":"beb7f7b68ef687223eaed604c25b70cec1e38f80","modified":1565513979230},{"_id":"public/2019/03/05/for/index.html","hash":"1776d7a5f50c25236c1f7c62f8987a9d846f3dde","modified":1565513979230},{"_id":"public/2018/12/12/CodecheckList/index.html","hash":"f914c818b42ef370ede9e3054bf21ddc9cac0245","modified":1565513979230}],"Category":[{"name":"面试","_id":"cjz6qgijl0004rou3u9g7act5"},{"name":"技术","_id":"cjz6qgiju0009rou39hcuvtxv"}],"Data":[],"Page":[{"title":"文章分类","date":"2019-03-25T08:46:59.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2019-03-25 16:46:59\ntype: \"categories\"\n---\n","updated":"2019-08-11T01:59:55.157Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjz6qgijf0001rou37c0wts4v","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-03-27T06:33:50.000Z","type":"tages","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-03-27 14:33:50\ntype: \"tages\"\n---\n","updated":"2019-08-11T01:59:55.254Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjz6qgijj0003rou31ctw3wwg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"js数组去重多一种选择","date":"2019-08-10T16:00:00.000Z","_content":"数组去重，一般在面试的时候都会被问到，要求现场写去重代码，那么你知道有多少去重的方法呢？如果你能答出多种的话，面试官一定会对你刮目相看的。\n\n数组去重的方法：\n## 一、利用ES6 Set去重\n``` breach\nfunction uniq(arr){\n  return Array.from(new Set(arr))\n}\nlet arr = [1,1,2,2,3,3];\nconsole.log(uniq(arr));\n```\n<!--more-->\n如果不考虑兼容性的话，此方法代码最少。\n\n## 二、利用splice去重。\n``` breach\n function uniq(arr){\n   if(!Array.isArray(arr)){\n      console.log(\"no array\");\n      return\n   }\n   for(let i=0;i<arr.length;i++){\n     for(let j=i+1;j<arr.length;j++){\n        if(arr[i]==arr[j]){\n          arr.splice(j,1);\n        }\n     }\n   }\n   return arr;\n }\n let arr=[1,1,2,2,3,3];\n console.log(uniq(arr));\n```\n双重for循环，外层循环元素，内层判断值，值相等就通过`splice`删除。\n## 三、利用indexOf去重\n```breach\nfunction uniq(arr){\n  if(!Array.isArray(arr)){\n     console.log(\"no array\");\n     return\n  }\n  let array=[];\n  for(let i=0;i<arr.length;i++){\n     if(array.indexOf(arr[i])==-1){\n       array.push(arr[i]);\n     }\n  }\n  return array;\n}\nlet arr=[1,1,2,2,3,3];\nconsole.log(uniq(arr))\n```\n通过新建一个空数组，for循环判断空数组中是否存在当前元素，如果不存在就`push`进去，如果存在就跳过。\n## 四、利用sort()\n``` breach\nfunction uniq(arr){\n if(!Array.isArray(arr)){\n   console.log(\"no array\");\n   return\n }\n arr = arr.sort();\n let array = [];\n for(let i=0;i<arr.length;i++){\n   if(arr[i]!=arr[i+1]){\n     array.push(arr[i]);\n   }\n }\n return array;\n}\nlet arr = [1,2,3,6,4,2,1];\nconsole.log(uniq(arr))\n```\n通过`sort()`排序过后，再用for循环遍历比较相邻元素。\n## 五、利用对象的属性不能相同去重\n``` breach\nfunction uniq(arr){\n  if(!Array.isArray(arr)){\n    console.log(\"no array\");\n    return\n  }\n  let array=[],obj={};\n  for(let i=0;i<arr.length;i++){\n    if(!obj[arr[i]]){\n      array.push(arr[i]);\n      obj[arr[i]]=1;\n    }else{\n      obj[arr[i]]++;\n    }\n  }\n  return array;\n}\nlet arr = [1,2,3,4,2,3,1];\nconsole.log(uniq(arr))\n```\n## 六、利用includes\n``` breach\nfunction uniq(arr){\n if(!Array.isArray(arr)){\n   console.log(\"no array\");\n   return;\n }\n let array = [];\n for(let i=0;i<arr.length;i++){\n   if(!array.includes(arr[i])){ //array中是否存在arr[i]元素\n     array.push(arr[i]);\n   }\n }\n return array;\n}\nlet arr = [1,2,3,5,2,1];\nconsole.log(uniq(arr));\n```\n## 七、利用hasOwnProperty\n``` breach\nfunction uniq(arr){\n let obj = {};\n return arr.filter((item,index,arr)=>{\n   return obj.hasOwnProperty(typeof item+item) ? false:(obj[typeof item+item]=true)\n })\n}\nlet arr = [1,2,3,5,2,1];\nconsole.log(uniq(arr));\n```\n## 八、利用filter\n``` breach\nfunction uniq(arr){\n return arr.filter((item,index,arr)=>{\n   //当前元素，在原数组中的第一个索引 === 当前索引值,否则返回当前元素\n   return arr.indexOf(item,0) === index;\n })\n}\nlet arr = [1,2,3,5,2,1];\nconsole.log(uniq(arr));\n```\n","source":"_posts/array.md","raw":"---\ntitle: js数组去重多一种选择\ndate: 2019-08-11\ncategories:\n - 面试\ntags:\n - js\n---\n数组去重，一般在面试的时候都会被问到，要求现场写去重代码，那么你知道有多少去重的方法呢？如果你能答出多种的话，面试官一定会对你刮目相看的。\n\n数组去重的方法：\n## 一、利用ES6 Set去重\n``` breach\nfunction uniq(arr){\n  return Array.from(new Set(arr))\n}\nlet arr = [1,1,2,2,3,3];\nconsole.log(uniq(arr));\n```\n<!--more-->\n如果不考虑兼容性的话，此方法代码最少。\n\n## 二、利用splice去重。\n``` breach\n function uniq(arr){\n   if(!Array.isArray(arr)){\n      console.log(\"no array\");\n      return\n   }\n   for(let i=0;i<arr.length;i++){\n     for(let j=i+1;j<arr.length;j++){\n        if(arr[i]==arr[j]){\n          arr.splice(j,1);\n        }\n     }\n   }\n   return arr;\n }\n let arr=[1,1,2,2,3,3];\n console.log(uniq(arr));\n```\n双重for循环，外层循环元素，内层判断值，值相等就通过`splice`删除。\n## 三、利用indexOf去重\n```breach\nfunction uniq(arr){\n  if(!Array.isArray(arr)){\n     console.log(\"no array\");\n     return\n  }\n  let array=[];\n  for(let i=0;i<arr.length;i++){\n     if(array.indexOf(arr[i])==-1){\n       array.push(arr[i]);\n     }\n  }\n  return array;\n}\nlet arr=[1,1,2,2,3,3];\nconsole.log(uniq(arr))\n```\n通过新建一个空数组，for循环判断空数组中是否存在当前元素，如果不存在就`push`进去，如果存在就跳过。\n## 四、利用sort()\n``` breach\nfunction uniq(arr){\n if(!Array.isArray(arr)){\n   console.log(\"no array\");\n   return\n }\n arr = arr.sort();\n let array = [];\n for(let i=0;i<arr.length;i++){\n   if(arr[i]!=arr[i+1]){\n     array.push(arr[i]);\n   }\n }\n return array;\n}\nlet arr = [1,2,3,6,4,2,1];\nconsole.log(uniq(arr))\n```\n通过`sort()`排序过后，再用for循环遍历比较相邻元素。\n## 五、利用对象的属性不能相同去重\n``` breach\nfunction uniq(arr){\n  if(!Array.isArray(arr)){\n    console.log(\"no array\");\n    return\n  }\n  let array=[],obj={};\n  for(let i=0;i<arr.length;i++){\n    if(!obj[arr[i]]){\n      array.push(arr[i]);\n      obj[arr[i]]=1;\n    }else{\n      obj[arr[i]]++;\n    }\n  }\n  return array;\n}\nlet arr = [1,2,3,4,2,3,1];\nconsole.log(uniq(arr))\n```\n## 六、利用includes\n``` breach\nfunction uniq(arr){\n if(!Array.isArray(arr)){\n   console.log(\"no array\");\n   return;\n }\n let array = [];\n for(let i=0;i<arr.length;i++){\n   if(!array.includes(arr[i])){ //array中是否存在arr[i]元素\n     array.push(arr[i]);\n   }\n }\n return array;\n}\nlet arr = [1,2,3,5,2,1];\nconsole.log(uniq(arr));\n```\n## 七、利用hasOwnProperty\n``` breach\nfunction uniq(arr){\n let obj = {};\n return arr.filter((item,index,arr)=>{\n   return obj.hasOwnProperty(typeof item+item) ? false:(obj[typeof item+item]=true)\n })\n}\nlet arr = [1,2,3,5,2,1];\nconsole.log(uniq(arr));\n```\n## 八、利用filter\n``` breach\nfunction uniq(arr){\n return arr.filter((item,index,arr)=>{\n   //当前元素，在原数组中的第一个索引 === 当前索引值,否则返回当前元素\n   return arr.indexOf(item,0) === index;\n })\n}\nlet arr = [1,2,3,5,2,1];\nconsole.log(uniq(arr));\n```\n","slug":"array","published":1,"updated":"2019-08-11T08:59:27.487Z","_id":"cjz6qgij20000rou30c8czfe8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>数组去重，一般在面试的时候都会被问到，要求现场写去重代码，那么你知道有多少去重的方法呢？如果你能答出多种的话，面试官一定会对你刮目相看的。</p>\n<p>数组去重的方法：</p>\n<h2 id=\"一、利用ES6-Set去重\"><a href=\"#一、利用ES6-Set去重\" class=\"headerlink\" title=\"一、利用ES6 Set去重\"></a>一、利用ES6 Set去重</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\">  return Array.from(new Set(arr))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [1,1,2,2,3,3];</span><br><span class=\"line\">console.log(uniq(arr));</span><br></pre></td></tr></table></figure></div>\n<a id=\"more\"></a>\n<p>如果不考虑兼容性的话，此方法代码最少。</p>\n<h2 id=\"二、利用splice去重。\"><a href=\"#二、利用splice去重。\" class=\"headerlink\" title=\"二、利用splice去重。\"></a>二、利用splice去重。</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\">  if(!Array.isArray(arr))&#123;</span><br><span class=\"line\">     console.log(&quot;no array&quot;);</span><br><span class=\"line\">     return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    for(let j=i+1;j&lt;arr.length;j++)&#123;</span><br><span class=\"line\">       if(arr[i]==arr[j])&#123;</span><br><span class=\"line\">         arr.splice(j,1);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr=[1,1,2,2,3,3];</span><br><span class=\"line\">console.log(uniq(arr));</span><br></pre></td></tr></table></figure></div>\n<p>双重for循环，外层循环元素，内层判断值，值相等就通过<code>splice</code>删除。</p>\n<h2 id=\"三、利用indexOf去重\"><a href=\"#三、利用indexOf去重\" class=\"headerlink\" title=\"三、利用indexOf去重\"></a>三、利用indexOf去重</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\">  if(!Array.isArray(arr))&#123;</span><br><span class=\"line\">     console.log(&quot;no array&quot;);</span><br><span class=\"line\">     return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let array=[];</span><br><span class=\"line\">  for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">     if(array.indexOf(arr[i])==-1)&#123;</span><br><span class=\"line\">       array.push(arr[i]);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr=[1,1,2,2,3,3];</span><br><span class=\"line\">console.log(uniq(arr))</span><br></pre></td></tr></table></figure></div>\n<p>通过新建一个空数组，for循环判断空数组中是否存在当前元素，如果不存在就<code>push</code>进去，如果存在就跳过。</p>\n<h2 id=\"四、利用sort\"><a href=\"#四、利用sort\" class=\"headerlink\" title=\"四、利用sort()\"></a>四、利用sort()</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\"> if(!Array.isArray(arr))&#123;</span><br><span class=\"line\">   console.log(&quot;no array&quot;);</span><br><span class=\"line\">   return</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> arr = arr.sort();</span><br><span class=\"line\"> let array = [];</span><br><span class=\"line\"> for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">   if(arr[i]!=arr[i+1])&#123;</span><br><span class=\"line\">     array.push(arr[i]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [1,2,3,6,4,2,1];</span><br><span class=\"line\">console.log(uniq(arr))</span><br></pre></td></tr></table></figure></div>\n<p>通过<code>sort()</code>排序过后，再用for循环遍历比较相邻元素。</p>\n<h2 id=\"五、利用对象的属性不能相同去重\"><a href=\"#五、利用对象的属性不能相同去重\" class=\"headerlink\" title=\"五、利用对象的属性不能相同去重\"></a>五、利用对象的属性不能相同去重</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\">  if(!Array.isArray(arr))&#123;</span><br><span class=\"line\">    console.log(&quot;no array&quot;);</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let array=[],obj=&#123;&#125;;</span><br><span class=\"line\">  for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    if(!obj[arr[i]])&#123;</span><br><span class=\"line\">      array.push(arr[i]);</span><br><span class=\"line\">      obj[arr[i]]=1;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">      obj[arr[i]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [1,2,3,4,2,3,1];</span><br><span class=\"line\">console.log(uniq(arr))</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"六、利用includes\"><a href=\"#六、利用includes\" class=\"headerlink\" title=\"六、利用includes\"></a>六、利用includes</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\"> if(!Array.isArray(arr))&#123;</span><br><span class=\"line\">   console.log(&quot;no array&quot;);</span><br><span class=\"line\">   return;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> let array = [];</span><br><span class=\"line\"> for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">   if(!array.includes(arr[i]))&#123; //array中是否存在arr[i]元素</span><br><span class=\"line\">     array.push(arr[i]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [1,2,3,5,2,1];</span><br><span class=\"line\">console.log(uniq(arr));</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"七、利用hasOwnProperty\"><a href=\"#七、利用hasOwnProperty\" class=\"headerlink\" title=\"七、利用hasOwnProperty\"></a>七、利用hasOwnProperty</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\"> let obj = &#123;&#125;;</span><br><span class=\"line\"> return arr.filter((item,index,arr)=&gt;&#123;</span><br><span class=\"line\">   return obj.hasOwnProperty(typeof item+item) ? false:(obj[typeof item+item]=true)</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [1,2,3,5,2,1];</span><br><span class=\"line\">console.log(uniq(arr));</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"八、利用filter\"><a href=\"#八、利用filter\" class=\"headerlink\" title=\"八、利用filter\"></a>八、利用filter</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\"> return arr.filter((item,index,arr)=&gt;&#123;</span><br><span class=\"line\">   //当前元素，在原数组中的第一个索引 === 当前索引值,否则返回当前元素</span><br><span class=\"line\">   return arr.indexOf(item,0) === index;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [1,2,3,5,2,1];</span><br><span class=\"line\">console.log(uniq(arr));</span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"<p>数组去重，一般在面试的时候都会被问到，要求现场写去重代码，那么你知道有多少去重的方法呢？如果你能答出多种的话，面试官一定会对你刮目相看的。</p>\n<p>数组去重的方法：</p>\n<h2 id=\"一、利用ES6-Set去重\"><a href=\"#一、利用ES6-Set去重\" class=\"headerlink\" title=\"一、利用ES6 Set去重\"></a>一、利用ES6 Set去重</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\">  return Array.from(new Set(arr))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [1,1,2,2,3,3];</span><br><span class=\"line\">console.log(uniq(arr));</span><br></pre></td></tr></table></figure>","more":"<p>如果不考虑兼容性的话，此方法代码最少。</p>\n<h2 id=\"二、利用splice去重。\"><a href=\"#二、利用splice去重。\" class=\"headerlink\" title=\"二、利用splice去重。\"></a>二、利用splice去重。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\">  if(!Array.isArray(arr))&#123;</span><br><span class=\"line\">     console.log(&quot;no array&quot;);</span><br><span class=\"line\">     return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    for(let j=i+1;j&lt;arr.length;j++)&#123;</span><br><span class=\"line\">       if(arr[i]==arr[j])&#123;</span><br><span class=\"line\">         arr.splice(j,1);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr=[1,1,2,2,3,3];</span><br><span class=\"line\">console.log(uniq(arr));</span><br></pre></td></tr></table></figure>\n<p>双重for循环，外层循环元素，内层判断值，值相等就通过<code>splice</code>删除。</p>\n<h2 id=\"三、利用indexOf去重\"><a href=\"#三、利用indexOf去重\" class=\"headerlink\" title=\"三、利用indexOf去重\"></a>三、利用indexOf去重</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\">  if(!Array.isArray(arr))&#123;</span><br><span class=\"line\">     console.log(&quot;no array&quot;);</span><br><span class=\"line\">     return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let array=[];</span><br><span class=\"line\">  for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">     if(array.indexOf(arr[i])==-1)&#123;</span><br><span class=\"line\">       array.push(arr[i]);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr=[1,1,2,2,3,3];</span><br><span class=\"line\">console.log(uniq(arr))</span><br></pre></td></tr></table></figure>\n<p>通过新建一个空数组，for循环判断空数组中是否存在当前元素，如果不存在就<code>push</code>进去，如果存在就跳过。</p>\n<h2 id=\"四、利用sort\"><a href=\"#四、利用sort\" class=\"headerlink\" title=\"四、利用sort()\"></a>四、利用sort()</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\"> if(!Array.isArray(arr))&#123;</span><br><span class=\"line\">   console.log(&quot;no array&quot;);</span><br><span class=\"line\">   return</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> arr = arr.sort();</span><br><span class=\"line\"> let array = [];</span><br><span class=\"line\"> for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">   if(arr[i]!=arr[i+1])&#123;</span><br><span class=\"line\">     array.push(arr[i]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [1,2,3,6,4,2,1];</span><br><span class=\"line\">console.log(uniq(arr))</span><br></pre></td></tr></table></figure>\n<p>通过<code>sort()</code>排序过后，再用for循环遍历比较相邻元素。</p>\n<h2 id=\"五、利用对象的属性不能相同去重\"><a href=\"#五、利用对象的属性不能相同去重\" class=\"headerlink\" title=\"五、利用对象的属性不能相同去重\"></a>五、利用对象的属性不能相同去重</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\">  if(!Array.isArray(arr))&#123;</span><br><span class=\"line\">    console.log(&quot;no array&quot;);</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let array=[],obj=&#123;&#125;;</span><br><span class=\"line\">  for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    if(!obj[arr[i]])&#123;</span><br><span class=\"line\">      array.push(arr[i]);</span><br><span class=\"line\">      obj[arr[i]]=1;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">      obj[arr[i]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [1,2,3,4,2,3,1];</span><br><span class=\"line\">console.log(uniq(arr))</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、利用includes\"><a href=\"#六、利用includes\" class=\"headerlink\" title=\"六、利用includes\"></a>六、利用includes</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\"> if(!Array.isArray(arr))&#123;</span><br><span class=\"line\">   console.log(&quot;no array&quot;);</span><br><span class=\"line\">   return;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> let array = [];</span><br><span class=\"line\"> for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">   if(!array.includes(arr[i]))&#123; //array中是否存在arr[i]元素</span><br><span class=\"line\">     array.push(arr[i]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [1,2,3,5,2,1];</span><br><span class=\"line\">console.log(uniq(arr));</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、利用hasOwnProperty\"><a href=\"#七、利用hasOwnProperty\" class=\"headerlink\" title=\"七、利用hasOwnProperty\"></a>七、利用hasOwnProperty</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\"> let obj = &#123;&#125;;</span><br><span class=\"line\"> return arr.filter((item,index,arr)=&gt;&#123;</span><br><span class=\"line\">   return obj.hasOwnProperty(typeof item+item) ? false:(obj[typeof item+item]=true)</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [1,2,3,5,2,1];</span><br><span class=\"line\">console.log(uniq(arr));</span><br></pre></td></tr></table></figure>\n<h2 id=\"八、利用filter\"><a href=\"#八、利用filter\" class=\"headerlink\" title=\"八、利用filter\"></a>八、利用filter</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function uniq(arr)&#123;</span><br><span class=\"line\"> return arr.filter((item,index,arr)=&gt;&#123;</span><br><span class=\"line\">   //当前元素，在原数组中的第一个索引 === 当前索引值,否则返回当前元素</span><br><span class=\"line\">   return arr.indexOf(item,0) === index;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [1,2,3,5,2,1];</span><br><span class=\"line\">console.log(uniq(arr));</span><br></pre></td></tr></table></figure>"},{"title":"electron打包react项目","date":"2019-06-12T16:00:00.000Z","_content":"## 前言\n懂的小伙伴大概已经知道这是个什么了，那么不懂的小伙伴听我大致道来。也许你不甘心只写网页，也想写一个电脑上的exe程序那种；或者你有项目需求必须要写个exe程序，但是你只会前端，没关系，看了这篇文章你也就能写出一个exe程序了。\n<!--more-->\n## 一、安装electron\n - 为了方便以后使用，建议进行全局安装，这样任何文件夹下面就都能使用`electron`了。\n``` breach\n//安装命令\nnpm install electron  --g\n//npm如果太慢的话，我们就改用国内镜像，国内镜像安装如下:\nnpm install cnpm -g  --registry=https://registry.npm.taobao.org\ncnpm install electron --save\n```\n## 二、react使用electron\n\n### 添加electron包\n``` breach\nnpm install electron --save\n//安装打包工具\nnpm install electron-packager --save-dev\n```\n### 相关配置\n#### 配置main.js\n在项目根目录(不是src目录)下新建一个main.js，写入如下配置：\n``` breach\n//引入electron并创建一个BrowserWindow\nconst {app,BrowserWindow} = require(\"electron\");\nconst path = require(\"path\");\nconst url = require(\"path\");\n//保持window对象的全局引用，避免Javascript对象被垃圾回收时，窗口被自动关闭\nlet win;\n\nfunction createWindow(){\n //创建浏览器窗口，宽高随意\n  win = new BrowserWindow({width:800,height:600});\n \n //加载应用----  适用桌面应用\n /*win.loadURL(url.format({\n   pathname:path.join(_dirname+\"./build/index.html\"),\n   protocol:\"file:\"\n   slashes:true\n }))*/\n // 加载应用---- 适用react\n win.loadURL(\"http://localhost:3000/\");\n //打开开发者工具,默认不打开\n win.webContents.openDevTools();\n \n //关闭window时触发\n win.on(\"closed\",function(){\n   win = null\n })\n}\n//当electron初始化完成后并开始创建浏览器窗口时运行\napp.on(\"ready\",createWindow);\n\n//所有窗口关闭时，退出应用\napp.on(\"window-all-closed\",function({\n// macOS中除非用户按下 `Cmd + Q` 显式退出,否则应用与菜单栏始终处于活动状态.\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n}))\n\napp.on('activate', function () {\n   // macOS中点击Dock图标时没有已打开的其余应用窗口时,则通常在应用中重建一个窗口\n  if (win === null) {\n    createWindow()\n  }\n})\n```\n#### 配置package.json\n``` breach\n{\n  \"name\": \"platform\",\n  \"version\": \"1.0.0\",\n  \"description\": \"This is a food and beverage management system\",\n  \"main\": \"main.js\", //配置electron启动文件\n  \"homepage\": \".\", //配置electron打包后静态static不能访问\n  \"DEV\":false,\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"babel-node devServer.js --progress --colors\",\n    \"dist\": \"webpack --config webpack.config.pro.js --progress --colors \",\n    \"build\": \"webpack --progress\",\n    \"electron-start\": \"electron .\", //配置运行桌面应用指令\n    //配置打包为桌面应用指令\n    \"packager\": \"electron-packager ./ react-electron --win --out ~/ --electron-version 1.7.10\",\n    \"dev\": \"babel-node devServer.js --progress --colors ./node_modules/.bin/electron ./main\"\n  },\n```\n### 开始打包\n在项目根目录运行\n``` breach\nnpm run packager\n```\n\n","source":"_posts/electron-packager.md","raw":"---\ntitle: electron打包react项目\ndate: 2019-06-13\ncategories:\n - 技术\ntags:\n - react\n---\n## 前言\n懂的小伙伴大概已经知道这是个什么了，那么不懂的小伙伴听我大致道来。也许你不甘心只写网页，也想写一个电脑上的exe程序那种；或者你有项目需求必须要写个exe程序，但是你只会前端，没关系，看了这篇文章你也就能写出一个exe程序了。\n<!--more-->\n## 一、安装electron\n - 为了方便以后使用，建议进行全局安装，这样任何文件夹下面就都能使用`electron`了。\n``` breach\n//安装命令\nnpm install electron  --g\n//npm如果太慢的话，我们就改用国内镜像，国内镜像安装如下:\nnpm install cnpm -g  --registry=https://registry.npm.taobao.org\ncnpm install electron --save\n```\n## 二、react使用electron\n\n### 添加electron包\n``` breach\nnpm install electron --save\n//安装打包工具\nnpm install electron-packager --save-dev\n```\n### 相关配置\n#### 配置main.js\n在项目根目录(不是src目录)下新建一个main.js，写入如下配置：\n``` breach\n//引入electron并创建一个BrowserWindow\nconst {app,BrowserWindow} = require(\"electron\");\nconst path = require(\"path\");\nconst url = require(\"path\");\n//保持window对象的全局引用，避免Javascript对象被垃圾回收时，窗口被自动关闭\nlet win;\n\nfunction createWindow(){\n //创建浏览器窗口，宽高随意\n  win = new BrowserWindow({width:800,height:600});\n \n //加载应用----  适用桌面应用\n /*win.loadURL(url.format({\n   pathname:path.join(_dirname+\"./build/index.html\"),\n   protocol:\"file:\"\n   slashes:true\n }))*/\n // 加载应用---- 适用react\n win.loadURL(\"http://localhost:3000/\");\n //打开开发者工具,默认不打开\n win.webContents.openDevTools();\n \n //关闭window时触发\n win.on(\"closed\",function(){\n   win = null\n })\n}\n//当electron初始化完成后并开始创建浏览器窗口时运行\napp.on(\"ready\",createWindow);\n\n//所有窗口关闭时，退出应用\napp.on(\"window-all-closed\",function({\n// macOS中除非用户按下 `Cmd + Q` 显式退出,否则应用与菜单栏始终处于活动状态.\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n}))\n\napp.on('activate', function () {\n   // macOS中点击Dock图标时没有已打开的其余应用窗口时,则通常在应用中重建一个窗口\n  if (win === null) {\n    createWindow()\n  }\n})\n```\n#### 配置package.json\n``` breach\n{\n  \"name\": \"platform\",\n  \"version\": \"1.0.0\",\n  \"description\": \"This is a food and beverage management system\",\n  \"main\": \"main.js\", //配置electron启动文件\n  \"homepage\": \".\", //配置electron打包后静态static不能访问\n  \"DEV\":false,\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"babel-node devServer.js --progress --colors\",\n    \"dist\": \"webpack --config webpack.config.pro.js --progress --colors \",\n    \"build\": \"webpack --progress\",\n    \"electron-start\": \"electron .\", //配置运行桌面应用指令\n    //配置打包为桌面应用指令\n    \"packager\": \"electron-packager ./ react-electron --win --out ~/ --electron-version 1.7.10\",\n    \"dev\": \"babel-node devServer.js --progress --colors ./node_modules/.bin/electron ./main\"\n  },\n```\n### 开始打包\n在项目根目录运行\n``` breach\nnpm run packager\n```\n\n","slug":"electron-packager","published":1,"updated":"2019-08-11T08:58:39.906Z","_id":"cjz6qgijh0002rou3fcrcuhk5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>懂的小伙伴大概已经知道这是个什么了，那么不懂的小伙伴听我大致道来。也许你不甘心只写网页，也想写一个电脑上的exe程序那种；或者你有项目需求必须要写个exe程序，但是你只会前端，没关系，看了这篇文章你也就能写出一个exe程序了。<br><a id=\"more\"></a></p>\n<h2 id=\"一、安装electron\"><a href=\"#一、安装electron\" class=\"headerlink\" title=\"一、安装electron\"></a>一、安装electron</h2><ul>\n<li>为了方便以后使用，建议进行全局安装，这样任何文件夹下面就都能使用<code>electron</code>了。<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装命令</span><br><span class=\"line\">npm install electron  --g</span><br><span class=\"line\">//npm如果太慢的话，我们就改用国内镜像，国内镜像安装如下:</span><br><span class=\"line\">npm install cnpm -g  --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">cnpm install electron --save</span><br></pre></td></tr></table></figure></div>\n</li>\n</ul>\n<h2 id=\"二、react使用electron\"><a href=\"#二、react使用electron\" class=\"headerlink\" title=\"二、react使用electron\"></a>二、react使用electron</h2><h3 id=\"添加electron包\"><a href=\"#添加electron包\" class=\"headerlink\" title=\"添加electron包\"></a>添加electron包</h3><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install electron --save</span><br><span class=\"line\">//安装打包工具</span><br><span class=\"line\">npm install electron-packager --save-dev</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h3><h4 id=\"配置main-js\"><a href=\"#配置main-js\" class=\"headerlink\" title=\"配置main.js\"></a>配置main.js</h4><p>在项目根目录(不是src目录)下新建一个main.js，写入如下配置：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引入electron并创建一个BrowserWindow</span><br><span class=\"line\">const &#123;app,BrowserWindow&#125; = require(&quot;electron&quot;);</span><br><span class=\"line\">const path = require(&quot;path&quot;);</span><br><span class=\"line\">const url = require(&quot;path&quot;);</span><br><span class=\"line\">//保持window对象的全局引用，避免Javascript对象被垃圾回收时，窗口被自动关闭</span><br><span class=\"line\">let win;</span><br><span class=\"line\"></span><br><span class=\"line\">function createWindow()&#123;</span><br><span class=\"line\"> //创建浏览器窗口，宽高随意</span><br><span class=\"line\">  win = new BrowserWindow(&#123;width:800,height:600&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> //加载应用----  适用桌面应用</span><br><span class=\"line\"> /*win.loadURL(url.format(&#123;</span><br><span class=\"line\">   pathname:path.join(_dirname+&quot;./build/index.html&quot;),</span><br><span class=\"line\">   protocol:&quot;file:&quot;</span><br><span class=\"line\">   slashes:true</span><br><span class=\"line\"> &#125;))*/</span><br><span class=\"line\"> // 加载应用---- 适用react</span><br><span class=\"line\"> win.loadURL(&quot;http://localhost:3000/&quot;);</span><br><span class=\"line\"> //打开开发者工具,默认不打开</span><br><span class=\"line\"> win.webContents.openDevTools();</span><br><span class=\"line\"> </span><br><span class=\"line\"> //关闭window时触发</span><br><span class=\"line\"> win.on(&quot;closed&quot;,function()&#123;</span><br><span class=\"line\">   win = null</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//当electron初始化完成后并开始创建浏览器窗口时运行</span><br><span class=\"line\">app.on(&quot;ready&quot;,createWindow);</span><br><span class=\"line\"></span><br><span class=\"line\">//所有窗口关闭时，退出应用</span><br><span class=\"line\">app.on(&quot;window-all-closed&quot;,function(&#123;</span><br><span class=\"line\">// macOS中除非用户按下 `Cmd + Q` 显式退出,否则应用与菜单栏始终处于活动状态.</span><br><span class=\"line\">  if (process.platform !== &apos;darwin&apos;) &#123;</span><br><span class=\"line\">    app.quit()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(&apos;activate&apos;, function () &#123;</span><br><span class=\"line\">   // macOS中点击Dock图标时没有已打开的其余应用窗口时,则通常在应用中重建一个窗口</span><br><span class=\"line\">  if (win === null) &#123;</span><br><span class=\"line\">    createWindow()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div></p>\n<h4 id=\"配置package-json\"><a href=\"#配置package-json\" class=\"headerlink\" title=\"配置package.json\"></a>配置package.json</h4><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;platform&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;This is a food and beverage management system&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;main.js&quot;, //配置electron启动文件</span><br><span class=\"line\">  &quot;homepage&quot;: &quot;.&quot;, //配置electron打包后静态static不能访问</span><br><span class=\"line\">  &quot;DEV&quot;:false,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;babel-node devServer.js --progress --colors&quot;,</span><br><span class=\"line\">    &quot;dist&quot;: &quot;webpack --config webpack.config.pro.js --progress --colors &quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;webpack --progress&quot;,</span><br><span class=\"line\">    &quot;electron-start&quot;: &quot;electron .&quot;, //配置运行桌面应用指令</span><br><span class=\"line\">    //配置打包为桌面应用指令</span><br><span class=\"line\">    &quot;packager&quot;: &quot;electron-packager ./ react-electron --win --out ~/ --electron-version 1.7.10&quot;,</span><br><span class=\"line\">    &quot;dev&quot;: &quot;babel-node devServer.js --progress --colors ./node_modules/.bin/electron ./main&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"开始打包\"><a href=\"#开始打包\" class=\"headerlink\" title=\"开始打包\"></a>开始打包</h3><p>在项目根目录运行<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run packager</span><br></pre></td></tr></table></figure></div></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>懂的小伙伴大概已经知道这是个什么了，那么不懂的小伙伴听我大致道来。也许你不甘心只写网页，也想写一个电脑上的exe程序那种；或者你有项目需求必须要写个exe程序，但是你只会前端，没关系，看了这篇文章你也就能写出一个exe程序了。<br>","more":"</p>\n<h2 id=\"一、安装electron\"><a href=\"#一、安装electron\" class=\"headerlink\" title=\"一、安装electron\"></a>一、安装electron</h2><ul>\n<li>为了方便以后使用，建议进行全局安装，这样任何文件夹下面就都能使用<code>electron</code>了。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装命令</span><br><span class=\"line\">npm install electron  --g</span><br><span class=\"line\">//npm如果太慢的话，我们就改用国内镜像，国内镜像安装如下:</span><br><span class=\"line\">npm install cnpm -g  --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">cnpm install electron --save</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"二、react使用electron\"><a href=\"#二、react使用electron\" class=\"headerlink\" title=\"二、react使用electron\"></a>二、react使用electron</h2><h3 id=\"添加electron包\"><a href=\"#添加electron包\" class=\"headerlink\" title=\"添加electron包\"></a>添加electron包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install electron --save</span><br><span class=\"line\">//安装打包工具</span><br><span class=\"line\">npm install electron-packager --save-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h3><h4 id=\"配置main-js\"><a href=\"#配置main-js\" class=\"headerlink\" title=\"配置main.js\"></a>配置main.js</h4><p>在项目根目录(不是src目录)下新建一个main.js，写入如下配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引入electron并创建一个BrowserWindow</span><br><span class=\"line\">const &#123;app,BrowserWindow&#125; = require(&quot;electron&quot;);</span><br><span class=\"line\">const path = require(&quot;path&quot;);</span><br><span class=\"line\">const url = require(&quot;path&quot;);</span><br><span class=\"line\">//保持window对象的全局引用，避免Javascript对象被垃圾回收时，窗口被自动关闭</span><br><span class=\"line\">let win;</span><br><span class=\"line\"></span><br><span class=\"line\">function createWindow()&#123;</span><br><span class=\"line\"> //创建浏览器窗口，宽高随意</span><br><span class=\"line\">  win = new BrowserWindow(&#123;width:800,height:600&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> //加载应用----  适用桌面应用</span><br><span class=\"line\"> /*win.loadURL(url.format(&#123;</span><br><span class=\"line\">   pathname:path.join(_dirname+&quot;./build/index.html&quot;),</span><br><span class=\"line\">   protocol:&quot;file:&quot;</span><br><span class=\"line\">   slashes:true</span><br><span class=\"line\"> &#125;))*/</span><br><span class=\"line\"> // 加载应用---- 适用react</span><br><span class=\"line\"> win.loadURL(&quot;http://localhost:3000/&quot;);</span><br><span class=\"line\"> //打开开发者工具,默认不打开</span><br><span class=\"line\"> win.webContents.openDevTools();</span><br><span class=\"line\"> </span><br><span class=\"line\"> //关闭window时触发</span><br><span class=\"line\"> win.on(&quot;closed&quot;,function()&#123;</span><br><span class=\"line\">   win = null</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//当electron初始化完成后并开始创建浏览器窗口时运行</span><br><span class=\"line\">app.on(&quot;ready&quot;,createWindow);</span><br><span class=\"line\"></span><br><span class=\"line\">//所有窗口关闭时，退出应用</span><br><span class=\"line\">app.on(&quot;window-all-closed&quot;,function(&#123;</span><br><span class=\"line\">// macOS中除非用户按下 `Cmd + Q` 显式退出,否则应用与菜单栏始终处于活动状态.</span><br><span class=\"line\">  if (process.platform !== &apos;darwin&apos;) &#123;</span><br><span class=\"line\">    app.quit()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(&apos;activate&apos;, function () &#123;</span><br><span class=\"line\">   // macOS中点击Dock图标时没有已打开的其余应用窗口时,则通常在应用中重建一个窗口</span><br><span class=\"line\">  if (win === null) &#123;</span><br><span class=\"line\">    createWindow()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"配置package-json\"><a href=\"#配置package-json\" class=\"headerlink\" title=\"配置package.json\"></a>配置package.json</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;platform&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;This is a food and beverage management system&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;main.js&quot;, //配置electron启动文件</span><br><span class=\"line\">  &quot;homepage&quot;: &quot;.&quot;, //配置electron打包后静态static不能访问</span><br><span class=\"line\">  &quot;DEV&quot;:false,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;babel-node devServer.js --progress --colors&quot;,</span><br><span class=\"line\">    &quot;dist&quot;: &quot;webpack --config webpack.config.pro.js --progress --colors &quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;webpack --progress&quot;,</span><br><span class=\"line\">    &quot;electron-start&quot;: &quot;electron .&quot;, //配置运行桌面应用指令</span><br><span class=\"line\">    //配置打包为桌面应用指令</span><br><span class=\"line\">    &quot;packager&quot;: &quot;electron-packager ./ react-electron --win --out ~/ --electron-version 1.7.10&quot;,</span><br><span class=\"line\">    &quot;dev&quot;: &quot;babel-node devServer.js --progress --colors ./node_modules/.bin/electron ./main&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"开始打包\"><a href=\"#开始打包\" class=\"headerlink\" title=\"开始打包\"></a>开始打包</h3><p>在项目根目录运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run packager</span><br></pre></td></tr></table></figure></p>"},{"title":"async-await","date":"2019-08-01T16:00:00.000Z","_content":"## 简介\n   `Asyns-Await`,异步编程的最高境界，就是根本不用担心它异步。`async`函数就是隧道尽头的亮光，大部分人会认为它是异步操作的终极解决方案。`async-await`和`promise`的关系，两者不存在谁代替谁，因为`async-await`寄生于`Promise`.`Generator`的语法糖。`async`和`await`在干什么？`async`用于申明一个`function`函数是异步的，而`await`可以认为是`async await`的简写，等待一个异步函数执行完成。\n## 基本用法\n``` breach\nasync function demo(params){\n  \n}\n//async 函数返回的是一个Promise对象\ndemo();\n```\n<!--more-->\n## 规则\n  \n - async表示这是一个async函数，await只能用在这个函数里面。\n - await表示这里等待promise返回结果后，再继续执行。\n - await后面应该跟着一个promise对象（普通函数亦可，但await就无意义了）。\n - await不能单独使用，必须搭配aync函数来使用。\n - await等待的虽然是一个promise对象，但是不必写.then(...),直接可以得到返回值。\n``` breach\nasync function demo(params){\n   let result = await Promise.resolve(123);\n   console.log(result)\n}\n\ndemo();\n```\n## 捕捉错误\n像`Promise`有`.then(...),.catch(...)`来捕捉正确与错误，而`async`这两个都不用写，那么我们就可以直接用标准的`try catch`语法捕捉错误。\n``` breach\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            // 模拟出错了，返回 ‘error’\n            reject('error');\n        }, time);\n    })\n};\n\nlet start = async function () {\n    try {\n        console.log('start');\n        await sleep(3000); // 这里得到了一个返回错误\n        \n        // 所以以下代码不会被执行了\n        console.log('end');\n    } catch (err) {\n        console.log(err); // 这里捕捉到错误 `error`\n    }\n};\n```\n## 循环多个await\n`await`看起来像是同步代码,所以写在for循环内，不必担心需要闭包才能解决。\n``` breach\n..省略以上代码\n\nlet start = async function () {\n    for (let i = 1; i <= 10; i++) {\n        console.log(`当前是第${i}次等待..`);\n        await sleep(1000);\n    }\n};\n```\n\n\n","source":"_posts/async-await.md","raw":"---\ntitle: async-await\ndate: 2019-08-02\ncategories:\n - 技术\ntags:\n - js\n---\n## 简介\n   `Asyns-Await`,异步编程的最高境界，就是根本不用担心它异步。`async`函数就是隧道尽头的亮光，大部分人会认为它是异步操作的终极解决方案。`async-await`和`promise`的关系，两者不存在谁代替谁，因为`async-await`寄生于`Promise`.`Generator`的语法糖。`async`和`await`在干什么？`async`用于申明一个`function`函数是异步的，而`await`可以认为是`async await`的简写，等待一个异步函数执行完成。\n## 基本用法\n``` breach\nasync function demo(params){\n  \n}\n//async 函数返回的是一个Promise对象\ndemo();\n```\n<!--more-->\n## 规则\n  \n - async表示这是一个async函数，await只能用在这个函数里面。\n - await表示这里等待promise返回结果后，再继续执行。\n - await后面应该跟着一个promise对象（普通函数亦可，但await就无意义了）。\n - await不能单独使用，必须搭配aync函数来使用。\n - await等待的虽然是一个promise对象，但是不必写.then(...),直接可以得到返回值。\n``` breach\nasync function demo(params){\n   let result = await Promise.resolve(123);\n   console.log(result)\n}\n\ndemo();\n```\n## 捕捉错误\n像`Promise`有`.then(...),.catch(...)`来捕捉正确与错误，而`async`这两个都不用写，那么我们就可以直接用标准的`try catch`语法捕捉错误。\n``` breach\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            // 模拟出错了，返回 ‘error’\n            reject('error');\n        }, time);\n    })\n};\n\nlet start = async function () {\n    try {\n        console.log('start');\n        await sleep(3000); // 这里得到了一个返回错误\n        \n        // 所以以下代码不会被执行了\n        console.log('end');\n    } catch (err) {\n        console.log(err); // 这里捕捉到错误 `error`\n    }\n};\n```\n## 循环多个await\n`await`看起来像是同步代码,所以写在for循环内，不必担心需要闭包才能解决。\n``` breach\n..省略以上代码\n\nlet start = async function () {\n    for (let i = 1; i <= 10; i++) {\n        console.log(`当前是第${i}次等待..`);\n        await sleep(1000);\n    }\n};\n```\n\n\n","slug":"async-await","published":1,"updated":"2019-08-11T08:59:17.742Z","_id":"cjz6qgijp0006rou31n7kr7ua","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>   <code>Asyns-Await</code>,异步编程的最高境界，就是根本不用担心它异步。<code>async</code>函数就是隧道尽头的亮光，大部分人会认为它是异步操作的终极解决方案。<code>async-await</code>和<code>promise</code>的关系，两者不存在谁代替谁，因为<code>async-await</code>寄生于<code>Promise</code>.<code>Generator</code>的语法糖。<code>async</code>和<code>await</code>在干什么？<code>async</code>用于申明一个<code>function</code>函数是异步的，而<code>await</code>可以认为是<code>async await</code>的简写，等待一个异步函数执行完成。</p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function demo(params)&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//async 函数返回的是一个Promise对象</span><br><span class=\"line\">demo();</span><br></pre></td></tr></table></figure></div>\n<a id=\"more\"></a>\n<h2 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h2><ul>\n<li>async表示这是一个async函数，await只能用在这个函数里面。</li>\n<li>await表示这里等待promise返回结果后，再继续执行。</li>\n<li>await后面应该跟着一个promise对象（普通函数亦可，但await就无意义了）。</li>\n<li>await不能单独使用，必须搭配aync函数来使用。</li>\n<li>await等待的虽然是一个promise对象，但是不必写.then(…),直接可以得到返回值。<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function demo(params)&#123;</span><br><span class=\"line\">   let result = await Promise.resolve(123);</span><br><span class=\"line\">   console.log(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">demo();</span><br></pre></td></tr></table></figure></div>\n</li>\n</ul>\n<h2 id=\"捕捉错误\"><a href=\"#捕捉错误\" class=\"headerlink\" title=\"捕捉错误\"></a>捕捉错误</h2><p>像<code>Promise</code>有<code>.then(...),.catch(...)</code>来捕捉正确与错误，而<code>async</code>这两个都不用写，那么我们就可以直接用标准的<code>try catch</code>语法捕捉错误。<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let sleep = function (time) &#123;</span><br><span class=\"line\">    return new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">        setTimeout(function () &#123;</span><br><span class=\"line\">            // 模拟出错了，返回 ‘error’</span><br><span class=\"line\">            reject(&apos;error&apos;);</span><br><span class=\"line\">        &#125;, time);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">let start = async function () &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        console.log(&apos;start&apos;);</span><br><span class=\"line\">        await sleep(3000); // 这里得到了一个返回错误</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 所以以下代码不会被执行了</span><br><span class=\"line\">        console.log(&apos;end&apos;);</span><br><span class=\"line\">    &#125; catch (err) &#123;</span><br><span class=\"line\">        console.log(err); // 这里捕捉到错误 `error`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"循环多个await\"><a href=\"#循环多个await\" class=\"headerlink\" title=\"循环多个await\"></a>循环多个await</h2><p><code>await</code>看起来像是同步代码,所以写在for循环内，不必担心需要闭包才能解决。<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..省略以上代码</span><br><span class=\"line\"></span><br><span class=\"line\">let start = async function () &#123;</span><br><span class=\"line\">    for (let i = 1; i &lt;= 10; i++) &#123;</span><br><span class=\"line\">        console.log(`当前是第$&#123;i&#125;次等待..`);</span><br><span class=\"line\">        await sleep(1000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>   <code>Asyns-Await</code>,异步编程的最高境界，就是根本不用担心它异步。<code>async</code>函数就是隧道尽头的亮光，大部分人会认为它是异步操作的终极解决方案。<code>async-await</code>和<code>promise</code>的关系，两者不存在谁代替谁，因为<code>async-await</code>寄生于<code>Promise</code>.<code>Generator</code>的语法糖。<code>async</code>和<code>await</code>在干什么？<code>async</code>用于申明一个<code>function</code>函数是异步的，而<code>await</code>可以认为是<code>async await</code>的简写，等待一个异步函数执行完成。</p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function demo(params)&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//async 函数返回的是一个Promise对象</span><br><span class=\"line\">demo();</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h2><ul>\n<li>async表示这是一个async函数，await只能用在这个函数里面。</li>\n<li>await表示这里等待promise返回结果后，再继续执行。</li>\n<li>await后面应该跟着一个promise对象（普通函数亦可，但await就无意义了）。</li>\n<li>await不能单独使用，必须搭配aync函数来使用。</li>\n<li>await等待的虽然是一个promise对象，但是不必写.then(…),直接可以得到返回值。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function demo(params)&#123;</span><br><span class=\"line\">   let result = await Promise.resolve(123);</span><br><span class=\"line\">   console.log(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">demo();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"捕捉错误\"><a href=\"#捕捉错误\" class=\"headerlink\" title=\"捕捉错误\"></a>捕捉错误</h2><p>像<code>Promise</code>有<code>.then(...),.catch(...)</code>来捕捉正确与错误，而<code>async</code>这两个都不用写，那么我们就可以直接用标准的<code>try catch</code>语法捕捉错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let sleep = function (time) &#123;</span><br><span class=\"line\">    return new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">        setTimeout(function () &#123;</span><br><span class=\"line\">            // 模拟出错了，返回 ‘error’</span><br><span class=\"line\">            reject(&apos;error&apos;);</span><br><span class=\"line\">        &#125;, time);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">let start = async function () &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        console.log(&apos;start&apos;);</span><br><span class=\"line\">        await sleep(3000); // 这里得到了一个返回错误</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 所以以下代码不会被执行了</span><br><span class=\"line\">        console.log(&apos;end&apos;);</span><br><span class=\"line\">    &#125; catch (err) &#123;</span><br><span class=\"line\">        console.log(err); // 这里捕捉到错误 `error`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"循环多个await\"><a href=\"#循环多个await\" class=\"headerlink\" title=\"循环多个await\"></a>循环多个await</h2><p><code>await</code>看起来像是同步代码,所以写在for循环内，不必担心需要闭包才能解决。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..省略以上代码</span><br><span class=\"line\"></span><br><span class=\"line\">let start = async function () &#123;</span><br><span class=\"line\">    for (let i = 1; i &lt;= 10; i++) &#123;</span><br><span class=\"line\">        console.log(`当前是第$&#123;i&#125;次等待..`);</span><br><span class=\"line\">        await sleep(1000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>"},{"title":"for循环应该这么用","date":"2019-03-04T16:00:00.000Z","_content":"从最开始学的for循环的遍历方法，再到后来连续不断出来的各种循环遍历方法，其实最大的区别就是应用的场景不同。而我们需要知道的是，什么情况下用哪一种方法合适\n\n---\n\n<!--more-->\n下面我就以例子介绍每种方法再什么情况下用最合适：\n``` breach\nlet arr = [\n {id:\"1\",money:10},\n {id:\"2\",money:30},\n {id:\"3\",money:40},\n {id:\"4\",money:50},\n {id:\"5\",money:60},\n {id:\"6\",money:80}\n];\n```\n## 1.给每一组数据的`money`都增大一点\n这个时候可用到`forEach`方法:\n``` breach\narr.forEach(item => { item.money += 10 }));\n```\n`map`方法它说它也可以:\n``` breach\narr.map(item => { item.money += 10 });\n```\n`map`补充说，我还可以给你把money统计成一个新的数组给你；\n``` breach\nlet money = arr.map(item => { return item.money += 10 });\n//[20,40,50,60,70,90]\n```\n###`forEach`和`map`最大的区别就在于`forEach`没有返回值。\n## 2.只要这组数据中money大于50的数据（筛选）\n从题目看就知道，筛选这种事一般都是`filter`来做的:\n``` breach\nlet filones = arr.filter(item => { return item.money>=50 });\n//[{id:\"4\",money:50},{id:\"5\",money:60},{id:\"6\",money:80}]\n```\n## 3.这组数据中有money大于50的么 （有符合）\n这题意思就是，这组数据只要有money大于50的就符合，这个时候`some`就很有用了：\n``` breach\nlet flag = arr.some(item => { return item.money>50 });\n//true\n```\n`some`它会去遍历查找满足条件的，当第一条就符合的时候，就会立即返回告诉你有符合的了，后面的就不用检查了。\n## 4.这组数据中money全是大于50的么？\n这个时候every就想知道这组数据中难道每条都大于50？\n``` breach\nlet flag = arr.every(item => {return item.money>50 })\n//false\n```\n当每条数据都要去检查的时候，像这样会非常耗费性能;我们可以考虑反向检查，通过`some`检查是否有小于50的数据，再取反。\n``` breach\nlet flag = !arr.some(item => {return item.money<50 });\n//false\n```\n## 5.这组数据money总和是多少呢\n我们可以先通过用`map`将`money`取出来，再用`reduce`计算其总和。\n``` breach\nlet moneys = arr.map(item => {return item.money });\nlet sum = moneys.reduce((sum,moneys)=>{ return moneys+sum},0)\n```","source":"_posts/for.md","raw":"---\ntitle: for循环应该这么用\ndate: 2019-03-05\ncategories:\n - 技术\ntags:\n - js\n---\n从最开始学的for循环的遍历方法，再到后来连续不断出来的各种循环遍历方法，其实最大的区别就是应用的场景不同。而我们需要知道的是，什么情况下用哪一种方法合适\n\n---\n\n<!--more-->\n下面我就以例子介绍每种方法再什么情况下用最合适：\n``` breach\nlet arr = [\n {id:\"1\",money:10},\n {id:\"2\",money:30},\n {id:\"3\",money:40},\n {id:\"4\",money:50},\n {id:\"5\",money:60},\n {id:\"6\",money:80}\n];\n```\n## 1.给每一组数据的`money`都增大一点\n这个时候可用到`forEach`方法:\n``` breach\narr.forEach(item => { item.money += 10 }));\n```\n`map`方法它说它也可以:\n``` breach\narr.map(item => { item.money += 10 });\n```\n`map`补充说，我还可以给你把money统计成一个新的数组给你；\n``` breach\nlet money = arr.map(item => { return item.money += 10 });\n//[20,40,50,60,70,90]\n```\n###`forEach`和`map`最大的区别就在于`forEach`没有返回值。\n## 2.只要这组数据中money大于50的数据（筛选）\n从题目看就知道，筛选这种事一般都是`filter`来做的:\n``` breach\nlet filones = arr.filter(item => { return item.money>=50 });\n//[{id:\"4\",money:50},{id:\"5\",money:60},{id:\"6\",money:80}]\n```\n## 3.这组数据中有money大于50的么 （有符合）\n这题意思就是，这组数据只要有money大于50的就符合，这个时候`some`就很有用了：\n``` breach\nlet flag = arr.some(item => { return item.money>50 });\n//true\n```\n`some`它会去遍历查找满足条件的，当第一条就符合的时候，就会立即返回告诉你有符合的了，后面的就不用检查了。\n## 4.这组数据中money全是大于50的么？\n这个时候every就想知道这组数据中难道每条都大于50？\n``` breach\nlet flag = arr.every(item => {return item.money>50 })\n//false\n```\n当每条数据都要去检查的时候，像这样会非常耗费性能;我们可以考虑反向检查，通过`some`检查是否有小于50的数据，再取反。\n``` breach\nlet flag = !arr.some(item => {return item.money<50 });\n//false\n```\n## 5.这组数据money总和是多少呢\n我们可以先通过用`map`将`money`取出来，再用`reduce`计算其总和。\n``` breach\nlet moneys = arr.map(item => {return item.money });\nlet sum = moneys.reduce((sum,moneys)=>{ return moneys+sum},0)\n```","slug":"for","published":1,"updated":"2019-08-11T08:58:21.460Z","_id":"cjz6qgijr0007rou3sl8t7ixa","comments":1,"layout":"post","photos":[],"link":"","content":"<p>从最开始学的for循环的遍历方法，再到后来连续不断出来的各种循环遍历方法，其实最大的区别就是应用的场景不同。而我们需要知道的是，什么情况下用哪一种方法合适</p>\n<hr>\n<a id=\"more\"></a>\n<p>下面我就以例子介绍每种方法再什么情况下用最合适：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [</span><br><span class=\"line\"> &#123;id:&quot;1&quot;,money:10&#125;,</span><br><span class=\"line\"> &#123;id:&quot;2&quot;,money:30&#125;,</span><br><span class=\"line\"> &#123;id:&quot;3&quot;,money:40&#125;,</span><br><span class=\"line\"> &#123;id:&quot;4&quot;,money:50&#125;,</span><br><span class=\"line\"> &#123;id:&quot;5&quot;,money:60&#125;,</span><br><span class=\"line\"> &#123;id:&quot;6&quot;,money:80&#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"1-给每一组数据的money都增大一点\"><a href=\"#1-给每一组数据的money都增大一点\" class=\"headerlink\" title=\"1.给每一组数据的money都增大一点\"></a>1.给每一组数据的<code>money</code>都增大一点</h2><p>这个时候可用到<code>forEach</code>方法:<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(item =&gt; &#123; item.money += 10 &#125;));</span><br></pre></td></tr></table></figure></div></p>\n<p><code>map</code>方法它说它也可以:<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.map(item =&gt; &#123; item.money += 10 &#125;);</span><br></pre></td></tr></table></figure></div></p>\n<p><code>map</code>补充说，我还可以给你把money统计成一个新的数组给你；<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let money = arr.map(item =&gt; &#123; return item.money += 10 &#125;);</span><br><span class=\"line\">//[20,40,50,60,70,90]</span><br></pre></td></tr></table></figure></div></p>\n<p>###<code>forEach</code>和<code>map</code>最大的区别就在于<code>forEach</code>没有返回值。</p>\n<h2 id=\"2-只要这组数据中money大于50的数据（筛选）\"><a href=\"#2-只要这组数据中money大于50的数据（筛选）\" class=\"headerlink\" title=\"2.只要这组数据中money大于50的数据（筛选）\"></a>2.只要这组数据中money大于50的数据（筛选）</h2><p>从题目看就知道，筛选这种事一般都是<code>filter</code>来做的:<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let filones = arr.filter(item =&gt; &#123; return item.money&gt;=50 &#125;);</span><br><span class=\"line\">//[&#123;id:&quot;4&quot;,money:50&#125;,&#123;id:&quot;5&quot;,money:60&#125;,&#123;id:&quot;6&quot;,money:80&#125;]</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"3-这组数据中有money大于50的么-（有符合）\"><a href=\"#3-这组数据中有money大于50的么-（有符合）\" class=\"headerlink\" title=\"3.这组数据中有money大于50的么 （有符合）\"></a>3.这组数据中有money大于50的么 （有符合）</h2><p>这题意思就是，这组数据只要有money大于50的就符合，这个时候<code>some</code>就很有用了：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let flag = arr.some(item =&gt; &#123; return item.money&gt;50 &#125;);</span><br><span class=\"line\">//true</span><br></pre></td></tr></table></figure></div></p>\n<p><code>some</code>它会去遍历查找满足条件的，当第一条就符合的时候，就会立即返回告诉你有符合的了，后面的就不用检查了。</p>\n<h2 id=\"4-这组数据中money全是大于50的么？\"><a href=\"#4-这组数据中money全是大于50的么？\" class=\"headerlink\" title=\"4.这组数据中money全是大于50的么？\"></a>4.这组数据中money全是大于50的么？</h2><p>这个时候every就想知道这组数据中难道每条都大于50？<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let flag = arr.every(item =&gt; &#123;return item.money&gt;50 &#125;)</span><br><span class=\"line\">//false</span><br></pre></td></tr></table></figure></div></p>\n<p>当每条数据都要去检查的时候，像这样会非常耗费性能;我们可以考虑反向检查，通过<code>some</code>检查是否有小于50的数据，再取反。<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let flag = !arr.some(item =&gt; &#123;return item.money&lt;50 &#125;);</span><br><span class=\"line\">//false</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"5-这组数据money总和是多少呢\"><a href=\"#5-这组数据money总和是多少呢\" class=\"headerlink\" title=\"5.这组数据money总和是多少呢\"></a>5.这组数据money总和是多少呢</h2><p>我们可以先通过用<code>map</code>将<code>money</code>取出来，再用<code>reduce</code>计算其总和。<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let moneys = arr.map(item =&gt; &#123;return item.money &#125;);</span><br><span class=\"line\">let sum = moneys.reduce((sum,moneys)=&gt;&#123; return moneys+sum&#125;,0)</span><br></pre></td></tr></table></figure></div></p>\n","site":{"data":{}},"excerpt":"<p>从最开始学的for循环的遍历方法，再到后来连续不断出来的各种循环遍历方法，其实最大的区别就是应用的场景不同。而我们需要知道的是，什么情况下用哪一种方法合适</p>\n<hr>","more":"<p>下面我就以例子介绍每种方法再什么情况下用最合适：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [</span><br><span class=\"line\"> &#123;id:&quot;1&quot;,money:10&#125;,</span><br><span class=\"line\"> &#123;id:&quot;2&quot;,money:30&#125;,</span><br><span class=\"line\"> &#123;id:&quot;3&quot;,money:40&#125;,</span><br><span class=\"line\"> &#123;id:&quot;4&quot;,money:50&#125;,</span><br><span class=\"line\"> &#123;id:&quot;5&quot;,money:60&#125;,</span><br><span class=\"line\"> &#123;id:&quot;6&quot;,money:80&#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"1-给每一组数据的money都增大一点\"><a href=\"#1-给每一组数据的money都增大一点\" class=\"headerlink\" title=\"1.给每一组数据的money都增大一点\"></a>1.给每一组数据的<code>money</code>都增大一点</h2><p>这个时候可用到<code>forEach</code>方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(item =&gt; &#123; item.money += 10 &#125;));</span><br></pre></td></tr></table></figure></p>\n<p><code>map</code>方法它说它也可以:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.map(item =&gt; &#123; item.money += 10 &#125;);</span><br></pre></td></tr></table></figure></p>\n<p><code>map</code>补充说，我还可以给你把money统计成一个新的数组给你；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let money = arr.map(item =&gt; &#123; return item.money += 10 &#125;);</span><br><span class=\"line\">//[20,40,50,60,70,90]</span><br></pre></td></tr></table></figure></p>\n<p>###<code>forEach</code>和<code>map</code>最大的区别就在于<code>forEach</code>没有返回值。</p>\n<h2 id=\"2-只要这组数据中money大于50的数据（筛选）\"><a href=\"#2-只要这组数据中money大于50的数据（筛选）\" class=\"headerlink\" title=\"2.只要这组数据中money大于50的数据（筛选）\"></a>2.只要这组数据中money大于50的数据（筛选）</h2><p>从题目看就知道，筛选这种事一般都是<code>filter</code>来做的:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let filones = arr.filter(item =&gt; &#123; return item.money&gt;=50 &#125;);</span><br><span class=\"line\">//[&#123;id:&quot;4&quot;,money:50&#125;,&#123;id:&quot;5&quot;,money:60&#125;,&#123;id:&quot;6&quot;,money:80&#125;]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-这组数据中有money大于50的么-（有符合）\"><a href=\"#3-这组数据中有money大于50的么-（有符合）\" class=\"headerlink\" title=\"3.这组数据中有money大于50的么 （有符合）\"></a>3.这组数据中有money大于50的么 （有符合）</h2><p>这题意思就是，这组数据只要有money大于50的就符合，这个时候<code>some</code>就很有用了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let flag = arr.some(item =&gt; &#123; return item.money&gt;50 &#125;);</span><br><span class=\"line\">//true</span><br></pre></td></tr></table></figure></p>\n<p><code>some</code>它会去遍历查找满足条件的，当第一条就符合的时候，就会立即返回告诉你有符合的了，后面的就不用检查了。</p>\n<h2 id=\"4-这组数据中money全是大于50的么？\"><a href=\"#4-这组数据中money全是大于50的么？\" class=\"headerlink\" title=\"4.这组数据中money全是大于50的么？\"></a>4.这组数据中money全是大于50的么？</h2><p>这个时候every就想知道这组数据中难道每条都大于50？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let flag = arr.every(item =&gt; &#123;return item.money&gt;50 &#125;)</span><br><span class=\"line\">//false</span><br></pre></td></tr></table></figure></p>\n<p>当每条数据都要去检查的时候，像这样会非常耗费性能;我们可以考虑反向检查，通过<code>some</code>检查是否有小于50的数据，再取反。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let flag = !arr.some(item =&gt; &#123;return item.money&lt;50 &#125;);</span><br><span class=\"line\">//false</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-这组数据money总和是多少呢\"><a href=\"#5-这组数据money总和是多少呢\" class=\"headerlink\" title=\"5.这组数据money总和是多少呢\"></a>5.这组数据money总和是多少呢</h2><p>我们可以先通过用<code>map</code>将<code>money</code>取出来，再用<code>reduce</code>计算其总和。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let moneys = arr.map(item =&gt; &#123;return item.money &#125;);</span><br><span class=\"line\">let sum = moneys.reduce((sum,moneys)=&gt;&#123; return moneys+sum&#125;,0)</span><br></pre></td></tr></table></figure></p>"},{"title":"代码评审清单","date":"2018-12-11T16:00:00.000Z","_content":"## 前言\n#### 前端团队根据情况有时候会有评审代码的要求，但是由于每个开发人员的技术水平不同，代码风格不同，所关注的技术点也不同，为了保证代码的质量以及团队的代码风格统一，因此产生了团队中的CodeReview,为此拟了一份清单,如果你的团队还没有CodeReview，可能这正是你需要的。\n## 一、代码静态检查工具\n### 1.1、使用eslint工具对javascript代码进行检查。\n`eslint`检查的规范继承自`eslint-config-standard`检验规则。\n<!--more-->\n### 1.2、使用stylelint工具对css样式代码进行检查。\n`stylelint`检查的规范继承自`stylelint-config-standard`检验规则。\n## 二、命名规范\n### 2.1、JS采用Camel Case小驼峰命名\n推荐：\n``` breach\n studentInfo\n```\n### 2.2、避免名称冗余\n推荐：\n``` breach\nconst Car = {\n  money:123,\n  color:\"red\",\n  name:\"大地\"\n}\n```\n不推荐：\n``` breac\nconst Car = {\n  Carmoney:123,\n  Carcolor:\"red\",\n  Carname:\"大地\"\n}\n```\n### 2.3、CSS类名采用BEM命名规范\n``` breach\n.block_element{}     // 代表块block元素中的子元素element\n.block--modifier{}  //  代表块block元素的状态\n```\n### 2.4、命名符合语义化\n命名需要符合语义化，如果是函数命名可以采用加上动词前缀\n动词      含义\ncan       判断是否可以执行某个动作\nhas       判断是否含有某一个值\nis          判断是否为某一个值\nget        获取某一个值\nset        设置某一个值\n推荐：\n``` breach\n// 是否显示\nfunction canShow(){\n\n}\n// 设置名称\nfunction setName(){\n\n}\n```\n## 三、JS推荐写法\n### 3.1、每个常量都需要命名\n每个常量应该命名，不然看代码的人不知道这个常量的意思。\n推荐：\n``` breach\nconst COL_NUM = 10\nlet row = Math.ceil(num/COL_NUM)\n```\n不推荐：\n``` breach\nlet row = Math.ceil(num/10)\n```\n### 3.2、推荐使用字面量\n创建对象和数组推荐使用字面量，因为这不仅是性能最优也有助于节省代码量。\n推荐：\n``` breach\nlet obj = {\n   name:\"tonny\",\n   age:12,\n   sex:\"男\"\n}\n```\n不推荐：\n``` breach\nlet obj = {}\nobj.name = \"tonny\"\nobj.age = 12\nobj.sex = \"男\"\n```\n### 3.3、 函数参数\n函数参数越少越好，如果参数超过两个，要使用 ES6的解构语法，不用考虑参数的顺序。\n推荐：\n``` breach\nfunction createMenu({title,name,value,label}){\n\n}\ncreateMenu({\n  title:\"ad\",\n  name:\"tonny\",\n  value:\"123\",\n  label:\"button\"\n})\n```\n不推荐：\n``` breach\nfunction createMenu(title,name,value,label){\n\n}\n```\n### 3.4、使用参数默认值，代替使用条件语句进行赋值\n推荐：\n``` breach\nfunction create(name=\"abc\"){\n\n}\n```\n不推荐：\n``` breach\nfunction create(name){\n  let newName = name || \"abc\"\n}\n```\n### 3.5、推荐使用函数式编程\n函数式编程可以让代码的逻辑更清晰更优雅，方便测试\n推荐：\n``` breach\nconst menu = [\n {name:\"a\",size:1},\n {name:\"b\",size:2},\n {name:\"c\",size:3}\n]\nlet sumMenu = menu.map(item => item.size).reduce((prevsize,nextsize)=> previse+nextsize,0);\n```\n不推荐：\n``` breach\nlet sum = 0;\nfor(let i=0;i<menu.length;i++){\n  sum+=menu[i].size;\n}\n```","source":"_posts/CodecheckList.md","raw":"---\ntitle: 代码评审清单\ndate: 2018-12-12\ncategories:\n - 技术\ntags:\n - js\n---\n## 前言\n#### 前端团队根据情况有时候会有评审代码的要求，但是由于每个开发人员的技术水平不同，代码风格不同，所关注的技术点也不同，为了保证代码的质量以及团队的代码风格统一，因此产生了团队中的CodeReview,为此拟了一份清单,如果你的团队还没有CodeReview，可能这正是你需要的。\n## 一、代码静态检查工具\n### 1.1、使用eslint工具对javascript代码进行检查。\n`eslint`检查的规范继承自`eslint-config-standard`检验规则。\n<!--more-->\n### 1.2、使用stylelint工具对css样式代码进行检查。\n`stylelint`检查的规范继承自`stylelint-config-standard`检验规则。\n## 二、命名规范\n### 2.1、JS采用Camel Case小驼峰命名\n推荐：\n``` breach\n studentInfo\n```\n### 2.2、避免名称冗余\n推荐：\n``` breach\nconst Car = {\n  money:123,\n  color:\"red\",\n  name:\"大地\"\n}\n```\n不推荐：\n``` breac\nconst Car = {\n  Carmoney:123,\n  Carcolor:\"red\",\n  Carname:\"大地\"\n}\n```\n### 2.3、CSS类名采用BEM命名规范\n``` breach\n.block_element{}     // 代表块block元素中的子元素element\n.block--modifier{}  //  代表块block元素的状态\n```\n### 2.4、命名符合语义化\n命名需要符合语义化，如果是函数命名可以采用加上动词前缀\n动词      含义\ncan       判断是否可以执行某个动作\nhas       判断是否含有某一个值\nis          判断是否为某一个值\nget        获取某一个值\nset        设置某一个值\n推荐：\n``` breach\n// 是否显示\nfunction canShow(){\n\n}\n// 设置名称\nfunction setName(){\n\n}\n```\n## 三、JS推荐写法\n### 3.1、每个常量都需要命名\n每个常量应该命名，不然看代码的人不知道这个常量的意思。\n推荐：\n``` breach\nconst COL_NUM = 10\nlet row = Math.ceil(num/COL_NUM)\n```\n不推荐：\n``` breach\nlet row = Math.ceil(num/10)\n```\n### 3.2、推荐使用字面量\n创建对象和数组推荐使用字面量，因为这不仅是性能最优也有助于节省代码量。\n推荐：\n``` breach\nlet obj = {\n   name:\"tonny\",\n   age:12,\n   sex:\"男\"\n}\n```\n不推荐：\n``` breach\nlet obj = {}\nobj.name = \"tonny\"\nobj.age = 12\nobj.sex = \"男\"\n```\n### 3.3、 函数参数\n函数参数越少越好，如果参数超过两个，要使用 ES6的解构语法，不用考虑参数的顺序。\n推荐：\n``` breach\nfunction createMenu({title,name,value,label}){\n\n}\ncreateMenu({\n  title:\"ad\",\n  name:\"tonny\",\n  value:\"123\",\n  label:\"button\"\n})\n```\n不推荐：\n``` breach\nfunction createMenu(title,name,value,label){\n\n}\n```\n### 3.4、使用参数默认值，代替使用条件语句进行赋值\n推荐：\n``` breach\nfunction create(name=\"abc\"){\n\n}\n```\n不推荐：\n``` breach\nfunction create(name){\n  let newName = name || \"abc\"\n}\n```\n### 3.5、推荐使用函数式编程\n函数式编程可以让代码的逻辑更清晰更优雅，方便测试\n推荐：\n``` breach\nconst menu = [\n {name:\"a\",size:1},\n {name:\"b\",size:2},\n {name:\"c\",size:3}\n]\nlet sumMenu = menu.map(item => item.size).reduce((prevsize,nextsize)=> previse+nextsize,0);\n```\n不推荐：\n``` breach\nlet sum = 0;\nfor(let i=0;i<menu.length;i++){\n  sum+=menu[i].size;\n}\n```","slug":"CodecheckList","published":1,"updated":"2019-08-11T08:58:50.278Z","_id":"cjz6qgijt0008rou3pkrgkhsb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h4 id=\"前端团队根据情况有时候会有评审代码的要求，但是由于每个开发人员的技术水平不同，代码风格不同，所关注的技术点也不同，为了保证代码的质量以及团队的代码风格统一，因此产生了团队中的CodeReview-为此拟了一份清单-如果你的团队还没有CodeReview，可能这正是你需要的。\"><a href=\"#前端团队根据情况有时候会有评审代码的要求，但是由于每个开发人员的技术水平不同，代码风格不同，所关注的技术点也不同，为了保证代码的质量以及团队的代码风格统一，因此产生了团队中的CodeReview-为此拟了一份清单-如果你的团队还没有CodeReview，可能这正是你需要的。\" class=\"headerlink\" title=\"前端团队根据情况有时候会有评审代码的要求，但是由于每个开发人员的技术水平不同，代码风格不同，所关注的技术点也不同，为了保证代码的质量以及团队的代码风格统一，因此产生了团队中的CodeReview,为此拟了一份清单,如果你的团队还没有CodeReview，可能这正是你需要的。\"></a>前端团队根据情况有时候会有评审代码的要求，但是由于每个开发人员的技术水平不同，代码风格不同，所关注的技术点也不同，为了保证代码的质量以及团队的代码风格统一，因此产生了团队中的CodeReview,为此拟了一份清单,如果你的团队还没有CodeReview，可能这正是你需要的。</h4><h2 id=\"一、代码静态检查工具\"><a href=\"#一、代码静态检查工具\" class=\"headerlink\" title=\"一、代码静态检查工具\"></a>一、代码静态检查工具</h2><h3 id=\"1-1、使用eslint工具对javascript代码进行检查。\"><a href=\"#1-1、使用eslint工具对javascript代码进行检查。\" class=\"headerlink\" title=\"1.1、使用eslint工具对javascript代码进行检查。\"></a>1.1、使用eslint工具对javascript代码进行检查。</h3><p><code>eslint</code>检查的规范继承自<code>eslint-config-standard</code>检验规则。<br><a id=\"more\"></a></p>\n<h3 id=\"1-2、使用stylelint工具对css样式代码进行检查。\"><a href=\"#1-2、使用stylelint工具对css样式代码进行检查。\" class=\"headerlink\" title=\"1.2、使用stylelint工具对css样式代码进行检查。\"></a>1.2、使用stylelint工具对css样式代码进行检查。</h3><p><code>stylelint</code>检查的规范继承自<code>stylelint-config-standard</code>检验规则。</p>\n<h2 id=\"二、命名规范\"><a href=\"#二、命名规范\" class=\"headerlink\" title=\"二、命名规范\"></a>二、命名规范</h2><h3 id=\"2-1、JS采用Camel-Case小驼峰命名\"><a href=\"#2-1、JS采用Camel-Case小驼峰命名\" class=\"headerlink\" title=\"2.1、JS采用Camel Case小驼峰命名\"></a>2.1、JS采用Camel Case小驼峰命名</h3><p>推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">studentInfo</span><br></pre></td></tr></table></figure></div></p>\n<h3 id=\"2-2、避免名称冗余\"><a href=\"#2-2、避免名称冗余\" class=\"headerlink\" title=\"2.2、避免名称冗余\"></a>2.2、避免名称冗余</h3><p>推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Car = &#123;</span><br><span class=\"line\">  money:123,</span><br><span class=\"line\">  color:&quot;red&quot;,</span><br><span class=\"line\">  name:&quot;大地&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></p>\n<p>不推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Car = &#123;</span><br><span class=\"line\">  Carmoney:123,</span><br><span class=\"line\">  Carcolor:&quot;red&quot;,</span><br><span class=\"line\">  Carname:&quot;大地&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></p>\n<h3 id=\"2-3、CSS类名采用BEM命名规范\"><a href=\"#2-3、CSS类名采用BEM命名规范\" class=\"headerlink\" title=\"2.3、CSS类名采用BEM命名规范\"></a>2.3、CSS类名采用BEM命名规范</h3><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.block_element&#123;&#125;     // 代表块block元素中的子元素element</span><br><span class=\"line\">.block--modifier&#123;&#125;  //  代表块block元素的状态</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"2-4、命名符合语义化\"><a href=\"#2-4、命名符合语义化\" class=\"headerlink\" title=\"2.4、命名符合语义化\"></a>2.4、命名符合语义化</h3><p>命名需要符合语义化，如果是函数命名可以采用加上动词前缀<br>动词      含义<br>can       判断是否可以执行某个动作<br>has       判断是否含有某一个值<br>is          判断是否为某一个值<br>get        获取某一个值<br>set        设置某一个值<br>推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 是否显示</span><br><span class=\"line\">function canShow()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 设置名称</span><br><span class=\"line\">function setName()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"三、JS推荐写法\"><a href=\"#三、JS推荐写法\" class=\"headerlink\" title=\"三、JS推荐写法\"></a>三、JS推荐写法</h2><h3 id=\"3-1、每个常量都需要命名\"><a href=\"#3-1、每个常量都需要命名\" class=\"headerlink\" title=\"3.1、每个常量都需要命名\"></a>3.1、每个常量都需要命名</h3><p>每个常量应该命名，不然看代码的人不知道这个常量的意思。<br>推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const COL_NUM = 10</span><br><span class=\"line\">let row = Math.ceil(num/COL_NUM)</span><br></pre></td></tr></table></figure></div></p>\n<p>不推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let row = Math.ceil(num/10)</span><br></pre></td></tr></table></figure></div></p>\n<h3 id=\"3-2、推荐使用字面量\"><a href=\"#3-2、推荐使用字面量\" class=\"headerlink\" title=\"3.2、推荐使用字面量\"></a>3.2、推荐使用字面量</h3><p>创建对象和数组推荐使用字面量，因为这不仅是性能最优也有助于节省代码量。<br>推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">   name:&quot;tonny&quot;,</span><br><span class=\"line\">   age:12,</span><br><span class=\"line\">   sex:&quot;男&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></p>\n<p>不推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;&#125;</span><br><span class=\"line\">obj.name = &quot;tonny&quot;</span><br><span class=\"line\">obj.age = 12</span><br><span class=\"line\">obj.sex = &quot;男&quot;</span><br></pre></td></tr></table></figure></div></p>\n<h3 id=\"3-3、-函数参数\"><a href=\"#3-3、-函数参数\" class=\"headerlink\" title=\"3.3、 函数参数\"></a>3.3、 函数参数</h3><p>函数参数越少越好，如果参数超过两个，要使用 ES6的解构语法，不用考虑参数的顺序。<br>推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createMenu(&#123;title,name,value,label&#125;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createMenu(&#123;</span><br><span class=\"line\">  title:&quot;ad&quot;,</span><br><span class=\"line\">  name:&quot;tonny&quot;,</span><br><span class=\"line\">  value:&quot;123&quot;,</span><br><span class=\"line\">  label:&quot;button&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div></p>\n<p>不推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createMenu(title,name,value,label)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></p>\n<h3 id=\"3-4、使用参数默认值，代替使用条件语句进行赋值\"><a href=\"#3-4、使用参数默认值，代替使用条件语句进行赋值\" class=\"headerlink\" title=\"3.4、使用参数默认值，代替使用条件语句进行赋值\"></a>3.4、使用参数默认值，代替使用条件语句进行赋值</h3><p>推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function create(name=&quot;abc&quot;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></p>\n<p>不推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function create(name)&#123;</span><br><span class=\"line\">  let newName = name || &quot;abc&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></p>\n<h3 id=\"3-5、推荐使用函数式编程\"><a href=\"#3-5、推荐使用函数式编程\" class=\"headerlink\" title=\"3.5、推荐使用函数式编程\"></a>3.5、推荐使用函数式编程</h3><p>函数式编程可以让代码的逻辑更清晰更优雅，方便测试<br>推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const menu = [</span><br><span class=\"line\"> &#123;name:&quot;a&quot;,size:1&#125;,</span><br><span class=\"line\"> &#123;name:&quot;b&quot;,size:2&#125;,</span><br><span class=\"line\"> &#123;name:&quot;c&quot;,size:3&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">let sumMenu = menu.map(item =&gt; item.size).reduce((prevsize,nextsize)=&gt; previse+nextsize,0);</span><br></pre></td></tr></table></figure></div></p>\n<p>不推荐：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let sum = 0;</span><br><span class=\"line\">for(let i=0;i&lt;menu.length;i++)&#123;</span><br><span class=\"line\">  sum+=menu[i].size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h4 id=\"前端团队根据情况有时候会有评审代码的要求，但是由于每个开发人员的技术水平不同，代码风格不同，所关注的技术点也不同，为了保证代码的质量以及团队的代码风格统一，因此产生了团队中的CodeReview-为此拟了一份清单-如果你的团队还没有CodeReview，可能这正是你需要的。\"><a href=\"#前端团队根据情况有时候会有评审代码的要求，但是由于每个开发人员的技术水平不同，代码风格不同，所关注的技术点也不同，为了保证代码的质量以及团队的代码风格统一，因此产生了团队中的CodeReview-为此拟了一份清单-如果你的团队还没有CodeReview，可能这正是你需要的。\" class=\"headerlink\" title=\"前端团队根据情况有时候会有评审代码的要求，但是由于每个开发人员的技术水平不同，代码风格不同，所关注的技术点也不同，为了保证代码的质量以及团队的代码风格统一，因此产生了团队中的CodeReview,为此拟了一份清单,如果你的团队还没有CodeReview，可能这正是你需要的。\"></a>前端团队根据情况有时候会有评审代码的要求，但是由于每个开发人员的技术水平不同，代码风格不同，所关注的技术点也不同，为了保证代码的质量以及团队的代码风格统一，因此产生了团队中的CodeReview,为此拟了一份清单,如果你的团队还没有CodeReview，可能这正是你需要的。</h4><h2 id=\"一、代码静态检查工具\"><a href=\"#一、代码静态检查工具\" class=\"headerlink\" title=\"一、代码静态检查工具\"></a>一、代码静态检查工具</h2><h3 id=\"1-1、使用eslint工具对javascript代码进行检查。\"><a href=\"#1-1、使用eslint工具对javascript代码进行检查。\" class=\"headerlink\" title=\"1.1、使用eslint工具对javascript代码进行检查。\"></a>1.1、使用eslint工具对javascript代码进行检查。</h3><p><code>eslint</code>检查的规范继承自<code>eslint-config-standard</code>检验规则。<br>","more":"</p>\n<h3 id=\"1-2、使用stylelint工具对css样式代码进行检查。\"><a href=\"#1-2、使用stylelint工具对css样式代码进行检查。\" class=\"headerlink\" title=\"1.2、使用stylelint工具对css样式代码进行检查。\"></a>1.2、使用stylelint工具对css样式代码进行检查。</h3><p><code>stylelint</code>检查的规范继承自<code>stylelint-config-standard</code>检验规则。</p>\n<h2 id=\"二、命名规范\"><a href=\"#二、命名规范\" class=\"headerlink\" title=\"二、命名规范\"></a>二、命名规范</h2><h3 id=\"2-1、JS采用Camel-Case小驼峰命名\"><a href=\"#2-1、JS采用Camel-Case小驼峰命名\" class=\"headerlink\" title=\"2.1、JS采用Camel Case小驼峰命名\"></a>2.1、JS采用Camel Case小驼峰命名</h3><p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">studentInfo</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2、避免名称冗余\"><a href=\"#2-2、避免名称冗余\" class=\"headerlink\" title=\"2.2、避免名称冗余\"></a>2.2、避免名称冗余</h3><p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Car = &#123;</span><br><span class=\"line\">  money:123,</span><br><span class=\"line\">  color:&quot;red&quot;,</span><br><span class=\"line\">  name:&quot;大地&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Car = &#123;</span><br><span class=\"line\">  Carmoney:123,</span><br><span class=\"line\">  Carcolor:&quot;red&quot;,</span><br><span class=\"line\">  Carname:&quot;大地&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3、CSS类名采用BEM命名规范\"><a href=\"#2-3、CSS类名采用BEM命名规范\" class=\"headerlink\" title=\"2.3、CSS类名采用BEM命名规范\"></a>2.3、CSS类名采用BEM命名规范</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.block_element&#123;&#125;     // 代表块block元素中的子元素element</span><br><span class=\"line\">.block--modifier&#123;&#125;  //  代表块block元素的状态</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4、命名符合语义化\"><a href=\"#2-4、命名符合语义化\" class=\"headerlink\" title=\"2.4、命名符合语义化\"></a>2.4、命名符合语义化</h3><p>命名需要符合语义化，如果是函数命名可以采用加上动词前缀<br>动词      含义<br>can       判断是否可以执行某个动作<br>has       判断是否含有某一个值<br>is          判断是否为某一个值<br>get        获取某一个值<br>set        设置某一个值<br>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 是否显示</span><br><span class=\"line\">function canShow()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 设置名称</span><br><span class=\"line\">function setName()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、JS推荐写法\"><a href=\"#三、JS推荐写法\" class=\"headerlink\" title=\"三、JS推荐写法\"></a>三、JS推荐写法</h2><h3 id=\"3-1、每个常量都需要命名\"><a href=\"#3-1、每个常量都需要命名\" class=\"headerlink\" title=\"3.1、每个常量都需要命名\"></a>3.1、每个常量都需要命名</h3><p>每个常量应该命名，不然看代码的人不知道这个常量的意思。<br>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const COL_NUM = 10</span><br><span class=\"line\">let row = Math.ceil(num/COL_NUM)</span><br></pre></td></tr></table></figure></p>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let row = Math.ceil(num/10)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-2、推荐使用字面量\"><a href=\"#3-2、推荐使用字面量\" class=\"headerlink\" title=\"3.2、推荐使用字面量\"></a>3.2、推荐使用字面量</h3><p>创建对象和数组推荐使用字面量，因为这不仅是性能最优也有助于节省代码量。<br>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">   name:&quot;tonny&quot;,</span><br><span class=\"line\">   age:12,</span><br><span class=\"line\">   sex:&quot;男&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;&#125;</span><br><span class=\"line\">obj.name = &quot;tonny&quot;</span><br><span class=\"line\">obj.age = 12</span><br><span class=\"line\">obj.sex = &quot;男&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-3、-函数参数\"><a href=\"#3-3、-函数参数\" class=\"headerlink\" title=\"3.3、 函数参数\"></a>3.3、 函数参数</h3><p>函数参数越少越好，如果参数超过两个，要使用 ES6的解构语法，不用考虑参数的顺序。<br>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createMenu(&#123;title,name,value,label&#125;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createMenu(&#123;</span><br><span class=\"line\">  title:&quot;ad&quot;,</span><br><span class=\"line\">  name:&quot;tonny&quot;,</span><br><span class=\"line\">  value:&quot;123&quot;,</span><br><span class=\"line\">  label:&quot;button&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createMenu(title,name,value,label)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-4、使用参数默认值，代替使用条件语句进行赋值\"><a href=\"#3-4、使用参数默认值，代替使用条件语句进行赋值\" class=\"headerlink\" title=\"3.4、使用参数默认值，代替使用条件语句进行赋值\"></a>3.4、使用参数默认值，代替使用条件语句进行赋值</h3><p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function create(name=&quot;abc&quot;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function create(name)&#123;</span><br><span class=\"line\">  let newName = name || &quot;abc&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-5、推荐使用函数式编程\"><a href=\"#3-5、推荐使用函数式编程\" class=\"headerlink\" title=\"3.5、推荐使用函数式编程\"></a>3.5、推荐使用函数式编程</h3><p>函数式编程可以让代码的逻辑更清晰更优雅，方便测试<br>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const menu = [</span><br><span class=\"line\"> &#123;name:&quot;a&quot;,size:1&#125;,</span><br><span class=\"line\"> &#123;name:&quot;b&quot;,size:2&#125;,</span><br><span class=\"line\"> &#123;name:&quot;c&quot;,size:3&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">let sumMenu = menu.map(item =&gt; item.size).reduce((prevsize,nextsize)=&gt; previse+nextsize,0);</span><br></pre></td></tr></table></figure></p>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let sum = 0;</span><br><span class=\"line\">for(let i=0;i&lt;menu.length;i++)&#123;</span><br><span class=\"line\">  sum+=menu[i].size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"玩转clip-path","date":"2019-07-22T16:00:00.000Z","_content":"# 一.基本概念\n什么是`clip-path`呢？简而言之就是实现裁剪的`css`属性,我们可以通过该属性创建一个只有元素的部分区域可以显示的剪切区域。区域内的部分显示，区域外的部分隐藏。通过指定路径就可以创建出自己想要的形状，这样网页中的布局就可以是多种多样的了。\n\n在`clip-path`出现之前，css还有个属性`clip`也支持裁剪，但是它只支持矩形裁剪,同时它只对`position:absolute`和`position:fixed`的元素生效。使用如下：\n``` branch\n clip: rect(50px,50px,50px,50px) //标准写法\n clip: rect(50px 50px 50px 50px) //兼容浏览器写法\n```\n目前所有主流浏览器都支持`clip`,但是因为其局限性,`clip`已经被`clip-path`代替。`clip-path`为我们带来了更多的可能，让我们制作出更多有趣的图案。\n<!--more-->\n# 二.用法实例\n## 1.基本图形：inset\n```branch\ninset()//定义一个矩形,注意:此处矩形不是 rect 而是 inset.\n//语法\ninset()可以传入5个参数，分别对应top,right,bottom,left的裁剪位置,和round radius（可选项 圆角）。\n\n//示例\nclip-path:inset(15% 20% 15% 20%)\n```\n <div style=\"width:200px;height:200px;margin:auto\">![avatart](https://s2.ax1x.com/2019/03/27/Aa7B0s.png)</div>\n \n## 2.基本图形：circle\n```branch\ncircle()//定义一个圆形\n//语法\ncircle()//可以传入2个参数，用at分开,分别对应圆的半径,圆心位置。圆心默认为元素中心点。\n//示例\nclip-path:circle(50% at 50% 50%)\n```\n <div style=\"width:200px;height:200px;margin:auto\">![avatart](https://ws2.sinaimg.cn/mw690/005SNrnIgy1g1hef0awp6j308r08gq6d.jpg)</div>\n \n## 3.基本图形：ellipse\n``` branch\nellipse()//定义一个椭圆\n//语法\nellipse(x y at positon)//x为椭圆的x轴半径,y为椭圆的y轴半径,position为椭圆中心位置。\n//示例\nclip-path:ellipse(25% 40% at 50% 50%)\n```\n <div style=\"width:200px;height:200px;margin:auto\">![avatart](https://ws2.sinaimg.cn/mw690/005SNrnIgy1g1hekwf3c2j308i089myl.jpg)</div>\n## 4.基本图形：polygon\n``` branch\nplygon()//定义一个多边形\n//语法\npolygon(fill-rule,[x y])//fill-rule(可选)表示填充规则用来确定该多边形内部,值有nonzero 和evenodd，默认为evenodd。后面的每一对表示连接点的坐标。\n//示例\nclip-path: polygon(50% 0%, 0 100%, 100% 100%);\nclip-path: polygon(20% 0%, 0% 20%, 30% 50%, 0% 80%, 20% 100%, 50% 70%, 80% 100%, 100% 80%, 70% 50%, 100% 20%, 80% 0%, 50% 30%);\n```\n <div style=\"display:flex;justify-content:space-around;\">![avatart](https://ws2.sinaimg.cn/mw690/005SNrnIgy1g1hez6l3rej309208sdi4.jpg)\n ![avatart](https://ws4.sinaimg.cn/mw690/005SNrnIgy1g1hf2dedn8j308x08q0vd.jpg)\n </div>\n## 5.其他属性\n除了`inset`，`circle`，`ellipse`，`polygon`属性外，`clip-path`还具有`url`，`geometry-box`等属性值，具体可以参考\n<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path\" target=\"_blank\">MDN</a>\n \n# 三.兼容性\n![avatart](https://wx4.sinaimg.cn/large/005SNrnIgy1g1hfchdbflj30z5073gm1.jpg)\n\n","source":"_posts/clip-path.md","raw":"---\ntitle: 玩转clip-path\ndate: 2019-07-23\ncategories:\n - 技术\ntags:\n - css\n---\n# 一.基本概念\n什么是`clip-path`呢？简而言之就是实现裁剪的`css`属性,我们可以通过该属性创建一个只有元素的部分区域可以显示的剪切区域。区域内的部分显示，区域外的部分隐藏。通过指定路径就可以创建出自己想要的形状，这样网页中的布局就可以是多种多样的了。\n\n在`clip-path`出现之前，css还有个属性`clip`也支持裁剪，但是它只支持矩形裁剪,同时它只对`position:absolute`和`position:fixed`的元素生效。使用如下：\n``` branch\n clip: rect(50px,50px,50px,50px) //标准写法\n clip: rect(50px 50px 50px 50px) //兼容浏览器写法\n```\n目前所有主流浏览器都支持`clip`,但是因为其局限性,`clip`已经被`clip-path`代替。`clip-path`为我们带来了更多的可能，让我们制作出更多有趣的图案。\n<!--more-->\n# 二.用法实例\n## 1.基本图形：inset\n```branch\ninset()//定义一个矩形,注意:此处矩形不是 rect 而是 inset.\n//语法\ninset()可以传入5个参数，分别对应top,right,bottom,left的裁剪位置,和round radius（可选项 圆角）。\n\n//示例\nclip-path:inset(15% 20% 15% 20%)\n```\n <div style=\"width:200px;height:200px;margin:auto\">![avatart](https://s2.ax1x.com/2019/03/27/Aa7B0s.png)</div>\n \n## 2.基本图形：circle\n```branch\ncircle()//定义一个圆形\n//语法\ncircle()//可以传入2个参数，用at分开,分别对应圆的半径,圆心位置。圆心默认为元素中心点。\n//示例\nclip-path:circle(50% at 50% 50%)\n```\n <div style=\"width:200px;height:200px;margin:auto\">![avatart](https://ws2.sinaimg.cn/mw690/005SNrnIgy1g1hef0awp6j308r08gq6d.jpg)</div>\n \n## 3.基本图形：ellipse\n``` branch\nellipse()//定义一个椭圆\n//语法\nellipse(x y at positon)//x为椭圆的x轴半径,y为椭圆的y轴半径,position为椭圆中心位置。\n//示例\nclip-path:ellipse(25% 40% at 50% 50%)\n```\n <div style=\"width:200px;height:200px;margin:auto\">![avatart](https://ws2.sinaimg.cn/mw690/005SNrnIgy1g1hekwf3c2j308i089myl.jpg)</div>\n## 4.基本图形：polygon\n``` branch\nplygon()//定义一个多边形\n//语法\npolygon(fill-rule,[x y])//fill-rule(可选)表示填充规则用来确定该多边形内部,值有nonzero 和evenodd，默认为evenodd。后面的每一对表示连接点的坐标。\n//示例\nclip-path: polygon(50% 0%, 0 100%, 100% 100%);\nclip-path: polygon(20% 0%, 0% 20%, 30% 50%, 0% 80%, 20% 100%, 50% 70%, 80% 100%, 100% 80%, 70% 50%, 100% 20%, 80% 0%, 50% 30%);\n```\n <div style=\"display:flex;justify-content:space-around;\">![avatart](https://ws2.sinaimg.cn/mw690/005SNrnIgy1g1hez6l3rej309208sdi4.jpg)\n ![avatart](https://ws4.sinaimg.cn/mw690/005SNrnIgy1g1hf2dedn8j308x08q0vd.jpg)\n </div>\n## 5.其他属性\n除了`inset`，`circle`，`ellipse`，`polygon`属性外，`clip-path`还具有`url`，`geometry-box`等属性值，具体可以参考\n<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path\" target=\"_blank\">MDN</a>\n \n# 三.兼容性\n![avatart](https://wx4.sinaimg.cn/large/005SNrnIgy1g1hfchdbflj30z5073gm1.jpg)\n\n","slug":"clip-path","published":1,"updated":"2019-08-11T08:59:04.004Z","_id":"cjz6qgijv000crou33dvg229f","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一-基本概念\"><a href=\"#一-基本概念\" class=\"headerlink\" title=\"一.基本概念\"></a>一.基本概念</h1><p>什么是<code>clip-path</code>呢？简而言之就是实现裁剪的<code>css</code>属性,我们可以通过该属性创建一个只有元素的部分区域可以显示的剪切区域。区域内的部分显示，区域外的部分隐藏。通过指定路径就可以创建出自己想要的形状，这样网页中的布局就可以是多种多样的了。</p>\n<p>在<code>clip-path</code>出现之前，css还有个属性<code>clip</code>也支持裁剪，但是它只支持矩形裁剪,同时它只对<code>position:absolute</code>和<code>position:fixed</code>的元素生效。使用如下：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clip: rect(50px,50px,50px,50px) //标准写法</span><br><span class=\"line\">clip: rect(50px 50px 50px 50px) //兼容浏览器写法</span><br></pre></td></tr></table></figure></div></p>\n<p>目前所有主流浏览器都支持<code>clip</code>,但是因为其局限性,<code>clip</code>已经被<code>clip-path</code>代替。<code>clip-path</code>为我们带来了更多的可能，让我们制作出更多有趣的图案。<br><a id=\"more\"></a></p>\n<h1 id=\"二-用法实例\"><a href=\"#二-用法实例\" class=\"headerlink\" title=\"二.用法实例\"></a>二.用法实例</h1><h2 id=\"1-基本图形：inset\"><a href=\"#1-基本图形：inset\" class=\"headerlink\" title=\"1.基本图形：inset\"></a>1.基本图形：inset</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inset()//定义一个矩形,注意:此处矩形不是 rect 而是 inset.</span><br><span class=\"line\">//语法</span><br><span class=\"line\">inset()可以传入5个参数，分别对应top,right,bottom,left的裁剪位置,和round radius（可选项 圆角）。</span><br><span class=\"line\"></span><br><span class=\"line\">//示例</span><br><span class=\"line\">clip-path:inset(15% 20% 15% 20%)</span><br></pre></td></tr></table></figure></div>\n <div style=\"width:200px;height:200px;margin:auto\"><img src=\"https://s2.ax1x.com/2019/03/27/Aa7B0s.png\" alt=\"avatart\"></div>\n\n<h2 id=\"2-基本图形：circle\"><a href=\"#2-基本图形：circle\" class=\"headerlink\" title=\"2.基本图形：circle\"></a>2.基本图形：circle</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">circle()//定义一个圆形</span><br><span class=\"line\">//语法</span><br><span class=\"line\">circle()//可以传入2个参数，用at分开,分别对应圆的半径,圆心位置。圆心默认为元素中心点。</span><br><span class=\"line\">//示例</span><br><span class=\"line\">clip-path:circle(50% at 50% 50%)</span><br></pre></td></tr></table></figure></div>\n <div style=\"width:200px;height:200px;margin:auto\"><img src=\"https://ws2.sinaimg.cn/mw690/005SNrnIgy1g1hef0awp6j308r08gq6d.jpg\" alt=\"avatart\"></div>\n\n<h2 id=\"3-基本图形：ellipse\"><a href=\"#3-基本图形：ellipse\" class=\"headerlink\" title=\"3.基本图形：ellipse\"></a>3.基本图形：ellipse</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ellipse()//定义一个椭圆</span><br><span class=\"line\">//语法</span><br><span class=\"line\">ellipse(x y at positon)//x为椭圆的x轴半径,y为椭圆的y轴半径,position为椭圆中心位置。</span><br><span class=\"line\">//示例</span><br><span class=\"line\">clip-path:ellipse(25% 40% at 50% 50%)</span><br></pre></td></tr></table></figure></div>\n<p> <div style=\"width:200px;height:200px;margin:auto\"><img src=\"https://ws2.sinaimg.cn/mw690/005SNrnIgy1g1hekwf3c2j308i089myl.jpg\" alt=\"avatart\"></div></p>\n<h2 id=\"4-基本图形：polygon\"><a href=\"#4-基本图形：polygon\" class=\"headerlink\" title=\"4.基本图形：polygon\"></a>4.基本图形：polygon</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plygon()//定义一个多边形</span><br><span class=\"line\">//语法</span><br><span class=\"line\">polygon(fill-rule,[x y])//fill-rule(可选)表示填充规则用来确定该多边形内部,值有nonzero 和evenodd，默认为evenodd。后面的每一对表示连接点的坐标。</span><br><span class=\"line\">//示例</span><br><span class=\"line\">clip-path: polygon(50% 0%, 0 100%, 100% 100%);</span><br><span class=\"line\">clip-path: polygon(20% 0%, 0% 20%, 30% 50%, 0% 80%, 20% 100%, 50% 70%, 80% 100%, 100% 80%, 70% 50%, 100% 20%, 80% 0%, 50% 30%);</span><br></pre></td></tr></table></figure></div>\n<p> <div style=\"display:flex;justify-content:space-around;\"><img src=\"https://ws2.sinaimg.cn/mw690/005SNrnIgy1g1hez6l3rej309208sdi4.jpg\" alt=\"avatart\"><br> <img src=\"https://ws4.sinaimg.cn/mw690/005SNrnIgy1g1hf2dedn8j308x08q0vd.jpg\" alt=\"avatart\"><br> </div></p>\n<h2 id=\"5-其他属性\"><a href=\"#5-其他属性\" class=\"headerlink\" title=\"5.其他属性\"></a>5.其他属性</h2><p>除了<code>inset</code>，<code>circle</code>，<code>ellipse</code>，<code>polygon</code>属性外，<code>clip-path</code>还具有<code>url</code>，<code>geometry-box</code>等属性值，具体可以参考<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path\" target=\"_blank\">MDN</a></p>\n<h1 id=\"三-兼容性\"><a href=\"#三-兼容性\" class=\"headerlink\" title=\"三.兼容性\"></a>三.兼容性</h1><p><img src=\"https://wx4.sinaimg.cn/large/005SNrnIgy1g1hfchdbflj30z5073gm1.jpg\" alt=\"avatart\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一-基本概念\"><a href=\"#一-基本概念\" class=\"headerlink\" title=\"一.基本概念\"></a>一.基本概念</h1><p>什么是<code>clip-path</code>呢？简而言之就是实现裁剪的<code>css</code>属性,我们可以通过该属性创建一个只有元素的部分区域可以显示的剪切区域。区域内的部分显示，区域外的部分隐藏。通过指定路径就可以创建出自己想要的形状，这样网页中的布局就可以是多种多样的了。</p>\n<p>在<code>clip-path</code>出现之前，css还有个属性<code>clip</code>也支持裁剪，但是它只支持矩形裁剪,同时它只对<code>position:absolute</code>和<code>position:fixed</code>的元素生效。使用如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clip: rect(50px,50px,50px,50px) //标准写法</span><br><span class=\"line\">clip: rect(50px 50px 50px 50px) //兼容浏览器写法</span><br></pre></td></tr></table></figure></p>\n<p>目前所有主流浏览器都支持<code>clip</code>,但是因为其局限性,<code>clip</code>已经被<code>clip-path</code>代替。<code>clip-path</code>为我们带来了更多的可能，让我们制作出更多有趣的图案。<br>","more":"</p>\n<h1 id=\"二-用法实例\"><a href=\"#二-用法实例\" class=\"headerlink\" title=\"二.用法实例\"></a>二.用法实例</h1><h2 id=\"1-基本图形：inset\"><a href=\"#1-基本图形：inset\" class=\"headerlink\" title=\"1.基本图形：inset\"></a>1.基本图形：inset</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inset()//定义一个矩形,注意:此处矩形不是 rect 而是 inset.</span><br><span class=\"line\">//语法</span><br><span class=\"line\">inset()可以传入5个参数，分别对应top,right,bottom,left的裁剪位置,和round radius（可选项 圆角）。</span><br><span class=\"line\"></span><br><span class=\"line\">//示例</span><br><span class=\"line\">clip-path:inset(15% 20% 15% 20%)</span><br></pre></td></tr></table></figure>\n <div style=\"width:200px;height:200px;margin:auto\"><img src=\"https://s2.ax1x.com/2019/03/27/Aa7B0s.png\" alt=\"avatart\"></div>\n\n<h2 id=\"2-基本图形：circle\"><a href=\"#2-基本图形：circle\" class=\"headerlink\" title=\"2.基本图形：circle\"></a>2.基本图形：circle</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">circle()//定义一个圆形</span><br><span class=\"line\">//语法</span><br><span class=\"line\">circle()//可以传入2个参数，用at分开,分别对应圆的半径,圆心位置。圆心默认为元素中心点。</span><br><span class=\"line\">//示例</span><br><span class=\"line\">clip-path:circle(50% at 50% 50%)</span><br></pre></td></tr></table></figure>\n <div style=\"width:200px;height:200px;margin:auto\"><img src=\"https://ws2.sinaimg.cn/mw690/005SNrnIgy1g1hef0awp6j308r08gq6d.jpg\" alt=\"avatart\"></div>\n\n<h2 id=\"3-基本图形：ellipse\"><a href=\"#3-基本图形：ellipse\" class=\"headerlink\" title=\"3.基本图形：ellipse\"></a>3.基本图形：ellipse</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ellipse()//定义一个椭圆</span><br><span class=\"line\">//语法</span><br><span class=\"line\">ellipse(x y at positon)//x为椭圆的x轴半径,y为椭圆的y轴半径,position为椭圆中心位置。</span><br><span class=\"line\">//示例</span><br><span class=\"line\">clip-path:ellipse(25% 40% at 50% 50%)</span><br></pre></td></tr></table></figure>\n<p> <div style=\"width:200px;height:200px;margin:auto\"><img src=\"https://ws2.sinaimg.cn/mw690/005SNrnIgy1g1hekwf3c2j308i089myl.jpg\" alt=\"avatart\"></div></p>\n<h2 id=\"4-基本图形：polygon\"><a href=\"#4-基本图形：polygon\" class=\"headerlink\" title=\"4.基本图形：polygon\"></a>4.基本图形：polygon</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plygon()//定义一个多边形</span><br><span class=\"line\">//语法</span><br><span class=\"line\">polygon(fill-rule,[x y])//fill-rule(可选)表示填充规则用来确定该多边形内部,值有nonzero 和evenodd，默认为evenodd。后面的每一对表示连接点的坐标。</span><br><span class=\"line\">//示例</span><br><span class=\"line\">clip-path: polygon(50% 0%, 0 100%, 100% 100%);</span><br><span class=\"line\">clip-path: polygon(20% 0%, 0% 20%, 30% 50%, 0% 80%, 20% 100%, 50% 70%, 80% 100%, 100% 80%, 70% 50%, 100% 20%, 80% 0%, 50% 30%);</span><br></pre></td></tr></table></figure>\n<p> <div style=\"display:flex;justify-content:space-around;\"><img src=\"https://ws2.sinaimg.cn/mw690/005SNrnIgy1g1hez6l3rej309208sdi4.jpg\" alt=\"avatart\"><br> <img src=\"https://ws4.sinaimg.cn/mw690/005SNrnIgy1g1hf2dedn8j308x08q0vd.jpg\" alt=\"avatart\"><br> </div></p>\n<h2 id=\"5-其他属性\"><a href=\"#5-其他属性\" class=\"headerlink\" title=\"5.其他属性\"></a>5.其他属性</h2><p>除了<code>inset</code>，<code>circle</code>，<code>ellipse</code>，<code>polygon</code>属性外，<code>clip-path</code>还具有<code>url</code>，<code>geometry-box</code>等属性值，具体可以参考<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path\" target=\"_blank\">MDN</a></p>\n<h1 id=\"三-兼容性\"><a href=\"#三-兼容性\" class=\"headerlink\" title=\"三.兼容性\"></a>三.兼容性</h1><p><img src=\"https://wx4.sinaimg.cn/large/005SNrnIgy1g1hfchdbflj30z5073gm1.jpg\" alt=\"avatart\"></p>"},{"title":"什么是回流与重绘","date":"2019-05-23T16:00:00.000Z","_content":"要想知道什么是回流与重绘，首先我们得清楚浏览器的渲染过程。你知道是渲染过程是怎样的么？下面和我一起了解一下吧。\n<!--more-->\n# 浏览器的渲染过程\n\n 1. 首先，解析`html`生成`DOM`树，解析`css`生成`CSSOM`树。\n 2. 将`DOM`树和`CSSOM`树相结合生成渲染树(`Render Tree`)。\n 3. 根据生成的渲染树，进行回流得到节点的位置、大小等信息。\n 4. 根据渲染树以及回流得到的几何信息，得到节点的绝对像素。\n 5. 将像素发给`GPU`，展示在页面上。\n\n渲染过程看起来虽然很简单，但是具体做了什么可能还不是太清楚吧，下面我们一一了解下。\n\n# 生成渲染树\n为了生成渲染树，浏览器主要做了以下工作：\n\n 1. 从`DOM`树的根节点开始遍历每个可见的节点。\n 2. 对于每一个可见的节点，找到`CSSOM`树中的对应规则，并应用它们。\n 3. 根据每一个可见的节点以及它们所对应的样式，组合生成渲染树。\n\n#### 注意：渲染树只包含可见节点。\n不可见的节点包括：\n\n - 不会渲染输出的节点。如`script`、`meta`、`link`等标签。\n - 通过css属性进行隐藏的节点，如`display:none`。（用`visibility`和`opacity`隐藏的节点还是会渲染到渲染树上。）\n\n# 回流\n前面我们已经通过构造渲染树，将可见的节点以及它所对应的样式相结合起来，但是我们还需要计算每个节点在设备视图里所在的具体位置及大小。这个计算的过程我们就称为回流。\n``` branch\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <title>Critial Path: Hello world!</title>\n  </head>\n  <body>\n    <div style=\"width: 50%\">\n      <div style=\"width: 50%\">Hello world!</div>\n    </div>\n  </body>\n</html>\n```\n以上代码中，我们可以看到第一个`div`将显示的尺寸设为了设备视窗的50%,第二个`div`设为了父节点宽度的50%，在回流的阶段我们就需要根据视窗的具体宽度，将其设为具体的像素值。\n# 重绘\n我们通过构造渲染树和回流的阶段，知道了哪些节点是可见的，以及可见节点的样式和具体位置和大小信息，那么我们就可以将渲染树中的每一个节点都转换为屏幕上的实际像素，这个阶段就叫做重绘。\n\n# 何时发生回流和重绘\n通过前面我们知道，回流主要是计算节点在设备上显示的具体位置及大小，那么当页面发生变化的时候就会触发回流。如：\n\n - 添加或删除可见的`DOM`元素。\n - 元素的位置发生变化。\n - 元素的尺寸发生变化（包括边框、边距、大小等）。\n - 元素的文本内容发生变化。\n - 浏览器的窗口大小发生改变（因为回流是根据视窗的大小来计算节点的具体位置的）。\n#### 注意：回流一定会触发重绘，而重绘不一定会触发回流。\n \n","source":"_posts/reflux.md","raw":"---\ntitle: 什么是回流与重绘\ndate: 2019-05-24\ntags:\n - browser\n---\n要想知道什么是回流与重绘，首先我们得清楚浏览器的渲染过程。你知道是渲染过程是怎样的么？下面和我一起了解一下吧。\n<!--more-->\n# 浏览器的渲染过程\n\n 1. 首先，解析`html`生成`DOM`树，解析`css`生成`CSSOM`树。\n 2. 将`DOM`树和`CSSOM`树相结合生成渲染树(`Render Tree`)。\n 3. 根据生成的渲染树，进行回流得到节点的位置、大小等信息。\n 4. 根据渲染树以及回流得到的几何信息，得到节点的绝对像素。\n 5. 将像素发给`GPU`，展示在页面上。\n\n渲染过程看起来虽然很简单，但是具体做了什么可能还不是太清楚吧，下面我们一一了解下。\n\n# 生成渲染树\n为了生成渲染树，浏览器主要做了以下工作：\n\n 1. 从`DOM`树的根节点开始遍历每个可见的节点。\n 2. 对于每一个可见的节点，找到`CSSOM`树中的对应规则，并应用它们。\n 3. 根据每一个可见的节点以及它们所对应的样式，组合生成渲染树。\n\n#### 注意：渲染树只包含可见节点。\n不可见的节点包括：\n\n - 不会渲染输出的节点。如`script`、`meta`、`link`等标签。\n - 通过css属性进行隐藏的节点，如`display:none`。（用`visibility`和`opacity`隐藏的节点还是会渲染到渲染树上。）\n\n# 回流\n前面我们已经通过构造渲染树，将可见的节点以及它所对应的样式相结合起来，但是我们还需要计算每个节点在设备视图里所在的具体位置及大小。这个计算的过程我们就称为回流。\n``` branch\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <title>Critial Path: Hello world!</title>\n  </head>\n  <body>\n    <div style=\"width: 50%\">\n      <div style=\"width: 50%\">Hello world!</div>\n    </div>\n  </body>\n</html>\n```\n以上代码中，我们可以看到第一个`div`将显示的尺寸设为了设备视窗的50%,第二个`div`设为了父节点宽度的50%，在回流的阶段我们就需要根据视窗的具体宽度，将其设为具体的像素值。\n# 重绘\n我们通过构造渲染树和回流的阶段，知道了哪些节点是可见的，以及可见节点的样式和具体位置和大小信息，那么我们就可以将渲染树中的每一个节点都转换为屏幕上的实际像素，这个阶段就叫做重绘。\n\n# 何时发生回流和重绘\n通过前面我们知道，回流主要是计算节点在设备上显示的具体位置及大小，那么当页面发生变化的时候就会触发回流。如：\n\n - 添加或删除可见的`DOM`元素。\n - 元素的位置发生变化。\n - 元素的尺寸发生变化（包括边框、边距、大小等）。\n - 元素的文本内容发生变化。\n - 浏览器的窗口大小发生改变（因为回流是根据视窗的大小来计算节点的具体位置的）。\n#### 注意：回流一定会触发重绘，而重绘不一定会触发回流。\n \n","slug":"reflux","published":1,"updated":"2019-08-11T08:57:37.609Z","_id":"cjz6qgijx000erou3ngaerrqe","comments":1,"layout":"post","photos":[],"link":"","content":"<p>要想知道什么是回流与重绘，首先我们得清楚浏览器的渲染过程。你知道是渲染过程是怎样的么？下面和我一起了解一下吧。<br><a id=\"more\"></a></p>\n<h1 id=\"浏览器的渲染过程\"><a href=\"#浏览器的渲染过程\" class=\"headerlink\" title=\"浏览器的渲染过程\"></a>浏览器的渲染过程</h1><ol>\n<li>首先，解析<code>html</code>生成<code>DOM</code>树，解析<code>css</code>生成<code>CSSOM</code>树。</li>\n<li>将<code>DOM</code>树和<code>CSSOM</code>树相结合生成渲染树(<code>Render Tree</code>)。</li>\n<li>根据生成的渲染树，进行回流得到节点的位置、大小等信息。</li>\n<li>根据渲染树以及回流得到的几何信息，得到节点的绝对像素。</li>\n<li>将像素发给<code>GPU</code>，展示在页面上。</li>\n</ol>\n<p>渲染过程看起来虽然很简单，但是具体做了什么可能还不是太清楚吧，下面我们一一了解下。</p>\n<h1 id=\"生成渲染树\"><a href=\"#生成渲染树\" class=\"headerlink\" title=\"生成渲染树\"></a>生成渲染树</h1><p>为了生成渲染树，浏览器主要做了以下工作：</p>\n<ol>\n<li>从<code>DOM</code>树的根节点开始遍历每个可见的节点。</li>\n<li>对于每一个可见的节点，找到<code>CSSOM</code>树中的对应规则，并应用它们。</li>\n<li>根据每一个可见的节点以及它们所对应的样式，组合生成渲染树。</li>\n</ol>\n<h4 id=\"注意：渲染树只包含可见节点。\"><a href=\"#注意：渲染树只包含可见节点。\" class=\"headerlink\" title=\"注意：渲染树只包含可见节点。\"></a>注意：渲染树只包含可见节点。</h4><p>不可见的节点包括：</p>\n<ul>\n<li>不会渲染输出的节点。如<code>script</code>、<code>meta</code>、<code>link</code>等标签。</li>\n<li>通过css属性进行隐藏的节点，如<code>display:none</code>。（用<code>visibility</code>和<code>opacity</code>隐藏的节点还是会渲染到渲染树上。）</li>\n</ul>\n<h1 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h1><p>前面我们已经通过构造渲染树，将可见的节点以及它所对应的样式相结合起来，但是我们还需要计算每个节点在设备视图里所在的具体位置及大小。这个计算的过程我们就称为回流。<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Critial Path: Hello world!&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div style=&quot;width: 50%&quot;&gt;</span><br><span class=\"line\">      &lt;div style=&quot;width: 50%&quot;&gt;Hello world!&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div></p>\n<p>以上代码中，我们可以看到第一个<code>div</code>将显示的尺寸设为了设备视窗的50%,第二个<code>div</code>设为了父节点宽度的50%，在回流的阶段我们就需要根据视窗的具体宽度，将其设为具体的像素值。</p>\n<h1 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h1><p>我们通过构造渲染树和回流的阶段，知道了哪些节点是可见的，以及可见节点的样式和具体位置和大小信息，那么我们就可以将渲染树中的每一个节点都转换为屏幕上的实际像素，这个阶段就叫做重绘。</p>\n<h1 id=\"何时发生回流和重绘\"><a href=\"#何时发生回流和重绘\" class=\"headerlink\" title=\"何时发生回流和重绘\"></a>何时发生回流和重绘</h1><p>通过前面我们知道，回流主要是计算节点在设备上显示的具体位置及大小，那么当页面发生变化的时候就会触发回流。如：</p>\n<ul>\n<li>添加或删除可见的<code>DOM</code>元素。</li>\n<li>元素的位置发生变化。</li>\n<li>元素的尺寸发生变化（包括边框、边距、大小等）。</li>\n<li>元素的文本内容发生变化。</li>\n<li>浏览器的窗口大小发生改变（因为回流是根据视窗的大小来计算节点的具体位置的）。<h4 id=\"注意：回流一定会触发重绘，而重绘不一定会触发回流。\"><a href=\"#注意：回流一定会触发重绘，而重绘不一定会触发回流。\" class=\"headerlink\" title=\"注意：回流一定会触发重绘，而重绘不一定会触发回流。\"></a>注意：回流一定会触发重绘，而重绘不一定会触发回流。</h4></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>要想知道什么是回流与重绘，首先我们得清楚浏览器的渲染过程。你知道是渲染过程是怎样的么？下面和我一起了解一下吧。<br>","more":"</p>\n<h1 id=\"浏览器的渲染过程\"><a href=\"#浏览器的渲染过程\" class=\"headerlink\" title=\"浏览器的渲染过程\"></a>浏览器的渲染过程</h1><ol>\n<li>首先，解析<code>html</code>生成<code>DOM</code>树，解析<code>css</code>生成<code>CSSOM</code>树。</li>\n<li>将<code>DOM</code>树和<code>CSSOM</code>树相结合生成渲染树(<code>Render Tree</code>)。</li>\n<li>根据生成的渲染树，进行回流得到节点的位置、大小等信息。</li>\n<li>根据渲染树以及回流得到的几何信息，得到节点的绝对像素。</li>\n<li>将像素发给<code>GPU</code>，展示在页面上。</li>\n</ol>\n<p>渲染过程看起来虽然很简单，但是具体做了什么可能还不是太清楚吧，下面我们一一了解下。</p>\n<h1 id=\"生成渲染树\"><a href=\"#生成渲染树\" class=\"headerlink\" title=\"生成渲染树\"></a>生成渲染树</h1><p>为了生成渲染树，浏览器主要做了以下工作：</p>\n<ol>\n<li>从<code>DOM</code>树的根节点开始遍历每个可见的节点。</li>\n<li>对于每一个可见的节点，找到<code>CSSOM</code>树中的对应规则，并应用它们。</li>\n<li>根据每一个可见的节点以及它们所对应的样式，组合生成渲染树。</li>\n</ol>\n<h4 id=\"注意：渲染树只包含可见节点。\"><a href=\"#注意：渲染树只包含可见节点。\" class=\"headerlink\" title=\"注意：渲染树只包含可见节点。\"></a>注意：渲染树只包含可见节点。</h4><p>不可见的节点包括：</p>\n<ul>\n<li>不会渲染输出的节点。如<code>script</code>、<code>meta</code>、<code>link</code>等标签。</li>\n<li>通过css属性进行隐藏的节点，如<code>display:none</code>。（用<code>visibility</code>和<code>opacity</code>隐藏的节点还是会渲染到渲染树上。）</li>\n</ul>\n<h1 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h1><p>前面我们已经通过构造渲染树，将可见的节点以及它所对应的样式相结合起来，但是我们还需要计算每个节点在设备视图里所在的具体位置及大小。这个计算的过程我们就称为回流。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Critial Path: Hello world!&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div style=&quot;width: 50%&quot;&gt;</span><br><span class=\"line\">      &lt;div style=&quot;width: 50%&quot;&gt;Hello world!&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>以上代码中，我们可以看到第一个<code>div</code>将显示的尺寸设为了设备视窗的50%,第二个<code>div</code>设为了父节点宽度的50%，在回流的阶段我们就需要根据视窗的具体宽度，将其设为具体的像素值。</p>\n<h1 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h1><p>我们通过构造渲染树和回流的阶段，知道了哪些节点是可见的，以及可见节点的样式和具体位置和大小信息，那么我们就可以将渲染树中的每一个节点都转换为屏幕上的实际像素，这个阶段就叫做重绘。</p>\n<h1 id=\"何时发生回流和重绘\"><a href=\"#何时发生回流和重绘\" class=\"headerlink\" title=\"何时发生回流和重绘\"></a>何时发生回流和重绘</h1><p>通过前面我们知道，回流主要是计算节点在设备上显示的具体位置及大小，那么当页面发生变化的时候就会触发回流。如：</p>\n<ul>\n<li>添加或删除可见的<code>DOM</code>元素。</li>\n<li>元素的位置发生变化。</li>\n<li>元素的尺寸发生变化（包括边框、边距、大小等）。</li>\n<li>元素的文本内容发生变化。</li>\n<li>浏览器的窗口大小发生改变（因为回流是根据视窗的大小来计算节点的具体位置的）。<h4 id=\"注意：回流一定会触发重绘，而重绘不一定会触发回流。\"><a href=\"#注意：回流一定会触发重绘，而重绘不一定会触发回流。\" class=\"headerlink\" title=\"注意：回流一定会触发重绘，而重绘不一定会触发回流。\"></a>注意：回流一定会触发重绘，而重绘不一定会触发回流。</h4></li>\n</ul>"},{"title":"git常用操作","date":"2019-07-01T16:00:00.000Z","_content":"# 一.clone 项目\nclone git上的项目,如下：\n``` branch\n git clone git@github.com:ymtonny/myBlog.git\n```\n# 二.管理分支\n## 1.查看分支\n<!--more-->\n### 1.1.查看本地分支\n使用git branch命令,如下：\n``` branch\n    git branch \n    * master\n```\n*标识的是你当前所在的分支\n### 1.2.查看远程分支\n命令如下：\n``` branch\n   git branch -r\n```\n### 1.3.查看所有分支\n命令如下：\n``` branch\n   git branch -a\n```\n## 2.本地创建新分支\n命令如下：\n``` branch\n   git branch [branch name]\n```\n## 3.切换到新分支\n命令如下：\n``` branch\n   git checkout [branch name]\n```\n## 4.创建+切换分支\n命令如下：\n``` branch\n   git checkout -b [branch name]\n```\n## 5.将新分支上传到远程分支中\n命令如下：\n``` branch\n   git push origin [branch name]\n```\n## 6.删除本地分支\n命令如下：\n``` branch\n   git branch -d [branch name]\n```\n## 7.删除远程分支\n命令如下：\n``` branch\n   git push origin :[branch name]\n```\n分支名前冒号代表删除。","source":"_posts/git-operating.md","raw":"---\ntitle: git常用操作\ndate: 2019-07-02\ncategories:\n - 技术\ntags:\n - git\n---\n# 一.clone 项目\nclone git上的项目,如下：\n``` branch\n git clone git@github.com:ymtonny/myBlog.git\n```\n# 二.管理分支\n## 1.查看分支\n<!--more-->\n### 1.1.查看本地分支\n使用git branch命令,如下：\n``` branch\n    git branch \n    * master\n```\n*标识的是你当前所在的分支\n### 1.2.查看远程分支\n命令如下：\n``` branch\n   git branch -r\n```\n### 1.3.查看所有分支\n命令如下：\n``` branch\n   git branch -a\n```\n## 2.本地创建新分支\n命令如下：\n``` branch\n   git branch [branch name]\n```\n## 3.切换到新分支\n命令如下：\n``` branch\n   git checkout [branch name]\n```\n## 4.创建+切换分支\n命令如下：\n``` branch\n   git checkout -b [branch name]\n```\n## 5.将新分支上传到远程分支中\n命令如下：\n``` branch\n   git push origin [branch name]\n```\n## 6.删除本地分支\n命令如下：\n``` branch\n   git branch -d [branch name]\n```\n## 7.删除远程分支\n命令如下：\n``` branch\n   git push origin :[branch name]\n```\n分支名前冒号代表删除。","slug":"git-operating","published":1,"updated":"2019-08-11T08:58:05.184Z","_id":"cjz6qgik2000jrou3ns6sixgb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一-clone-项目\"><a href=\"#一-clone-项目\" class=\"headerlink\" title=\"一.clone 项目\"></a>一.clone 项目</h1><p>clone git上的项目,如下：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:ymtonny/myBlog.git</span><br></pre></td></tr></table></figure></div></p>\n<h1 id=\"二-管理分支\"><a href=\"#二-管理分支\" class=\"headerlink\" title=\"二.管理分支\"></a>二.管理分支</h1><h2 id=\"1-查看分支\"><a href=\"#1-查看分支\" class=\"headerlink\" title=\"1.查看分支\"></a>1.查看分支</h2><a id=\"more\"></a>\n<h3 id=\"1-1-查看本地分支\"><a href=\"#1-1-查看本地分支\" class=\"headerlink\" title=\"1.1.查看本地分支\"></a>1.1.查看本地分支</h3><p>使用git branch命令,如下：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch </span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure></div></p>\n<p>*标识的是你当前所在的分支</p>\n<h3 id=\"1-2-查看远程分支\"><a href=\"#1-2-查看远程分支\" class=\"headerlink\" title=\"1.2.查看远程分支\"></a>1.2.查看远程分支</h3><p>命令如下：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure></div></p>\n<h3 id=\"1-3-查看所有分支\"><a href=\"#1-3-查看所有分支\" class=\"headerlink\" title=\"1.3.查看所有分支\"></a>1.3.查看所有分支</h3><p>命令如下：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"2-本地创建新分支\"><a href=\"#2-本地创建新分支\" class=\"headerlink\" title=\"2.本地创建新分支\"></a>2.本地创建新分支</h2><p>命令如下：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch [branch name]</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"3-切换到新分支\"><a href=\"#3-切换到新分支\" class=\"headerlink\" title=\"3.切换到新分支\"></a>3.切换到新分支</h2><p>命令如下：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [branch name]</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"4-创建-切换分支\"><a href=\"#4-创建-切换分支\" class=\"headerlink\" title=\"4.创建+切换分支\"></a>4.创建+切换分支</h2><p>命令如下：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b [branch name]</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"5-将新分支上传到远程分支中\"><a href=\"#5-将新分支上传到远程分支中\" class=\"headerlink\" title=\"5.将新分支上传到远程分支中\"></a>5.将新分支上传到远程分支中</h2><p>命令如下：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin [branch name]</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"6-删除本地分支\"><a href=\"#6-删除本地分支\" class=\"headerlink\" title=\"6.删除本地分支\"></a>6.删除本地分支</h2><p>命令如下：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d [branch name]</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"7-删除远程分支\"><a href=\"#7-删除远程分支\" class=\"headerlink\" title=\"7.删除远程分支\"></a>7.删除远程分支</h2><p>命令如下：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :[branch name]</span><br></pre></td></tr></table></figure></div></p>\n<p>分支名前冒号代表删除。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一-clone-项目\"><a href=\"#一-clone-项目\" class=\"headerlink\" title=\"一.clone 项目\"></a>一.clone 项目</h1><p>clone git上的项目,如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:ymtonny/myBlog.git</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"二-管理分支\"><a href=\"#二-管理分支\" class=\"headerlink\" title=\"二.管理分支\"></a>二.管理分支</h1><h2 id=\"1-查看分支\"><a href=\"#1-查看分支\" class=\"headerlink\" title=\"1.查看分支\"></a>1.查看分支</h2>","more":"<h3 id=\"1-1-查看本地分支\"><a href=\"#1-1-查看本地分支\" class=\"headerlink\" title=\"1.1.查看本地分支\"></a>1.1.查看本地分支</h3><p>使用git branch命令,如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch </span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure></p>\n<p>*标识的是你当前所在的分支</p>\n<h3 id=\"1-2-查看远程分支\"><a href=\"#1-2-查看远程分支\" class=\"headerlink\" title=\"1.2.查看远程分支\"></a>1.2.查看远程分支</h3><p>命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-3-查看所有分支\"><a href=\"#1-3-查看所有分支\" class=\"headerlink\" title=\"1.3.查看所有分支\"></a>1.3.查看所有分支</h3><p>命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-本地创建新分支\"><a href=\"#2-本地创建新分支\" class=\"headerlink\" title=\"2.本地创建新分支\"></a>2.本地创建新分支</h2><p>命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch [branch name]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-切换到新分支\"><a href=\"#3-切换到新分支\" class=\"headerlink\" title=\"3.切换到新分支\"></a>3.切换到新分支</h2><p>命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [branch name]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-创建-切换分支\"><a href=\"#4-创建-切换分支\" class=\"headerlink\" title=\"4.创建+切换分支\"></a>4.创建+切换分支</h2><p>命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b [branch name]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-将新分支上传到远程分支中\"><a href=\"#5-将新分支上传到远程分支中\" class=\"headerlink\" title=\"5.将新分支上传到远程分支中\"></a>5.将新分支上传到远程分支中</h2><p>命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin [branch name]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-删除本地分支\"><a href=\"#6-删除本地分支\" class=\"headerlink\" title=\"6.删除本地分支\"></a>6.删除本地分支</h2><p>命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d [branch name]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-删除远程分支\"><a href=\"#7-删除远程分支\" class=\"headerlink\" title=\"7.删除远程分支\"></a>7.删除远程分支</h2><p>命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :[branch name]</span><br></pre></td></tr></table></figure></p>\n<p>分支名前冒号代表删除。</p>"},{"title":"前端面试题 --vue","date":"2019-06-19T16:00:00.000Z","_content":"### 1. 说一下Vue的双向绑定数据的原理\n`vue` 实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过 `Object.defineProperty()` 来劫持各个属性的 `setter`，`getter`，在数据变动时发布消息给订阅者，触发相应监听回调\n\n<!--more-->\n\n### 2. 解释单向数据流和双向数据绑定\n 单向数据流： 顾名思义，数据流是单向的。数据流动方向可以跟踪，流动单一，追查问题的时候可以更快捷。缺点就是写起来不太方便。要使UI发生变更就必须创建各种 `action` 来维护对应的 `state`\n \n 双向数据绑定：数据之间是相通的，将数据变更的操作隐藏在框架内部。优点是在表单交互较多的场景下，会简化大量与业务无关的代码。缺点就是无法追踪局部状态的变化，增加了出错时 `debug` 的难度\n\n### 3. Vue 如何去除url中的 `#`\n`vue-router` 默认使用 `hash` 模式，所以在路由加载的时候，项目中的 `url` 会自带 `#`。如果不想使用 `#`， 可以使用 `vue-router` 的另一种模式 `history`\n``` bash\n      new Router({\n            mode: 'history',\n            routes: [ ]\n       }) \n```\n需要注意的是，当我们启用 `history`模式的时候，由于我们的项目是一个单页面应用，所以在路由跳转的时候，就会出现访问不到静态资源而出现`404`的情况，这时候就需要服务端增加一个覆盖所有情况的候选资源：如果 `URL` 匹配不到任何静态资源，则应该返回同一个 `index.html` 页面\n\n### 4.vue生命周期理解\nvue实例有一个完整的生命周期，生命周期也就是指一个实例从开始创建到销毁的这个过程\n\n - `beforeCreated()` 在实例创建之间执行，数据未加载状态 `created()`\n - 在实例创建、数据加载后，能初始化数据，dom渲染之前执行 \n - `beforeMount()` 虚拟`dom`已创建完成，在数据渲染前最后一次更改数据\n - `mounted()` 页面、数据渲染完成，真实dom挂载完成 \n - `beforeUpadate()` 重新渲染之前触发 `updated()`\n - 数据已经更改完成，`dom` 也重新 `render` 完成,更改数据会陷入死循环 \n - `beforeDestory()` 和 `destoryed()`前者是销毁前执行（实例仍然完全可用），后者则是销毁后执行\n\n\n### 5.v-if和v-show区别\n 使用了 `v-if` 的时候，如果值为 `false` ，那么页面将不会有这个 `html` 标签生成。\n \n `v-show` 则是不管值为 `true` 还是 `false` ，`html` 元素都会存在，只是 `CSS` 中的 `display` 显示或隐藏\n\n### 6. `$route`和`$router`的区别\n `$router` 为 `VueRouter` 实例，想要导航到不同 `URL`，则使用 `$router.push` 方法\n\n\n `$route` 为当前 `router` 跳转对象里面可以获取 `name` 、 `path` 、 `query` 、 `params` 等\n","source":"_posts/interview.md","raw":"---\ntitle: 前端面试题 --vue\ndate: 2019-06-20\ncategories:\n - 面试\ntags:\n - vue\n---\n### 1. 说一下Vue的双向绑定数据的原理\n`vue` 实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过 `Object.defineProperty()` 来劫持各个属性的 `setter`，`getter`，在数据变动时发布消息给订阅者，触发相应监听回调\n\n<!--more-->\n\n### 2. 解释单向数据流和双向数据绑定\n 单向数据流： 顾名思义，数据流是单向的。数据流动方向可以跟踪，流动单一，追查问题的时候可以更快捷。缺点就是写起来不太方便。要使UI发生变更就必须创建各种 `action` 来维护对应的 `state`\n \n 双向数据绑定：数据之间是相通的，将数据变更的操作隐藏在框架内部。优点是在表单交互较多的场景下，会简化大量与业务无关的代码。缺点就是无法追踪局部状态的变化，增加了出错时 `debug` 的难度\n\n### 3. Vue 如何去除url中的 `#`\n`vue-router` 默认使用 `hash` 模式，所以在路由加载的时候，项目中的 `url` 会自带 `#`。如果不想使用 `#`， 可以使用 `vue-router` 的另一种模式 `history`\n``` bash\n      new Router({\n            mode: 'history',\n            routes: [ ]\n       }) \n```\n需要注意的是，当我们启用 `history`模式的时候，由于我们的项目是一个单页面应用，所以在路由跳转的时候，就会出现访问不到静态资源而出现`404`的情况，这时候就需要服务端增加一个覆盖所有情况的候选资源：如果 `URL` 匹配不到任何静态资源，则应该返回同一个 `index.html` 页面\n\n### 4.vue生命周期理解\nvue实例有一个完整的生命周期，生命周期也就是指一个实例从开始创建到销毁的这个过程\n\n - `beforeCreated()` 在实例创建之间执行，数据未加载状态 `created()`\n - 在实例创建、数据加载后，能初始化数据，dom渲染之前执行 \n - `beforeMount()` 虚拟`dom`已创建完成，在数据渲染前最后一次更改数据\n - `mounted()` 页面、数据渲染完成，真实dom挂载完成 \n - `beforeUpadate()` 重新渲染之前触发 `updated()`\n - 数据已经更改完成，`dom` 也重新 `render` 完成,更改数据会陷入死循环 \n - `beforeDestory()` 和 `destoryed()`前者是销毁前执行（实例仍然完全可用），后者则是销毁后执行\n\n\n### 5.v-if和v-show区别\n 使用了 `v-if` 的时候，如果值为 `false` ，那么页面将不会有这个 `html` 标签生成。\n \n `v-show` 则是不管值为 `true` 还是 `false` ，`html` 元素都会存在，只是 `CSS` 中的 `display` 显示或隐藏\n\n### 6. `$route`和`$router`的区别\n `$router` 为 `VueRouter` 实例，想要导航到不同 `URL`，则使用 `$router.push` 方法\n\n\n `$route` 为当前 `router` 跳转对象里面可以获取 `name` 、 `path` 、 `query` 、 `params` 等\n","slug":"interview","published":1,"updated":"2019-08-11T08:57:47.294Z","_id":"cjz6qgik7000lrou3wgo4d8r4","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-说一下Vue的双向绑定数据的原理\"><a href=\"#1-说一下Vue的双向绑定数据的原理\" class=\"headerlink\" title=\"1. 说一下Vue的双向绑定数据的原理\"></a>1. 说一下Vue的双向绑定数据的原理</h3><p><code>vue</code> 实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过 <code>Object.defineProperty()</code> 来劫持各个属性的 <code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应监听回调</p>\n<a id=\"more\"></a>\n<h3 id=\"2-解释单向数据流和双向数据绑定\"><a href=\"#2-解释单向数据流和双向数据绑定\" class=\"headerlink\" title=\"2. 解释单向数据流和双向数据绑定\"></a>2. 解释单向数据流和双向数据绑定</h3><p> 单向数据流： 顾名思义，数据流是单向的。数据流动方向可以跟踪，流动单一，追查问题的时候可以更快捷。缺点就是写起来不太方便。要使UI发生变更就必须创建各种 <code>action</code> 来维护对应的 <code>state</code></p>\n<p> 双向数据绑定：数据之间是相通的，将数据变更的操作隐藏在框架内部。优点是在表单交互较多的场景下，会简化大量与业务无关的代码。缺点就是无法追踪局部状态的变化，增加了出错时 <code>debug</code> 的难度</p>\n<h3 id=\"3-Vue-如何去除url中的\"><a href=\"#3-Vue-如何去除url中的\" class=\"headerlink\" title=\"3. Vue 如何去除url中的 #\"></a>3. Vue 如何去除url中的 <code>#</code></h3><p><code>vue-router</code> 默认使用 <code>hash</code> 模式，所以在路由加载的时候，项目中的 <code>url</code> 会自带 <code>#</code>。如果不想使用 <code>#</code>， 可以使用 <code>vue-router</code> 的另一种模式 <code>history</code><br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Router(&#123;</span><br><span class=\"line\">      mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">      routes: [ ]</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure></div></p>\n<p>需要注意的是，当我们启用 <code>history</code>模式的时候，由于我们的项目是一个单页面应用，所以在路由跳转的时候，就会出现访问不到静态资源而出现<code>404</code>的情况，这时候就需要服务端增加一个覆盖所有情况的候选资源：如果 <code>URL</code> 匹配不到任何静态资源，则应该返回同一个 <code>index.html</code> 页面</p>\n<h3 id=\"4-vue生命周期理解\"><a href=\"#4-vue生命周期理解\" class=\"headerlink\" title=\"4.vue生命周期理解\"></a>4.vue生命周期理解</h3><p>vue实例有一个完整的生命周期，生命周期也就是指一个实例从开始创建到销毁的这个过程</p>\n<ul>\n<li><code>beforeCreated()</code> 在实例创建之间执行，数据未加载状态 <code>created()</code></li>\n<li>在实例创建、数据加载后，能初始化数据，dom渲染之前执行 </li>\n<li><code>beforeMount()</code> 虚拟<code>dom</code>已创建完成，在数据渲染前最后一次更改数据</li>\n<li><code>mounted()</code> 页面、数据渲染完成，真实dom挂载完成 </li>\n<li><code>beforeUpadate()</code> 重新渲染之前触发 <code>updated()</code></li>\n<li>数据已经更改完成，<code>dom</code> 也重新 <code>render</code> 完成,更改数据会陷入死循环 </li>\n<li><code>beforeDestory()</code> 和 <code>destoryed()</code>前者是销毁前执行（实例仍然完全可用），后者则是销毁后执行</li>\n</ul>\n<h3 id=\"5-v-if和v-show区别\"><a href=\"#5-v-if和v-show区别\" class=\"headerlink\" title=\"5.v-if和v-show区别\"></a>5.v-if和v-show区别</h3><p> 使用了 <code>v-if</code> 的时候，如果值为 <code>false</code> ，那么页面将不会有这个 <code>html</code> 标签生成。</p>\n<p> <code>v-show</code> 则是不管值为 <code>true</code> 还是 <code>false</code> ，<code>html</code> 元素都会存在，只是 <code>CSS</code> 中的 <code>display</code> 显示或隐藏</p>\n<h3 id=\"6-route和-router的区别\"><a href=\"#6-route和-router的区别\" class=\"headerlink\" title=\"6. $route和$router的区别\"></a>6. <code>$route</code>和<code>$router</code>的区别</h3><p> <code>$router</code> 为 <code>VueRouter</code> 实例，想要导航到不同 <code>URL</code>，则使用 <code>$router.push</code> 方法</p>\n<p> <code>$route</code> 为当前 <code>router</code> 跳转对象里面可以获取 <code>name</code> 、 <code>path</code> 、 <code>query</code> 、 <code>params</code> 等</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-说一下Vue的双向绑定数据的原理\"><a href=\"#1-说一下Vue的双向绑定数据的原理\" class=\"headerlink\" title=\"1. 说一下Vue的双向绑定数据的原理\"></a>1. 说一下Vue的双向绑定数据的原理</h3><p><code>vue</code> 实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过 <code>Object.defineProperty()</code> 来劫持各个属性的 <code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应监听回调</p>","more":"<h3 id=\"2-解释单向数据流和双向数据绑定\"><a href=\"#2-解释单向数据流和双向数据绑定\" class=\"headerlink\" title=\"2. 解释单向数据流和双向数据绑定\"></a>2. 解释单向数据流和双向数据绑定</h3><p> 单向数据流： 顾名思义，数据流是单向的。数据流动方向可以跟踪，流动单一，追查问题的时候可以更快捷。缺点就是写起来不太方便。要使UI发生变更就必须创建各种 <code>action</code> 来维护对应的 <code>state</code></p>\n<p> 双向数据绑定：数据之间是相通的，将数据变更的操作隐藏在框架内部。优点是在表单交互较多的场景下，会简化大量与业务无关的代码。缺点就是无法追踪局部状态的变化，增加了出错时 <code>debug</code> 的难度</p>\n<h3 id=\"3-Vue-如何去除url中的\"><a href=\"#3-Vue-如何去除url中的\" class=\"headerlink\" title=\"3. Vue 如何去除url中的 #\"></a>3. Vue 如何去除url中的 <code>#</code></h3><p><code>vue-router</code> 默认使用 <code>hash</code> 模式，所以在路由加载的时候，项目中的 <code>url</code> 会自带 <code>#</code>。如果不想使用 <code>#</code>， 可以使用 <code>vue-router</code> 的另一种模式 <code>history</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Router(&#123;</span><br><span class=\"line\">      mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">      routes: [ ]</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是，当我们启用 <code>history</code>模式的时候，由于我们的项目是一个单页面应用，所以在路由跳转的时候，就会出现访问不到静态资源而出现<code>404</code>的情况，这时候就需要服务端增加一个覆盖所有情况的候选资源：如果 <code>URL</code> 匹配不到任何静态资源，则应该返回同一个 <code>index.html</code> 页面</p>\n<h3 id=\"4-vue生命周期理解\"><a href=\"#4-vue生命周期理解\" class=\"headerlink\" title=\"4.vue生命周期理解\"></a>4.vue生命周期理解</h3><p>vue实例有一个完整的生命周期，生命周期也就是指一个实例从开始创建到销毁的这个过程</p>\n<ul>\n<li><code>beforeCreated()</code> 在实例创建之间执行，数据未加载状态 <code>created()</code></li>\n<li>在实例创建、数据加载后，能初始化数据，dom渲染之前执行 </li>\n<li><code>beforeMount()</code> 虚拟<code>dom</code>已创建完成，在数据渲染前最后一次更改数据</li>\n<li><code>mounted()</code> 页面、数据渲染完成，真实dom挂载完成 </li>\n<li><code>beforeUpadate()</code> 重新渲染之前触发 <code>updated()</code></li>\n<li>数据已经更改完成，<code>dom</code> 也重新 <code>render</code> 完成,更改数据会陷入死循环 </li>\n<li><code>beforeDestory()</code> 和 <code>destoryed()</code>前者是销毁前执行（实例仍然完全可用），后者则是销毁后执行</li>\n</ul>\n<h3 id=\"5-v-if和v-show区别\"><a href=\"#5-v-if和v-show区别\" class=\"headerlink\" title=\"5.v-if和v-show区别\"></a>5.v-if和v-show区别</h3><p> 使用了 <code>v-if</code> 的时候，如果值为 <code>false</code> ，那么页面将不会有这个 <code>html</code> 标签生成。</p>\n<p> <code>v-show</code> 则是不管值为 <code>true</code> 还是 <code>false</code> ，<code>html</code> 元素都会存在，只是 <code>CSS</code> 中的 <code>display</code> 显示或隐藏</p>\n<h3 id=\"6-route和-router的区别\"><a href=\"#6-route和-router的区别\" class=\"headerlink\" title=\"6. $route和$router的区别\"></a>6. <code>$route</code>和<code>$router</code>的区别</h3><p> <code>$router</code> 为 <code>VueRouter</code> 实例，想要导航到不同 <code>URL</code>，则使用 <code>$router.push</code> 方法</p>\n<p> <code>$route</code> 为当前 <code>router</code> 跳转对象里面可以获取 <code>name</code> 、 <code>path</code> 、 <code>query</code> 、 <code>params</code> 等</p>"},{"title":"vue路由归纳","date":"2019-04-04T16:00:00.000Z","_content":"\n## vue路由的原理\n单页面的一大优势就是，无刷新跳转页面，用户体验好，加载速度快。vue路由的跳转它是无刷新的，共有两种模式，可以通过路由配置文件中去配置`mode`字段，如果不去配置这个`mode`字段，默认路由跳转就为`hash`模式。\n\n`hash`模式，通过在链接后面添加\"#\"号+路由名字，匹配这个字段的变化去触发`hashchange`事件，动态的渲染出页面。\n\n另外一种模式为`history`模式，即使用浏览器的historyAPI,`pushState`和`replaceState`。通过调用`pushState`去操作浏览器的`history`对象，改变当前链接地址，同时结合`window.onpopstate`监控浏览器的返回前进事件，同样可以实现无刷新的跳转页面。`replaceState`和`pushState`的区别就是，前者代表替换，后者代表插入。\n\n<!--more-->\n\n`history`相对于`hash`，就是没有\"#\"号，看着十分清爽。但是用hash模式的反而较多，为什么呢？因为`history`模式还需要后端的配置，否则刷新页面就会返回404。\n\n## vue路由两种传参\n页面传参就两种，`params`和`query`,`params`是以`/params`方式展示，`query`是以`/?query=`方式展示。写法大致都是相同，不过`query`是用`path`来引入，而`params`是用`name`来引入。注意：接收参数的时候是用`route`而不是`router`。`query`像是ajax中的get,而`params`更像是post,刷新页面时`params`参数会丢失,而`query`参数不会丢失。\n``` breach\n//query\nthis.$router.push({\n  path:\"/abc\",\n  query:{id:id}\n});\n//params\nthis.$router.push({\n   name:\"abc\"\n   params:{id:id}\n});\n//接收参数\nthis.$route.query.name\nthis.$route.params.name\n```\n## vue路由跳转\nvue 路由的跳转分成两种，一种是声明式，使用`<router-link>`声明跳转，`to`属性定义跳转的参数。另一种是编程式，使用 `router.go()`、`router.push()`、`router.replace()`方法进行跳转，`go`方法就是与浏览器的history api 的方法相同，可以进行返回上一页等操作。\n``` breach\n// 字符串\nrouter.push('home')\n\n// 对象\nthis.$router.push({path: 'home'})\n\n//命名的路由\nthis.$router.push({name: 'user', params: {userId: 123}})\n\n// 带查询参数，变成/register?plan=private\nthis.$router.push({path: 'register', query: {plan: \"private\"}});\n\n//声明式\n<router-link :to=\"{name:'abc',params:{id:id}}\"></route-link>\n```\n## vue路由守卫\nvue路由守卫分3种，一种是全局路由守卫，通常在实例化路由之后设置，做通用路由的设置，它所有的路由跳转全部都会执行的操作；一种是单独的路由独享守卫，在单个路由定义的时候设置，所有跳转到这个路由的都会执行，一种是组件内的路由守卫，只在组件内生效。\n \n 全局路由守卫：\n \n - `router.beforeEach(to,from,next)`\n - `router.afterEach(to,from,next)`\n\n路由独享守卫：\n  - `beforeEnter(to,from,next)`\n\n组件内守卫：\n  - `beforeRouteEnter(to,from,next)`\n  - `beforeRouteUpdate(to,from,next)`  //动态参数路径改变时，组件实例被复用的时候调用\n  - `beforeRouteLeave(to,from,next)`   //导航离开组件所在路由时被调用\n","source":"_posts/vue-router.md","raw":"---\ntitle: vue路由归纳\ndate: 2019-04-05\ncategories:\n- 技术\ntags:\n- vue\n---\n\n## vue路由的原理\n单页面的一大优势就是，无刷新跳转页面，用户体验好，加载速度快。vue路由的跳转它是无刷新的，共有两种模式，可以通过路由配置文件中去配置`mode`字段，如果不去配置这个`mode`字段，默认路由跳转就为`hash`模式。\n\n`hash`模式，通过在链接后面添加\"#\"号+路由名字，匹配这个字段的变化去触发`hashchange`事件，动态的渲染出页面。\n\n另外一种模式为`history`模式，即使用浏览器的historyAPI,`pushState`和`replaceState`。通过调用`pushState`去操作浏览器的`history`对象，改变当前链接地址，同时结合`window.onpopstate`监控浏览器的返回前进事件，同样可以实现无刷新的跳转页面。`replaceState`和`pushState`的区别就是，前者代表替换，后者代表插入。\n\n<!--more-->\n\n`history`相对于`hash`，就是没有\"#\"号，看着十分清爽。但是用hash模式的反而较多，为什么呢？因为`history`模式还需要后端的配置，否则刷新页面就会返回404。\n\n## vue路由两种传参\n页面传参就两种，`params`和`query`,`params`是以`/params`方式展示，`query`是以`/?query=`方式展示。写法大致都是相同，不过`query`是用`path`来引入，而`params`是用`name`来引入。注意：接收参数的时候是用`route`而不是`router`。`query`像是ajax中的get,而`params`更像是post,刷新页面时`params`参数会丢失,而`query`参数不会丢失。\n``` breach\n//query\nthis.$router.push({\n  path:\"/abc\",\n  query:{id:id}\n});\n//params\nthis.$router.push({\n   name:\"abc\"\n   params:{id:id}\n});\n//接收参数\nthis.$route.query.name\nthis.$route.params.name\n```\n## vue路由跳转\nvue 路由的跳转分成两种，一种是声明式，使用`<router-link>`声明跳转，`to`属性定义跳转的参数。另一种是编程式，使用 `router.go()`、`router.push()`、`router.replace()`方法进行跳转，`go`方法就是与浏览器的history api 的方法相同，可以进行返回上一页等操作。\n``` breach\n// 字符串\nrouter.push('home')\n\n// 对象\nthis.$router.push({path: 'home'})\n\n//命名的路由\nthis.$router.push({name: 'user', params: {userId: 123}})\n\n// 带查询参数，变成/register?plan=private\nthis.$router.push({path: 'register', query: {plan: \"private\"}});\n\n//声明式\n<router-link :to=\"{name:'abc',params:{id:id}}\"></route-link>\n```\n## vue路由守卫\nvue路由守卫分3种，一种是全局路由守卫，通常在实例化路由之后设置，做通用路由的设置，它所有的路由跳转全部都会执行的操作；一种是单独的路由独享守卫，在单个路由定义的时候设置，所有跳转到这个路由的都会执行，一种是组件内的路由守卫，只在组件内生效。\n \n 全局路由守卫：\n \n - `router.beforeEach(to,from,next)`\n - `router.afterEach(to,from,next)`\n\n路由独享守卫：\n  - `beforeEnter(to,from,next)`\n\n组件内守卫：\n  - `beforeRouteEnter(to,from,next)`\n  - `beforeRouteUpdate(to,from,next)`  //动态参数路径改变时，组件实例被复用的时候调用\n  - `beforeRouteLeave(to,from,next)`   //导航离开组件所在路由时被调用\n","slug":"vue-router","published":1,"updated":"2019-08-11T08:56:45.673Z","_id":"cjz6qgikb000prou3xegxx39g","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"vue路由的原理\"><a href=\"#vue路由的原理\" class=\"headerlink\" title=\"vue路由的原理\"></a>vue路由的原理</h2><p>单页面的一大优势就是，无刷新跳转页面，用户体验好，加载速度快。vue路由的跳转它是无刷新的，共有两种模式，可以通过路由配置文件中去配置<code>mode</code>字段，如果不去配置这个<code>mode</code>字段，默认路由跳转就为<code>hash</code>模式。</p>\n<p><code>hash</code>模式，通过在链接后面添加”#”号+路由名字，匹配这个字段的变化去触发<code>hashchange</code>事件，动态的渲染出页面。</p>\n<p>另外一种模式为<code>history</code>模式，即使用浏览器的historyAPI,<code>pushState</code>和<code>replaceState</code>。通过调用<code>pushState</code>去操作浏览器的<code>history</code>对象，改变当前链接地址，同时结合<code>window.onpopstate</code>监控浏览器的返回前进事件，同样可以实现无刷新的跳转页面。<code>replaceState</code>和<code>pushState</code>的区别就是，前者代表替换，后者代表插入。</p>\n<a id=\"more\"></a>\n<p><code>history</code>相对于<code>hash</code>，就是没有”#”号，看着十分清爽。但是用hash模式的反而较多，为什么呢？因为<code>history</code>模式还需要后端的配置，否则刷新页面就会返回404。</p>\n<h2 id=\"vue路由两种传参\"><a href=\"#vue路由两种传参\" class=\"headerlink\" title=\"vue路由两种传参\"></a>vue路由两种传参</h2><p>页面传参就两种，<code>params</code>和<code>query</code>,<code>params</code>是以<code>/params</code>方式展示，<code>query</code>是以<code>/?query=</code>方式展示。写法大致都是相同，不过<code>query</code>是用<code>path</code>来引入，而<code>params</code>是用<code>name</code>来引入。注意：接收参数的时候是用<code>route</code>而不是<code>router</code>。<code>query</code>像是ajax中的get,而<code>params</code>更像是post,刷新页面时<code>params</code>参数会丢失,而<code>query</code>参数不会丢失。<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//query</span><br><span class=\"line\">this.$router.push(&#123;</span><br><span class=\"line\">  path:&quot;/abc&quot;,</span><br><span class=\"line\">  query:&#123;id:id&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//params</span><br><span class=\"line\">this.$router.push(&#123;</span><br><span class=\"line\">   name:&quot;abc&quot;</span><br><span class=\"line\">   params:&#123;id:id&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//接收参数</span><br><span class=\"line\">this.$route.query.name</span><br><span class=\"line\">this.$route.params.name</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"vue路由跳转\"><a href=\"#vue路由跳转\" class=\"headerlink\" title=\"vue路由跳转\"></a>vue路由跳转</h2><p>vue 路由的跳转分成两种，一种是声明式，使用<code>&lt;router-link&gt;</code>声明跳转，<code>to</code>属性定义跳转的参数。另一种是编程式，使用 <code>router.go()</code>、<code>router.push()</code>、<code>router.replace()</code>方法进行跳转，<code>go</code>方法就是与浏览器的history api 的方法相同，可以进行返回上一页等操作。<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 字符串</span><br><span class=\"line\">router.push(&apos;home&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 对象</span><br><span class=\"line\">this.$router.push(&#123;path: &apos;home&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//命名的路由</span><br><span class=\"line\">this.$router.push(&#123;name: &apos;user&apos;, params: &#123;userId: 123&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 带查询参数，变成/register?plan=private</span><br><span class=\"line\">this.$router.push(&#123;path: &apos;register&apos;, query: &#123;plan: &quot;private&quot;&#125;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//声明式</span><br><span class=\"line\">&lt;router-link :to=&quot;&#123;name:&apos;abc&apos;,params:&#123;id:id&#125;&#125;&quot;&gt;&lt;/route-link&gt;</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"vue路由守卫\"><a href=\"#vue路由守卫\" class=\"headerlink\" title=\"vue路由守卫\"></a>vue路由守卫</h2><p>vue路由守卫分3种，一种是全局路由守卫，通常在实例化路由之后设置，做通用路由的设置，它所有的路由跳转全部都会执行的操作；一种是单独的路由独享守卫，在单个路由定义的时候设置，所有跳转到这个路由的都会执行，一种是组件内的路由守卫，只在组件内生效。</p>\n<p> 全局路由守卫：</p>\n<ul>\n<li><code>router.beforeEach(to,from,next)</code></li>\n<li><code>router.afterEach(to,from,next)</code></li>\n</ul>\n<p>路由独享守卫：</p>\n<ul>\n<li><code>beforeEnter(to,from,next)</code></li>\n</ul>\n<p>组件内守卫：</p>\n<ul>\n<li><code>beforeRouteEnter(to,from,next)</code></li>\n<li><code>beforeRouteUpdate(to,from,next)</code>  //动态参数路径改变时，组件实例被复用的时候调用</li>\n<li><code>beforeRouteLeave(to,from,next)</code>   //导航离开组件所在路由时被调用</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"vue路由的原理\"><a href=\"#vue路由的原理\" class=\"headerlink\" title=\"vue路由的原理\"></a>vue路由的原理</h2><p>单页面的一大优势就是，无刷新跳转页面，用户体验好，加载速度快。vue路由的跳转它是无刷新的，共有两种模式，可以通过路由配置文件中去配置<code>mode</code>字段，如果不去配置这个<code>mode</code>字段，默认路由跳转就为<code>hash</code>模式。</p>\n<p><code>hash</code>模式，通过在链接后面添加”#”号+路由名字，匹配这个字段的变化去触发<code>hashchange</code>事件，动态的渲染出页面。</p>\n<p>另外一种模式为<code>history</code>模式，即使用浏览器的historyAPI,<code>pushState</code>和<code>replaceState</code>。通过调用<code>pushState</code>去操作浏览器的<code>history</code>对象，改变当前链接地址，同时结合<code>window.onpopstate</code>监控浏览器的返回前进事件，同样可以实现无刷新的跳转页面。<code>replaceState</code>和<code>pushState</code>的区别就是，前者代表替换，后者代表插入。</p>","more":"<p><code>history</code>相对于<code>hash</code>，就是没有”#”号，看着十分清爽。但是用hash模式的反而较多，为什么呢？因为<code>history</code>模式还需要后端的配置，否则刷新页面就会返回404。</p>\n<h2 id=\"vue路由两种传参\"><a href=\"#vue路由两种传参\" class=\"headerlink\" title=\"vue路由两种传参\"></a>vue路由两种传参</h2><p>页面传参就两种，<code>params</code>和<code>query</code>,<code>params</code>是以<code>/params</code>方式展示，<code>query</code>是以<code>/?query=</code>方式展示。写法大致都是相同，不过<code>query</code>是用<code>path</code>来引入，而<code>params</code>是用<code>name</code>来引入。注意：接收参数的时候是用<code>route</code>而不是<code>router</code>。<code>query</code>像是ajax中的get,而<code>params</code>更像是post,刷新页面时<code>params</code>参数会丢失,而<code>query</code>参数不会丢失。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//query</span><br><span class=\"line\">this.$router.push(&#123;</span><br><span class=\"line\">  path:&quot;/abc&quot;,</span><br><span class=\"line\">  query:&#123;id:id&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//params</span><br><span class=\"line\">this.$router.push(&#123;</span><br><span class=\"line\">   name:&quot;abc&quot;</span><br><span class=\"line\">   params:&#123;id:id&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//接收参数</span><br><span class=\"line\">this.$route.query.name</span><br><span class=\"line\">this.$route.params.name</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"vue路由跳转\"><a href=\"#vue路由跳转\" class=\"headerlink\" title=\"vue路由跳转\"></a>vue路由跳转</h2><p>vue 路由的跳转分成两种，一种是声明式，使用<code>&lt;router-link&gt;</code>声明跳转，<code>to</code>属性定义跳转的参数。另一种是编程式，使用 <code>router.go()</code>、<code>router.push()</code>、<code>router.replace()</code>方法进行跳转，<code>go</code>方法就是与浏览器的history api 的方法相同，可以进行返回上一页等操作。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 字符串</span><br><span class=\"line\">router.push(&apos;home&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 对象</span><br><span class=\"line\">this.$router.push(&#123;path: &apos;home&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//命名的路由</span><br><span class=\"line\">this.$router.push(&#123;name: &apos;user&apos;, params: &#123;userId: 123&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 带查询参数，变成/register?plan=private</span><br><span class=\"line\">this.$router.push(&#123;path: &apos;register&apos;, query: &#123;plan: &quot;private&quot;&#125;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//声明式</span><br><span class=\"line\">&lt;router-link :to=&quot;&#123;name:&apos;abc&apos;,params:&#123;id:id&#125;&#125;&quot;&gt;&lt;/route-link&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"vue路由守卫\"><a href=\"#vue路由守卫\" class=\"headerlink\" title=\"vue路由守卫\"></a>vue路由守卫</h2><p>vue路由守卫分3种，一种是全局路由守卫，通常在实例化路由之后设置，做通用路由的设置，它所有的路由跳转全部都会执行的操作；一种是单独的路由独享守卫，在单个路由定义的时候设置，所有跳转到这个路由的都会执行，一种是组件内的路由守卫，只在组件内生效。</p>\n<p> 全局路由守卫：</p>\n<ul>\n<li><code>router.beforeEach(to,from,next)</code></li>\n<li><code>router.afterEach(to,from,next)</code></li>\n</ul>\n<p>路由独享守卫：</p>\n<ul>\n<li><code>beforeEnter(to,from,next)</code></li>\n</ul>\n<p>组件内守卫：</p>\n<ul>\n<li><code>beforeRouteEnter(to,from,next)</code></li>\n<li><code>beforeRouteUpdate(to,from,next)</code>  //动态参数路径改变时，组件实例被复用的时候调用</li>\n<li><code>beforeRouteLeave(to,from,next)</code>   //导航离开组件所在路由时被调用</li>\n</ul>"},{"title":"关于vuex","date":"2019-05-04T16:00:00.000Z","_content":"## vuex数据流\n说实话，看了官方文档我并不清楚vuex到底是个什么东西，通过例子，我知道如何使用后，我才慢慢理解一点。我的理解就是：为什么会存在组件不能通信？简单粗暴的回答就是，变量的作用域导致的，vue的每一个组件都有自己的生命周期，都是独立存在的个体。vuex就是在根组件创建一个叫state的全局变量，让不同组件共享这个变量，并且定义了一系列方法和规范，也就是action、mutation等等，去统一触发这个全局变量也就是state。\n<!--more-->\n## JS\n\n``` bash\n// store/index.js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  state () {\n    return {\n      monitorInfo: {\n        name: '',\n        description: ''\n      }\n    }\n  },\n  actions: {\n    updateMonitorInfo: ({commit}, info) => {\n      commit('UPDATE_MONITOR_INFO', info)\n    }\n  },\n  mutations: {\n    UPDATE_MONITOR_INFO: (state, info) => {\n      window.localStorage.setItem('monitorInfo', JSON.stringify(info))\n      state.monitorInfo = info\n    }\n  },\n  getters: {\n    monitorInfo: (state) => {\n      if (!state.monitorInfo.name) {\n        state.monitorInfo = JSON.parse(window.localStorage.getItem('monitorInfo'))\n      }\n      return state.monitorInfo\n    }\n  },\n  modules: {\n  }\n})\nexport default store\n```\n\n## html\n```brash\n<!-- list 兄弟组件的发送方-->\n<template>\n\n</template>\n<script>\n  import { mapActions } from 'vuex'\n  export default {\n    data () {\n      return {\n      }\n    },\n    computed: {\n    },\n    methods: {  \n      ...mapActions(['updateMonitorInfo']),\n      goNextPage (row, routerName) {\n        let monitorInfo = {\n          name: row.name,\n          serviceUrl: row.serviceUrl,\n          description: row.info.description\n        }\n        this.updateMonitorInfo(monitorInfo)\n      },\n    },\n    mounted () {\n    }\n  }\n</script>\n```\n```brash\n<!-- monitor.vue  兄弟组件接收方-->\n<template>\n  <span>{{monitorInfo.name}}</span>\n  <span>{{monitorInfo.description}}</span>\n</template>\n\n<script>\n  import { mapGetters } from 'vuex'\n  export default {\n    data () {\n      return {\n      }\n    },\n    computed: {\n      ...mapGetters(['monitorInfo'])\n    },\n    methods: {   \n    },\n    mounted () {\n    }\n  }\n</script>\n```","source":"_posts/vue-interview.md","raw":"---\ntitle: 关于vuex\ndate: 2019-05-05\ncategories: \n- 技术\ntags:\n- vue\n---\n## vuex数据流\n说实话，看了官方文档我并不清楚vuex到底是个什么东西，通过例子，我知道如何使用后，我才慢慢理解一点。我的理解就是：为什么会存在组件不能通信？简单粗暴的回答就是，变量的作用域导致的，vue的每一个组件都有自己的生命周期，都是独立存在的个体。vuex就是在根组件创建一个叫state的全局变量，让不同组件共享这个变量，并且定义了一系列方法和规范，也就是action、mutation等等，去统一触发这个全局变量也就是state。\n<!--more-->\n## JS\n\n``` bash\n// store/index.js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  state () {\n    return {\n      monitorInfo: {\n        name: '',\n        description: ''\n      }\n    }\n  },\n  actions: {\n    updateMonitorInfo: ({commit}, info) => {\n      commit('UPDATE_MONITOR_INFO', info)\n    }\n  },\n  mutations: {\n    UPDATE_MONITOR_INFO: (state, info) => {\n      window.localStorage.setItem('monitorInfo', JSON.stringify(info))\n      state.monitorInfo = info\n    }\n  },\n  getters: {\n    monitorInfo: (state) => {\n      if (!state.monitorInfo.name) {\n        state.monitorInfo = JSON.parse(window.localStorage.getItem('monitorInfo'))\n      }\n      return state.monitorInfo\n    }\n  },\n  modules: {\n  }\n})\nexport default store\n```\n\n## html\n```brash\n<!-- list 兄弟组件的发送方-->\n<template>\n\n</template>\n<script>\n  import { mapActions } from 'vuex'\n  export default {\n    data () {\n      return {\n      }\n    },\n    computed: {\n    },\n    methods: {  \n      ...mapActions(['updateMonitorInfo']),\n      goNextPage (row, routerName) {\n        let monitorInfo = {\n          name: row.name,\n          serviceUrl: row.serviceUrl,\n          description: row.info.description\n        }\n        this.updateMonitorInfo(monitorInfo)\n      },\n    },\n    mounted () {\n    }\n  }\n</script>\n```\n```brash\n<!-- monitor.vue  兄弟组件接收方-->\n<template>\n  <span>{{monitorInfo.name}}</span>\n  <span>{{monitorInfo.description}}</span>\n</template>\n\n<script>\n  import { mapGetters } from 'vuex'\n  export default {\n    data () {\n      return {\n      }\n    },\n    computed: {\n      ...mapGetters(['monitorInfo'])\n    },\n    methods: {   \n    },\n    mounted () {\n    }\n  }\n</script>\n```","slug":"vue-interview","published":1,"updated":"2019-08-11T08:57:02.123Z","_id":"cjz6qgike000srou37ph5k4jt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"vuex数据流\"><a href=\"#vuex数据流\" class=\"headerlink\" title=\"vuex数据流\"></a>vuex数据流</h2><p>说实话，看了官方文档我并不清楚vuex到底是个什么东西，通过例子，我知道如何使用后，我才慢慢理解一点。我的理解就是：为什么会存在组件不能通信？简单粗暴的回答就是，变量的作用域导致的，vue的每一个组件都有自己的生命周期，都是独立存在的个体。vuex就是在根组件创建一个叫state的全局变量，让不同组件共享这个变量，并且定义了一系列方法和规范，也就是action、mutation等等，去统一触发这个全局变量也就是state。<br><a id=\"more\"></a></p>\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight /bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// store/index.js</span><br><span class=\"line\">import Vue from <span class=\"string\">'vue'</span></span><br><span class=\"line\">import Vuex from <span class=\"string\">'vuex'</span></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\">const store = new Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">state</span></span> () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">      monitorInfo: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">''</span>,</span><br><span class=\"line\">        description: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    updateMonitorInfo: (&#123;commit&#125;, info) =&gt; &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'UPDATE_MONITOR_INFO'</span>, info)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    UPDATE_MONITOR_INFO: (state, info) =&gt; &#123;</span><br><span class=\"line\">      window.localStorage.setItem(<span class=\"string\">'monitorInfo'</span>, JSON.stringify(info))</span><br><span class=\"line\">      state.monitorInfo = info</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    monitorInfo: (state) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!state.monitorInfo.name) &#123;</span><br><span class=\"line\">        state.monitorInfo = JSON.parse(window.localStorage.getItem(<span class=\"string\">'monitorInfo'</span>))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> state.monitorInfo</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">export</span> default store</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h2><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- list 兄弟组件的发送方--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import &#123; mapActions &#125; from &apos;vuex&apos;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;  </span><br><span class=\"line\">      ...mapActions([&apos;updateMonitorInfo&apos;]),</span><br><span class=\"line\">      goNextPage (row, routerName) &#123;</span><br><span class=\"line\">        let monitorInfo = &#123;</span><br><span class=\"line\">          name: row.name,</span><br><span class=\"line\">          serviceUrl: row.serviceUrl,</span><br><span class=\"line\">          description: row.info.description</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.updateMonitorInfo(monitorInfo)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted () &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- monitor.vue  兄弟组件接收方--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;span&gt;&#123;&#123;monitorInfo.name&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">  &lt;span&gt;&#123;&#123;monitorInfo.description&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import &#123; mapGetters &#125; from &apos;vuex&apos;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">      ...mapGetters([&apos;monitorInfo&apos;])</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;   </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted () &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>","site":{"data":{}},"excerpt":"<h2 id=\"vuex数据流\"><a href=\"#vuex数据流\" class=\"headerlink\" title=\"vuex数据流\"></a>vuex数据流</h2><p>说实话，看了官方文档我并不清楚vuex到底是个什么东西，通过例子，我知道如何使用后，我才慢慢理解一点。我的理解就是：为什么会存在组件不能通信？简单粗暴的回答就是，变量的作用域导致的，vue的每一个组件都有自己的生命周期，都是独立存在的个体。vuex就是在根组件创建一个叫state的全局变量，让不同组件共享这个变量，并且定义了一系列方法和规范，也就是action、mutation等等，去统一触发这个全局变量也就是state。<br>","more":"</p>\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// store/index.js</span><br><span class=\"line\">import Vue from <span class=\"string\">'vue'</span></span><br><span class=\"line\">import Vuex from <span class=\"string\">'vuex'</span></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\">const store = new Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">state</span></span> () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">      monitorInfo: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">''</span>,</span><br><span class=\"line\">        description: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    updateMonitorInfo: (&#123;commit&#125;, info) =&gt; &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'UPDATE_MONITOR_INFO'</span>, info)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    UPDATE_MONITOR_INFO: (state, info) =&gt; &#123;</span><br><span class=\"line\">      window.localStorage.setItem(<span class=\"string\">'monitorInfo'</span>, JSON.stringify(info))</span><br><span class=\"line\">      state.monitorInfo = info</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    monitorInfo: (state) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!state.monitorInfo.name) &#123;</span><br><span class=\"line\">        state.monitorInfo = JSON.parse(window.localStorage.getItem(<span class=\"string\">'monitorInfo'</span>))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> state.monitorInfo</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">export</span> default store</span><br></pre></td></tr></table></figure>\n<h2 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- list 兄弟组件的发送方--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import &#123; mapActions &#125; from &apos;vuex&apos;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;  </span><br><span class=\"line\">      ...mapActions([&apos;updateMonitorInfo&apos;]),</span><br><span class=\"line\">      goNextPage (row, routerName) &#123;</span><br><span class=\"line\">        let monitorInfo = &#123;</span><br><span class=\"line\">          name: row.name,</span><br><span class=\"line\">          serviceUrl: row.serviceUrl,</span><br><span class=\"line\">          description: row.info.description</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.updateMonitorInfo(monitorInfo)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted () &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- monitor.vue  兄弟组件接收方--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;span&gt;&#123;&#123;monitorInfo.name&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">  &lt;span&gt;&#123;&#123;monitorInfo.description&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import &#123; mapGetters &#125; from &apos;vuex&apos;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">      ...mapGetters([&apos;monitorInfo&apos;])</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;   </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted () &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"javascript数据属性和访问器属性","date":"2019-06-18T16:00:00.000Z","_content":"## 前言\n在`javascript`中，我们访问对象的时候可以直接通过`obj.name`进行访问，删除时可以直接通过`delete obj.name`进行删除，那么你真的知道它为什么能直接访问或则删除么？如果你知道`javascript`中的数据属性，那就自然知道为什么能访问了；如果不知道呢，咱就接着往下看。\n<!--more-->\n``` breach\n let obj = {\n    name:\"abc\"\n }\n console.log(obj.name)\n```\n## 数据属性\n在`javascript`中数据属性分为以下几种：\n - `configurable`:表示能否通过delete删除属性，从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认为true。\n - `enumerable`:表示能否通过`fon-in`循环返回属性，默认为true。\n - `writable`:表示能否修改属性的值，默认为true。\n - `value`:表示属性的数据值。默认为undefind。\n\n接下来我们尝试理解上面的含义，首先创建一个对象：\n``` breach\n let obj = {\n   name:\"张三\",\n   age:12\n }\n```\n### 1.configurable\n根据configurable的定义，我们通过`Object.defineProperty`修改obj的name属性的数据属性`configurable`为false\n``` breach\n  Object.defineProperty(obj,\"name\",{\n   configurable:false\n  }\n```\n根据上面的定义，我们把configurable设为false时，我们不能通过delete进行删除属性,不能修改属性的特性，不能把属性修改为访问器属性。\n删除属性：\n![image](http://wx1.sinaimg.cn/large/005SNrnIgy1g281hehvbwj30cr064mx9.jpg)\n修改属性特性：\n![image](http://wx4.sinaimg.cn/large/005SNrnIgy1g281m3gn70j30b70353yg.jpg)\n当我们把configurable属性修改为false的时候就不能再改回为true了，同时修改enumerable属性也会受到限制，当尝试修改时会报错。\n### 2.enumerable\n根据上面的定义，我们重新定义并修改name属性的enumerable为false，然后用for in遍历属性对象。\n``` breach\n  Object.defineProperty(obj,\"name\",{\n    enumerable:false\n  })\n  for(let key in obj){\n    console.log(key+\"--\"+obj[key])\n  }\n  //输出\n  age--12\n```\n因为属性name的enumerable修改为了false,所以当我们用for in循环遍历obj对象时，我们无法遍历到name属性，所以上面代码只会打印age属性。\n### 3.writable和value\nvalue属性的值是否能被修改是根据writable确定的，当我们把writable的值设为true的时候，value可以被修改，否在反之。\n![image](http://wx1.sinaimg.cn/large/005SNrnIgy1g2821jk29pj30by05jdfu.jpg)\n所以，当writable为false时，我们不能修改属性值，这里需要注意的是，如果configurable为false，此时我们可以将writable,但如果再设回为true就会报错。\n\n## 访问器属性\n访问器属性一共有四个，分别为`configurable`,`enumerable`,`get`,`set`，其中configurable和enumerable和数据属性中的是一样的，这里就不再进行说明\n\n - get:在读取属性的时候会调用，默认值为undefind。\n - set:在设置属性的时候会调用，默认为undefind。\n\n同样的我们可以通过`Object.defineProperty`对访问器属性进行设定。有兴趣的小伙伴下来自己试试吧，今天没时间啦(*^_^*)。\n\n","source":"_posts/javascript.md","raw":"---\ntitle: javascript数据属性和访问器属性\ndate: 2019-06-19\ncategories:\n - 技术\ntags:\n - js\n---\n## 前言\n在`javascript`中，我们访问对象的时候可以直接通过`obj.name`进行访问，删除时可以直接通过`delete obj.name`进行删除，那么你真的知道它为什么能直接访问或则删除么？如果你知道`javascript`中的数据属性，那就自然知道为什么能访问了；如果不知道呢，咱就接着往下看。\n<!--more-->\n``` breach\n let obj = {\n    name:\"abc\"\n }\n console.log(obj.name)\n```\n## 数据属性\n在`javascript`中数据属性分为以下几种：\n - `configurable`:表示能否通过delete删除属性，从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认为true。\n - `enumerable`:表示能否通过`fon-in`循环返回属性，默认为true。\n - `writable`:表示能否修改属性的值，默认为true。\n - `value`:表示属性的数据值。默认为undefind。\n\n接下来我们尝试理解上面的含义，首先创建一个对象：\n``` breach\n let obj = {\n   name:\"张三\",\n   age:12\n }\n```\n### 1.configurable\n根据configurable的定义，我们通过`Object.defineProperty`修改obj的name属性的数据属性`configurable`为false\n``` breach\n  Object.defineProperty(obj,\"name\",{\n   configurable:false\n  }\n```\n根据上面的定义，我们把configurable设为false时，我们不能通过delete进行删除属性,不能修改属性的特性，不能把属性修改为访问器属性。\n删除属性：\n![image](http://wx1.sinaimg.cn/large/005SNrnIgy1g281hehvbwj30cr064mx9.jpg)\n修改属性特性：\n![image](http://wx4.sinaimg.cn/large/005SNrnIgy1g281m3gn70j30b70353yg.jpg)\n当我们把configurable属性修改为false的时候就不能再改回为true了，同时修改enumerable属性也会受到限制，当尝试修改时会报错。\n### 2.enumerable\n根据上面的定义，我们重新定义并修改name属性的enumerable为false，然后用for in遍历属性对象。\n``` breach\n  Object.defineProperty(obj,\"name\",{\n    enumerable:false\n  })\n  for(let key in obj){\n    console.log(key+\"--\"+obj[key])\n  }\n  //输出\n  age--12\n```\n因为属性name的enumerable修改为了false,所以当我们用for in循环遍历obj对象时，我们无法遍历到name属性，所以上面代码只会打印age属性。\n### 3.writable和value\nvalue属性的值是否能被修改是根据writable确定的，当我们把writable的值设为true的时候，value可以被修改，否在反之。\n![image](http://wx1.sinaimg.cn/large/005SNrnIgy1g2821jk29pj30by05jdfu.jpg)\n所以，当writable为false时，我们不能修改属性值，这里需要注意的是，如果configurable为false，此时我们可以将writable,但如果再设回为true就会报错。\n\n## 访问器属性\n访问器属性一共有四个，分别为`configurable`,`enumerable`,`get`,`set`，其中configurable和enumerable和数据属性中的是一样的，这里就不再进行说明\n\n - get:在读取属性的时候会调用，默认值为undefind。\n - set:在设置属性的时候会调用，默认为undefind。\n\n同样的我们可以通过`Object.defineProperty`对访问器属性进行设定。有兴趣的小伙伴下来自己试试吧，今天没时间啦(*^_^*)。\n\n","slug":"javascript","published":1,"updated":"2019-08-11T08:57:35.185Z","_id":"cjz6qgikh000wrou3it1frn4u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在<code>javascript</code>中，我们访问对象的时候可以直接通过<code>obj.name</code>进行访问，删除时可以直接通过<code>delete obj.name</code>进行删除，那么你真的知道它为什么能直接访问或则删除么？如果你知道<code>javascript</code>中的数据属性，那就自然知道为什么能访问了；如果不知道呢，咱就接着往下看。<br><a id=\"more\"></a><br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">   name:&quot;abc&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(obj.name)</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h2><p>在<code>javascript</code>中数据属性分为以下几种：</p>\n<ul>\n<li><code>configurable</code>:表示能否通过delete删除属性，从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认为true。</li>\n<li><code>enumerable</code>:表示能否通过<code>fon-in</code>循环返回属性，默认为true。</li>\n<li><code>writable</code>:表示能否修改属性的值，默认为true。</li>\n<li><code>value</code>:表示属性的数据值。默认为undefind。</li>\n</ul>\n<p>接下来我们尝试理解上面的含义，首先创建一个对象：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  name:&quot;张三&quot;,</span><br><span class=\"line\">  age:12</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></p>\n<h3 id=\"1-configurable\"><a href=\"#1-configurable\" class=\"headerlink\" title=\"1.configurable\"></a>1.configurable</h3><p>根据configurable的定义，我们通过<code>Object.defineProperty</code>修改obj的name属性的数据属性<code>configurable</code>为false<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj,&quot;name&quot;,&#123;</span><br><span class=\"line\"> configurable:false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></p>\n<p>根据上面的定义，我们把configurable设为false时，我们不能通过delete进行删除属性,不能修改属性的特性，不能把属性修改为访问器属性。<br>删除属性：<br><img src=\"http://wx1.sinaimg.cn/large/005SNrnIgy1g281hehvbwj30cr064mx9.jpg\" alt=\"image\"><br>修改属性特性：<br><img src=\"http://wx4.sinaimg.cn/large/005SNrnIgy1g281m3gn70j30b70353yg.jpg\" alt=\"image\"><br>当我们把configurable属性修改为false的时候就不能再改回为true了，同时修改enumerable属性也会受到限制，当尝试修改时会报错。</p>\n<h3 id=\"2-enumerable\"><a href=\"#2-enumerable\" class=\"headerlink\" title=\"2.enumerable\"></a>2.enumerable</h3><p>根据上面的定义，我们重新定义并修改name属性的enumerable为false，然后用for in遍历属性对象。<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj,&quot;name&quot;,&#123;</span><br><span class=\"line\">  enumerable:false</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">for(let key in obj)&#123;</span><br><span class=\"line\">  console.log(key+&quot;--&quot;+obj[key])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">age--12</span><br></pre></td></tr></table></figure></div></p>\n<p>因为属性name的enumerable修改为了false,所以当我们用for in循环遍历obj对象时，我们无法遍历到name属性，所以上面代码只会打印age属性。</p>\n<h3 id=\"3-writable和value\"><a href=\"#3-writable和value\" class=\"headerlink\" title=\"3.writable和value\"></a>3.writable和value</h3><p>value属性的值是否能被修改是根据writable确定的，当我们把writable的值设为true的时候，value可以被修改，否在反之。<br><img src=\"http://wx1.sinaimg.cn/large/005SNrnIgy1g2821jk29pj30by05jdfu.jpg\" alt=\"image\"><br>所以，当writable为false时，我们不能修改属性值，这里需要注意的是，如果configurable为false，此时我们可以将writable,但如果再设回为true就会报错。</p>\n<h2 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h2><p>访问器属性一共有四个，分别为<code>configurable</code>,<code>enumerable</code>,<code>get</code>,<code>set</code>，其中configurable和enumerable和数据属性中的是一样的，这里就不再进行说明</p>\n<ul>\n<li>get:在读取属性的时候会调用，默认值为undefind。</li>\n<li>set:在设置属性的时候会调用，默认为undefind。</li>\n</ul>\n<p>同样的我们可以通过<code>Object.defineProperty</code>对访问器属性进行设定。有兴趣的小伙伴下来自己试试吧，今天没时间啦(<em>^_^</em>)。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在<code>javascript</code>中，我们访问对象的时候可以直接通过<code>obj.name</code>进行访问，删除时可以直接通过<code>delete obj.name</code>进行删除，那么你真的知道它为什么能直接访问或则删除么？如果你知道<code>javascript</code>中的数据属性，那就自然知道为什么能访问了；如果不知道呢，咱就接着往下看。<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">   name:&quot;abc&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(obj.name)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h2><p>在<code>javascript</code>中数据属性分为以下几种：</p>\n<ul>\n<li><code>configurable</code>:表示能否通过delete删除属性，从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认为true。</li>\n<li><code>enumerable</code>:表示能否通过<code>fon-in</code>循环返回属性，默认为true。</li>\n<li><code>writable</code>:表示能否修改属性的值，默认为true。</li>\n<li><code>value</code>:表示属性的数据值。默认为undefind。</li>\n</ul>\n<p>接下来我们尝试理解上面的含义，首先创建一个对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  name:&quot;张三&quot;,</span><br><span class=\"line\">  age:12</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-configurable\"><a href=\"#1-configurable\" class=\"headerlink\" title=\"1.configurable\"></a>1.configurable</h3><p>根据configurable的定义，我们通过<code>Object.defineProperty</code>修改obj的name属性的数据属性<code>configurable</code>为false<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj,&quot;name&quot;,&#123;</span><br><span class=\"line\"> configurable:false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据上面的定义，我们把configurable设为false时，我们不能通过delete进行删除属性,不能修改属性的特性，不能把属性修改为访问器属性。<br>删除属性：<br><img src=\"http://wx1.sinaimg.cn/large/005SNrnIgy1g281hehvbwj30cr064mx9.jpg\" alt=\"image\"><br>修改属性特性：<br><img src=\"http://wx4.sinaimg.cn/large/005SNrnIgy1g281m3gn70j30b70353yg.jpg\" alt=\"image\"><br>当我们把configurable属性修改为false的时候就不能再改回为true了，同时修改enumerable属性也会受到限制，当尝试修改时会报错。</p>\n<h3 id=\"2-enumerable\"><a href=\"#2-enumerable\" class=\"headerlink\" title=\"2.enumerable\"></a>2.enumerable</h3><p>根据上面的定义，我们重新定义并修改name属性的enumerable为false，然后用for in遍历属性对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj,&quot;name&quot;,&#123;</span><br><span class=\"line\">  enumerable:false</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">for(let key in obj)&#123;</span><br><span class=\"line\">  console.log(key+&quot;--&quot;+obj[key])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">age--12</span><br></pre></td></tr></table></figure></p>\n<p>因为属性name的enumerable修改为了false,所以当我们用for in循环遍历obj对象时，我们无法遍历到name属性，所以上面代码只会打印age属性。</p>\n<h3 id=\"3-writable和value\"><a href=\"#3-writable和value\" class=\"headerlink\" title=\"3.writable和value\"></a>3.writable和value</h3><p>value属性的值是否能被修改是根据writable确定的，当我们把writable的值设为true的时候，value可以被修改，否在反之。<br><img src=\"http://wx1.sinaimg.cn/large/005SNrnIgy1g2821jk29pj30by05jdfu.jpg\" alt=\"image\"><br>所以，当writable为false时，我们不能修改属性值，这里需要注意的是，如果configurable为false，此时我们可以将writable,但如果再设回为true就会报错。</p>\n<h2 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h2><p>访问器属性一共有四个，分别为<code>configurable</code>,<code>enumerable</code>,<code>get</code>,<code>set</code>，其中configurable和enumerable和数据属性中的是一样的，这里就不再进行说明</p>\n<ul>\n<li>get:在读取属性的时候会调用，默认值为undefind。</li>\n<li>set:在设置属性的时候会调用，默认为undefind。</li>\n</ul>\n<p>同样的我们可以通过<code>Object.defineProperty</code>对访问器属性进行设定。有兴趣的小伙伴下来自己试试吧，今天没时间啦(<em>^_^</em>)。</p>"},{"title":"防抖与节流","date":"2019-04-27T16:00:00.000Z","_content":"## 什么是节流与防抖呢\n在开发环境中，我们经常会遇见这样的问题，一个按钮连续点击就会连续调用`api`，从而使之出现不必要的麻烦。那么我们要怎么解决这样的问题呢？解决方法有很多，但是这里我想说的是利用函数防抖与节流来解决这样的问题，至于为什么我要使用防抖与节流来解决这样的问题看了下面你们就知道啦。\n\n - 函数防抖： 一个任务频繁触发的情况下，只有任务触发的间隔时间超过指定间隔的时候，任务才会去执行。\n - 函数节流：在指定的时间间隔里只会去执行一次任务。\n<!--more-->\n## 函数节流(throttle)\n在这里我以判断页面滚动到底部为例，平常普通的做法就是通过监听 `window` 的 `scroll` 事件，然后在函数体内写入判断是否滚动到底部的逻辑：\n``` branch\n$(window).on(\"scroll\",function(){\n  //判断是否滚动到底部逻辑,只要浏览器滚动就会进入此函数体\n  let pageHeight = $(\"body\").height(), //页面高度\n      scrollTop = $(window).scrollTop(), //滚动条距离顶部的距离\n      winHeight = $(window).height(),  //浏览器窗口的高度\n      thred = pageHeight - scrollTop - winHeight;\n      if(thred > -100 && thred <=20){\n        console.log(end)\n      }\n})\n```\n这样做的话有一个缺点就是耗性能，因为在滚动的时候，浏览器无时无刻都在计算着滚动条是否滚动到底部的逻辑，然而在实际场景中我们并不需要这样做，实际上工作中我们可能是这样：在滚动的过程中，隔一段时间再去计算滚动到底部的逻辑。而函数节流所做的工作就是每隔一段时间就去执行一次原本无时无刻执行的函数。所以在滚动中用它是不错的选择：\n``` branch\nfunction Throttling(fn,time = 1000){\n  let timer = null;  // 保存此标记判读是否执行函数\n  return function(){\n    if(!timer) {\n        timer = setTimeout(()=>{\n          fn.apply(this,arguments);\n         timer = null;// 这里设置为null，是为了实现滚动经过400ms过后再次执行函数\n        },time)\n    }\n  }\n}\n//使用方法\n$(windwo).on(\"scroll\",Throttling(\n function(){\n  ...\n }\n),400)\n```\n## 函数防抖(debounce)\n在这里我以注册用户为例,大多数网站的验证用户是否被注册都是通过 `input` 框中输入的时候去验证是否被注册，而不是在 `input` 失去焦点的时候去验证，大概是为了提高用户体验而这样做的吧。\n``` branch\n$(\".username\").on(\"input\",function(){\n $.ajax({\n   ...\n })\n})\n```\n显而易见这样的做法是不好的，当用户在 `input` 框中输入每一个字符时都会去调用后台接口验证用户是否被注册，这样不仅对服务器的压力增加，同时体验反而也没有原本的失去焦点效果好。理想的做法就是，当用户输入第一个字符过后的一段时间内如果还有字符输入的话，就暂时不去请求后台`api`验证用户是否被注册,函数防抖就是为了解决这样的问题。\n``` branch\nfunction debounce(fn,time = 1000){\n  let timer;\n  return function(){\n     clearTimeout(timer); // 当键盘连续输入时候,不执行函数\n     timer = setTimeout(()=>{\n       fn.apply(this,arguments);//传入this,是为了让fn函数中的this指向.apply中的第一个参数\n     },time)\n  }\n}\n//使用方法\n$(\".username\").on(\"input\",debounce(function(){\n  $.ajax({\n    ...\n  })\n}))\n```\n","source":"_posts/vue-shake.md","raw":"---\ntitle: 防抖与节流\ndate: 2019-04-28\ncategories:\n - 技术\ntags:\n - vue\n---\n## 什么是节流与防抖呢\n在开发环境中，我们经常会遇见这样的问题，一个按钮连续点击就会连续调用`api`，从而使之出现不必要的麻烦。那么我们要怎么解决这样的问题呢？解决方法有很多，但是这里我想说的是利用函数防抖与节流来解决这样的问题，至于为什么我要使用防抖与节流来解决这样的问题看了下面你们就知道啦。\n\n - 函数防抖： 一个任务频繁触发的情况下，只有任务触发的间隔时间超过指定间隔的时候，任务才会去执行。\n - 函数节流：在指定的时间间隔里只会去执行一次任务。\n<!--more-->\n## 函数节流(throttle)\n在这里我以判断页面滚动到底部为例，平常普通的做法就是通过监听 `window` 的 `scroll` 事件，然后在函数体内写入判断是否滚动到底部的逻辑：\n``` branch\n$(window).on(\"scroll\",function(){\n  //判断是否滚动到底部逻辑,只要浏览器滚动就会进入此函数体\n  let pageHeight = $(\"body\").height(), //页面高度\n      scrollTop = $(window).scrollTop(), //滚动条距离顶部的距离\n      winHeight = $(window).height(),  //浏览器窗口的高度\n      thred = pageHeight - scrollTop - winHeight;\n      if(thred > -100 && thred <=20){\n        console.log(end)\n      }\n})\n```\n这样做的话有一个缺点就是耗性能，因为在滚动的时候，浏览器无时无刻都在计算着滚动条是否滚动到底部的逻辑，然而在实际场景中我们并不需要这样做，实际上工作中我们可能是这样：在滚动的过程中，隔一段时间再去计算滚动到底部的逻辑。而函数节流所做的工作就是每隔一段时间就去执行一次原本无时无刻执行的函数。所以在滚动中用它是不错的选择：\n``` branch\nfunction Throttling(fn,time = 1000){\n  let timer = null;  // 保存此标记判读是否执行函数\n  return function(){\n    if(!timer) {\n        timer = setTimeout(()=>{\n          fn.apply(this,arguments);\n         timer = null;// 这里设置为null，是为了实现滚动经过400ms过后再次执行函数\n        },time)\n    }\n  }\n}\n//使用方法\n$(windwo).on(\"scroll\",Throttling(\n function(){\n  ...\n }\n),400)\n```\n## 函数防抖(debounce)\n在这里我以注册用户为例,大多数网站的验证用户是否被注册都是通过 `input` 框中输入的时候去验证是否被注册，而不是在 `input` 失去焦点的时候去验证，大概是为了提高用户体验而这样做的吧。\n``` branch\n$(\".username\").on(\"input\",function(){\n $.ajax({\n   ...\n })\n})\n```\n显而易见这样的做法是不好的，当用户在 `input` 框中输入每一个字符时都会去调用后台接口验证用户是否被注册，这样不仅对服务器的压力增加，同时体验反而也没有原本的失去焦点效果好。理想的做法就是，当用户输入第一个字符过后的一段时间内如果还有字符输入的话，就暂时不去请求后台`api`验证用户是否被注册,函数防抖就是为了解决这样的问题。\n``` branch\nfunction debounce(fn,time = 1000){\n  let timer;\n  return function(){\n     clearTimeout(timer); // 当键盘连续输入时候,不执行函数\n     timer = setTimeout(()=>{\n       fn.apply(this,arguments);//传入this,是为了让fn函数中的this指向.apply中的第一个参数\n     },time)\n  }\n}\n//使用方法\n$(\".username\").on(\"input\",debounce(function(){\n  $.ajax({\n    ...\n  })\n}))\n```\n","slug":"vue-shake","published":1,"updated":"2019-08-11T08:56:48.902Z","_id":"cjz6qgikj000zrou3y8tzjl9k","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是节流与防抖呢\"><a href=\"#什么是节流与防抖呢\" class=\"headerlink\" title=\"什么是节流与防抖呢\"></a>什么是节流与防抖呢</h2><p>在开发环境中，我们经常会遇见这样的问题，一个按钮连续点击就会连续调用<code>api</code>，从而使之出现不必要的麻烦。那么我们要怎么解决这样的问题呢？解决方法有很多，但是这里我想说的是利用函数防抖与节流来解决这样的问题，至于为什么我要使用防抖与节流来解决这样的问题看了下面你们就知道啦。</p>\n<ul>\n<li>函数防抖： 一个任务频繁触发的情况下，只有任务触发的间隔时间超过指定间隔的时候，任务才会去执行。</li>\n<li>函数节流：在指定的时间间隔里只会去执行一次任务。<a id=\"more\"></a>\n<h2 id=\"函数节流-throttle\"><a href=\"#函数节流-throttle\" class=\"headerlink\" title=\"函数节流(throttle)\"></a>函数节流(throttle)</h2>在这里我以判断页面滚动到底部为例，平常普通的做法就是通过监听 <code>window</code> 的 <code>scroll</code> 事件，然后在函数体内写入判断是否滚动到底部的逻辑：<div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(window).on(&quot;scroll&quot;,function()&#123;</span><br><span class=\"line\">  //判断是否滚动到底部逻辑,只要浏览器滚动就会进入此函数体</span><br><span class=\"line\">  let pageHeight = $(&quot;body&quot;).height(), //页面高度</span><br><span class=\"line\">      scrollTop = $(window).scrollTop(), //滚动条距离顶部的距离</span><br><span class=\"line\">      winHeight = $(window).height(),  //浏览器窗口的高度</span><br><span class=\"line\">      thred = pageHeight - scrollTop - winHeight;</span><br><span class=\"line\">      if(thred &gt; -100 &amp;&amp; thred &lt;=20)&#123;</span><br><span class=\"line\">        console.log(end)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n</li>\n</ul>\n<p>这样做的话有一个缺点就是耗性能，因为在滚动的时候，浏览器无时无刻都在计算着滚动条是否滚动到底部的逻辑，然而在实际场景中我们并不需要这样做，实际上工作中我们可能是这样：在滚动的过程中，隔一段时间再去计算滚动到底部的逻辑。而函数节流所做的工作就是每隔一段时间就去执行一次原本无时无刻执行的函数。所以在滚动中用它是不错的选择：<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Throttling(fn,time = 1000)&#123;</span><br><span class=\"line\">  let timer = null;  // 保存此标记判读是否执行函数</span><br><span class=\"line\">  return function()&#123;</span><br><span class=\"line\">    if(!timer) &#123;</span><br><span class=\"line\">        timer = setTimeout(()=&gt;&#123;</span><br><span class=\"line\">          fn.apply(this,arguments);</span><br><span class=\"line\">         timer = null;// 这里设置为null，是为了实现滚动经过400ms过后再次执行函数</span><br><span class=\"line\">        &#125;,time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用方法</span><br><span class=\"line\">$(windwo).on(&quot;scroll&quot;,Throttling(</span><br><span class=\"line\"> function()&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">),400)</span><br></pre></td></tr></table></figure></div></p>\n<h2 id=\"函数防抖-debounce\"><a href=\"#函数防抖-debounce\" class=\"headerlink\" title=\"函数防抖(debounce)\"></a>函数防抖(debounce)</h2><p>在这里我以注册用户为例,大多数网站的验证用户是否被注册都是通过 <code>input</code> 框中输入的时候去验证是否被注册，而不是在 <code>input</code> 失去焦点的时候去验证，大概是为了提高用户体验而这样做的吧。<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;.username&quot;).on(&quot;input&quot;,function()&#123;</span><br><span class=\"line\"> $.ajax(&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div></p>\n<p>显而易见这样的做法是不好的，当用户在 <code>input</code> 框中输入每一个字符时都会去调用后台接口验证用户是否被注册，这样不仅对服务器的压力增加，同时体验反而也没有原本的失去焦点效果好。理想的做法就是，当用户输入第一个字符过后的一段时间内如果还有字符输入的话，就暂时不去请求后台<code>api</code>验证用户是否被注册,函数防抖就是为了解决这样的问题。<br><div class=\"highlight-box\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight /plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function debounce(fn,time = 1000)&#123;</span><br><span class=\"line\">  let timer;</span><br><span class=\"line\">  return function()&#123;</span><br><span class=\"line\">     clearTimeout(timer); // 当键盘连续输入时候,不执行函数</span><br><span class=\"line\">     timer = setTimeout(()=&gt;&#123;</span><br><span class=\"line\">       fn.apply(this,arguments);//传入this,是为了让fn函数中的this指向.apply中的第一个参数</span><br><span class=\"line\">     &#125;,time)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用方法</span><br><span class=\"line\">$(&quot;.username&quot;).on(&quot;input&quot;,debounce(function()&#123;</span><br><span class=\"line\">  $.ajax(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure></div></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是节流与防抖呢\"><a href=\"#什么是节流与防抖呢\" class=\"headerlink\" title=\"什么是节流与防抖呢\"></a>什么是节流与防抖呢</h2><p>在开发环境中，我们经常会遇见这样的问题，一个按钮连续点击就会连续调用<code>api</code>，从而使之出现不必要的麻烦。那么我们要怎么解决这样的问题呢？解决方法有很多，但是这里我想说的是利用函数防抖与节流来解决这样的问题，至于为什么我要使用防抖与节流来解决这样的问题看了下面你们就知道啦。</p>\n<ul>\n<li>函数防抖： 一个任务频繁触发的情况下，只有任务触发的间隔时间超过指定间隔的时候，任务才会去执行。</li>\n<li>函数节流：在指定的时间间隔里只会去执行一次任务。","more":"<h2 id=\"函数节流-throttle\"><a href=\"#函数节流-throttle\" class=\"headerlink\" title=\"函数节流(throttle)\"></a>函数节流(throttle)</h2>在这里我以判断页面滚动到底部为例，平常普通的做法就是通过监听 <code>window</code> 的 <code>scroll</code> 事件，然后在函数体内写入判断是否滚动到底部的逻辑：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(window).on(&quot;scroll&quot;,function()&#123;</span><br><span class=\"line\">  //判断是否滚动到底部逻辑,只要浏览器滚动就会进入此函数体</span><br><span class=\"line\">  let pageHeight = $(&quot;body&quot;).height(), //页面高度</span><br><span class=\"line\">      scrollTop = $(window).scrollTop(), //滚动条距离顶部的距离</span><br><span class=\"line\">      winHeight = $(window).height(),  //浏览器窗口的高度</span><br><span class=\"line\">      thred = pageHeight - scrollTop - winHeight;</span><br><span class=\"line\">      if(thred &gt; -100 &amp;&amp; thred &lt;=20)&#123;</span><br><span class=\"line\">        console.log(end)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样做的话有一个缺点就是耗性能，因为在滚动的时候，浏览器无时无刻都在计算着滚动条是否滚动到底部的逻辑，然而在实际场景中我们并不需要这样做，实际上工作中我们可能是这样：在滚动的过程中，隔一段时间再去计算滚动到底部的逻辑。而函数节流所做的工作就是每隔一段时间就去执行一次原本无时无刻执行的函数。所以在滚动中用它是不错的选择：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Throttling(fn,time = 1000)&#123;</span><br><span class=\"line\">  let timer = null;  // 保存此标记判读是否执行函数</span><br><span class=\"line\">  return function()&#123;</span><br><span class=\"line\">    if(!timer) &#123;</span><br><span class=\"line\">        timer = setTimeout(()=&gt;&#123;</span><br><span class=\"line\">          fn.apply(this,arguments);</span><br><span class=\"line\">         timer = null;// 这里设置为null，是为了实现滚动经过400ms过后再次执行函数</span><br><span class=\"line\">        &#125;,time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用方法</span><br><span class=\"line\">$(windwo).on(&quot;scroll&quot;,Throttling(</span><br><span class=\"line\"> function()&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">),400)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"函数防抖-debounce\"><a href=\"#函数防抖-debounce\" class=\"headerlink\" title=\"函数防抖(debounce)\"></a>函数防抖(debounce)</h2><p>在这里我以注册用户为例,大多数网站的验证用户是否被注册都是通过 <code>input</code> 框中输入的时候去验证是否被注册，而不是在 <code>input</code> 失去焦点的时候去验证，大概是为了提高用户体验而这样做的吧。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;.username&quot;).on(&quot;input&quot;,function()&#123;</span><br><span class=\"line\"> $.ajax(&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>显而易见这样的做法是不好的，当用户在 <code>input</code> 框中输入每一个字符时都会去调用后台接口验证用户是否被注册，这样不仅对服务器的压力增加，同时体验反而也没有原本的失去焦点效果好。理想的做法就是，当用户输入第一个字符过后的一段时间内如果还有字符输入的话，就暂时不去请求后台<code>api</code>验证用户是否被注册,函数防抖就是为了解决这样的问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function debounce(fn,time = 1000)&#123;</span><br><span class=\"line\">  let timer;</span><br><span class=\"line\">  return function()&#123;</span><br><span class=\"line\">     clearTimeout(timer); // 当键盘连续输入时候,不执行函数</span><br><span class=\"line\">     timer = setTimeout(()=&gt;&#123;</span><br><span class=\"line\">       fn.apply(this,arguments);//传入this,是为了让fn函数中的this指向.apply中的第一个参数</span><br><span class=\"line\">     &#125;,time)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用方法</span><br><span class=\"line\">$(&quot;.username&quot;).on(&quot;input&quot;,debounce(function()&#123;</span><br><span class=\"line\">  $.ajax(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjz6qgijh0002rou3fcrcuhk5","category_id":"cjz6qgiju0009rou39hcuvtxv","_id":"cjz6qgikd000qrou3oz30rvqt"},{"post_id":"cjz6qgik2000jrou3ns6sixgb","category_id":"cjz6qgiju0009rou39hcuvtxv","_id":"cjz6qgikf000trou3k91yqryk"},{"post_id":"cjz6qgijp0006rou31n7kr7ua","category_id":"cjz6qgiju0009rou39hcuvtxv","_id":"cjz6qgiki000xrou3lgn3vnqr"},{"post_id":"cjz6qgik7000lrou3wgo4d8r4","category_id":"cjz6qgijl0004rou3u9g7act5","_id":"cjz6qgikj0010rou3vdk6odo5"},{"post_id":"cjz6qgikb000prou3xegxx39g","category_id":"cjz6qgiju0009rou39hcuvtxv","_id":"cjz6qgikl0013rou3du3eu866"},{"post_id":"cjz6qgijr0007rou3sl8t7ixa","category_id":"cjz6qgiju0009rou39hcuvtxv","_id":"cjz6qgikl0015rou35uyo9hog"},{"post_id":"cjz6qgike000srou37ph5k4jt","category_id":"cjz6qgiju0009rou39hcuvtxv","_id":"cjz6qgikn0016rou3etd8pp23"},{"post_id":"cjz6qgikh000wrou3it1frn4u","category_id":"cjz6qgiju0009rou39hcuvtxv","_id":"cjz6qgiko0019rou30aqzf3in"},{"post_id":"cjz6qgijt0008rou3pkrgkhsb","category_id":"cjz6qgiju0009rou39hcuvtxv","_id":"cjz6qgikp001arou3my759xnb"},{"post_id":"cjz6qgikj000zrou3y8tzjl9k","category_id":"cjz6qgiju0009rou39hcuvtxv","_id":"cjz6qgikq001crou3w0b79wrc"},{"post_id":"cjz6qgij20000rou30c8czfe8","category_id":"cjz6qgijl0004rou3u9g7act5","_id":"cjz6qlg990001ngu32utzq4lq"},{"post_id":"cjz6qgijv000crou33dvg229f","category_id":"cjz6qgiju0009rou39hcuvtxv","_id":"cjz6qlo5w0001a8u30lc8jvac"}],"PostTag":[{"post_id":"cjz6qgijr0007rou3sl8t7ixa","tag_id":"cjz6qgijn0005rou3qbw97fcr","_id":"cjz6qgijv000brou3in05pv1o"},{"post_id":"cjz6qgijt0008rou3pkrgkhsb","tag_id":"cjz6qgijn0005rou3qbw97fcr","_id":"cjz6qgik2000irou3m03fk7v6"},{"post_id":"cjz6qgijh0002rou3fcrcuhk5","tag_id":"cjz6qgiju000arou3ji22krjo","_id":"cjz6qgik6000krou3owqdg3ny"},{"post_id":"cjz6qgijp0006rou31n7kr7ua","tag_id":"cjz6qgijn0005rou3qbw97fcr","_id":"cjz6qgikd000rrou3ir7pjdgv"},{"post_id":"cjz6qgikh000wrou3it1frn4u","tag_id":"cjz6qgijn0005rou3qbw97fcr","_id":"cjz6qgikk0011rou3zw0qwobb"},{"post_id":"cjz6qgijx000erou3ngaerrqe","tag_id":"cjz6qgikg000vrou3sdbvd9x2","_id":"cjz6qgikl0014rou3ozm3wbq1"},{"post_id":"cjz6qgik2000jrou3ns6sixgb","tag_id":"cjz6qgikk0012rou314mdsrpx","_id":"cjz6qgiko0018rou3n5ultqcf"},{"post_id":"cjz6qgik7000lrou3wgo4d8r4","tag_id":"cjz6qgikn0017rou3f8u6lfej","_id":"cjz6qgikq001drou3lxlc3nuc"},{"post_id":"cjz6qgikb000prou3xegxx39g","tag_id":"cjz6qgikn0017rou3f8u6lfej","_id":"cjz6qgiks001frou3f6bym0ya"},{"post_id":"cjz6qgike000srou37ph5k4jt","tag_id":"cjz6qgikn0017rou3f8u6lfej","_id":"cjz6qgikt001hrou30j6p8a0q"},{"post_id":"cjz6qgikj000zrou3y8tzjl9k","tag_id":"cjz6qgikn0017rou3f8u6lfej","_id":"cjz6qgiku001irou3s63h55zz"},{"post_id":"cjz6qgij20000rou30c8czfe8","tag_id":"cjz6qgijn0005rou3qbw97fcr","_id":"cjz6qlg980000ngu3ckvamz90"},{"post_id":"cjz6qgijv000crou33dvg229f","tag_id":"cjz6qgika000orou3mlh4its7","_id":"cjz6qlo5t0000a8u3e4hdefrb"}],"Tag":[{"name":"js","_id":"cjz6qgijn0005rou3qbw97fcr"},{"name":"react","_id":"cjz6qgiju000arou3ji22krjo"},{"name":"css","_id":"cjz6qgika000orou3mlh4its7"},{"name":"browser","_id":"cjz6qgikg000vrou3sdbvd9x2"},{"name":"git","_id":"cjz6qgikk0012rou314mdsrpx"},{"name":"vue","_id":"cjz6qgikn0017rou3f8u6lfej"}]}}